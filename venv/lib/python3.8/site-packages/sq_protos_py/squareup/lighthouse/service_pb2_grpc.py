# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.lighthouse import service_pb2 as squareup_dot_lighthouse_dot_service__pb2


class LighthouseLookupServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetByGatewayOrderToken = channel.unary_unary(
                '/squareup.lighthouse.LighthouseLookupService/GetByGatewayOrderToken',
                request_serializer=squareup_dot_lighthouse_dot_service__pb2.GetByGatewayOrderTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetByGatewayOrderTokenResponse.FromString,
                )
        self.GetByPaymentId = channel.unary_unary(
                '/squareup.lighthouse.LighthouseLookupService/GetByPaymentId',
                request_serializer=squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdRequest.SerializeToString,
                response_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdResponse.FromString,
                )
        self.GetByPaymentIdBatch = channel.unary_unary(
                '/squareup.lighthouse.LighthouseLookupService/GetByPaymentIdBatch',
                request_serializer=squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdBatchRequest.SerializeToString,
                response_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdBatchResponse.FromString,
                )
        self.GetNameOnCardByCardToken = channel.unary_unary(
                '/squareup.lighthouse.LighthouseLookupService/GetNameOnCardByCardToken',
                request_serializer=squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenResponse.FromString,
                )
        self.GetNameOnCardByCardTokenBatch = channel.unary_unary(
                '/squareup.lighthouse.LighthouseLookupService/GetNameOnCardByCardTokenBatch',
                request_serializer=squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenBatchRequest.SerializeToString,
                response_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenBatchResponse.FromString,
                )


class LighthouseLookupServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetByGatewayOrderToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetByPaymentId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetByPaymentIdBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNameOnCardByCardToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNameOnCardByCardTokenBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LighthouseLookupServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetByGatewayOrderToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByGatewayOrderToken,
                    request_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetByGatewayOrderTokenRequest.FromString,
                    response_serializer=squareup_dot_lighthouse_dot_service__pb2.GetByGatewayOrderTokenResponse.SerializeToString,
            ),
            'GetByPaymentId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByPaymentId,
                    request_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdRequest.FromString,
                    response_serializer=squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdResponse.SerializeToString,
            ),
            'GetByPaymentIdBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByPaymentIdBatch,
                    request_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdBatchRequest.FromString,
                    response_serializer=squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdBatchResponse.SerializeToString,
            ),
            'GetNameOnCardByCardToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNameOnCardByCardToken,
                    request_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenRequest.FromString,
                    response_serializer=squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenResponse.SerializeToString,
            ),
            'GetNameOnCardByCardTokenBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNameOnCardByCardTokenBatch,
                    request_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenBatchRequest.FromString,
                    response_serializer=squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.lighthouse.LighthouseLookupService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LighthouseLookupService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetByGatewayOrderToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lighthouse.LighthouseLookupService/GetByGatewayOrderToken',
            squareup_dot_lighthouse_dot_service__pb2.GetByGatewayOrderTokenRequest.SerializeToString,
            squareup_dot_lighthouse_dot_service__pb2.GetByGatewayOrderTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetByPaymentId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lighthouse.LighthouseLookupService/GetByPaymentId',
            squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdRequest.SerializeToString,
            squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetByPaymentIdBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lighthouse.LighthouseLookupService/GetByPaymentIdBatch',
            squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdBatchRequest.SerializeToString,
            squareup_dot_lighthouse_dot_service__pb2.GetByPaymentIdBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNameOnCardByCardToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lighthouse.LighthouseLookupService/GetNameOnCardByCardToken',
            squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenRequest.SerializeToString,
            squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNameOnCardByCardTokenBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lighthouse.LighthouseLookupService/GetNameOnCardByCardTokenBatch',
            squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenBatchRequest.SerializeToString,
            squareup_dot_lighthouse_dot_service__pb2.GetNameOnCardByCardTokenBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LighthouseAdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRaisedAlerts = channel.unary_unary(
                '/squareup.lighthouse.LighthouseAdminService/GetRaisedAlerts',
                request_serializer=squareup_dot_lighthouse_dot_service__pb2.GetRaisedAlertsRequest.SerializeToString,
                response_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetRaisedAlertsResponse.FromString,
                )
        self.HandleRaisedAlert = channel.unary_unary(
                '/squareup.lighthouse.LighthouseAdminService/HandleRaisedAlert',
                request_serializer=squareup_dot_lighthouse_dot_service__pb2.HandleRaisedAlertRequest.SerializeToString,
                response_deserializer=squareup_dot_lighthouse_dot_service__pb2.HandleRaisedAlertResponse.FromString,
                )
        self.AddAlertSilence = channel.unary_unary(
                '/squareup.lighthouse.LighthouseAdminService/AddAlertSilence',
                request_serializer=squareup_dot_lighthouse_dot_service__pb2.AddAlertSilenceRequest.SerializeToString,
                response_deserializer=squareup_dot_lighthouse_dot_service__pb2.AddAlertSilenceResponse.FromString,
                )
        self.GetAlertSilences = channel.unary_unary(
                '/squareup.lighthouse.LighthouseAdminService/GetAlertSilences',
                request_serializer=squareup_dot_lighthouse_dot_service__pb2.GetAlertSilencesRequest.SerializeToString,
                response_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetAlertSilencesResponse.FromString,
                )


class LighthouseAdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRaisedAlerts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandleRaisedAlert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAlertSilence(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAlertSilences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LighthouseAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRaisedAlerts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRaisedAlerts,
                    request_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetRaisedAlertsRequest.FromString,
                    response_serializer=squareup_dot_lighthouse_dot_service__pb2.GetRaisedAlertsResponse.SerializeToString,
            ),
            'HandleRaisedAlert': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleRaisedAlert,
                    request_deserializer=squareup_dot_lighthouse_dot_service__pb2.HandleRaisedAlertRequest.FromString,
                    response_serializer=squareup_dot_lighthouse_dot_service__pb2.HandleRaisedAlertResponse.SerializeToString,
            ),
            'AddAlertSilence': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAlertSilence,
                    request_deserializer=squareup_dot_lighthouse_dot_service__pb2.AddAlertSilenceRequest.FromString,
                    response_serializer=squareup_dot_lighthouse_dot_service__pb2.AddAlertSilenceResponse.SerializeToString,
            ),
            'GetAlertSilences': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlertSilences,
                    request_deserializer=squareup_dot_lighthouse_dot_service__pb2.GetAlertSilencesRequest.FromString,
                    response_serializer=squareup_dot_lighthouse_dot_service__pb2.GetAlertSilencesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.lighthouse.LighthouseAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LighthouseAdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRaisedAlerts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lighthouse.LighthouseAdminService/GetRaisedAlerts',
            squareup_dot_lighthouse_dot_service__pb2.GetRaisedAlertsRequest.SerializeToString,
            squareup_dot_lighthouse_dot_service__pb2.GetRaisedAlertsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HandleRaisedAlert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lighthouse.LighthouseAdminService/HandleRaisedAlert',
            squareup_dot_lighthouse_dot_service__pb2.HandleRaisedAlertRequest.SerializeToString,
            squareup_dot_lighthouse_dot_service__pb2.HandleRaisedAlertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAlertSilence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lighthouse.LighthouseAdminService/AddAlertSilence',
            squareup_dot_lighthouse_dot_service__pb2.AddAlertSilenceRequest.SerializeToString,
            squareup_dot_lighthouse_dot_service__pb2.AddAlertSilenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAlertSilences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lighthouse.LighthouseAdminService/GetAlertSilences',
            squareup_dot_lighthouse_dot_service__pb2.GetAlertSilencesRequest.SerializeToString,
            squareup_dot_lighthouse_dot_service__pb2.GetAlertSilencesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

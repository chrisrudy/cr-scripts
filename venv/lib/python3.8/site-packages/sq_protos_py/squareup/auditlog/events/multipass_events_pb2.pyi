# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.auditlog.event_types_pb2 import (
    EventTypeScope as squareup___auditlog___event_types_pb2___EventTypeScope,
)

from sq_protos_py.squareup.multipass.common_pb2 import (
    Device as squareup___multipass___common_pb2___Device,
    TwoFactorDetails as squareup___multipass___common_pb2___TwoFactorDetails,
)

from sq_protos_py.squareup.multipass.service.common_pb2 import (
    DeviceDetails as squareup___multipass___service___common_pb2___DeviceDetails,
)

from typing import (
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Multipass(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    person_token: typing___Text = ...
    merchant_token: typing___Text = ...
    unit_token: typing___Text = ...
    ip_address: typing___Text = ...
    event_type: squareup___auditlog___event_types_pb2___EventTypeScope.EventTypeValue = ...

    @property
    def multipass_2fa_manage(self) -> type___MultipassTwoFactorMethod: ...

    @property
    def multipass_2fa_state_change(self) -> type___MultipassTwoFactorState: ...

    @property
    def multipass_password_change(self) -> type___MultipassPasswordChange: ...

    @property
    def multipass_session_create(self) -> type___MultipassSessionCreate: ...

    @property
    def multipass_email_change(self) -> type___MultipassEmailChange: ...

    @property
    def multipass_password_reset_code(self) -> type___MultipassPasswordResetCode: ...

    @property
    def multipass_onboard(self) -> type___MultipassOnboard: ...

    @property
    def multipass_session_terminate(self) -> type___MultipassSessionTerminate: ...

    @property
    def multipass_session_terminate_all(self) -> type___MultipassSessionTerminateAll: ...

    @property
    def multipass_device(self) -> type___MultipassDevice: ...

    @property
    def multipass_select_merchant(self) -> type___MultipassSelectMerchant: ...

    @property
    def multipass_select_unit(self) -> type___MultipassSelectUnit: ...

    @property
    def multipass_claim_account_get_link(self) -> type___MultipassClaimAccountGetLink: ...

    @property
    def multipass_claim_account_set_password(self) -> type___MultipassClaimAccountSetPassword: ...

    def __init__(self,
        *,
        person_token : typing___Optional[typing___Text] = None,
        merchant_token : typing___Optional[typing___Text] = None,
        unit_token : typing___Optional[typing___Text] = None,
        ip_address : typing___Optional[typing___Text] = None,
        event_type : typing___Optional[squareup___auditlog___event_types_pb2___EventTypeScope.EventTypeValue] = None,
        multipass_2fa_manage : typing___Optional[type___MultipassTwoFactorMethod] = None,
        multipass_2fa_state_change : typing___Optional[type___MultipassTwoFactorState] = None,
        multipass_password_change : typing___Optional[type___MultipassPasswordChange] = None,
        multipass_session_create : typing___Optional[type___MultipassSessionCreate] = None,
        multipass_email_change : typing___Optional[type___MultipassEmailChange] = None,
        multipass_password_reset_code : typing___Optional[type___MultipassPasswordResetCode] = None,
        multipass_onboard : typing___Optional[type___MultipassOnboard] = None,
        multipass_session_terminate : typing___Optional[type___MultipassSessionTerminate] = None,
        multipass_session_terminate_all : typing___Optional[type___MultipassSessionTerminateAll] = None,
        multipass_device : typing___Optional[type___MultipassDevice] = None,
        multipass_select_merchant : typing___Optional[type___MultipassSelectMerchant] = None,
        multipass_select_unit : typing___Optional[type___MultipassSelectUnit] = None,
        multipass_claim_account_get_link : typing___Optional[type___MultipassClaimAccountGetLink] = None,
        multipass_claim_account_set_password : typing___Optional[type___MultipassClaimAccountSetPassword] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"event",b"event",u"event_type",b"event_type",u"ip_address",b"ip_address",u"merchant_token",b"merchant_token",u"multipass_2fa_manage",b"multipass_2fa_manage",u"multipass_2fa_state_change",b"multipass_2fa_state_change",u"multipass_claim_account_get_link",b"multipass_claim_account_get_link",u"multipass_claim_account_set_password",b"multipass_claim_account_set_password",u"multipass_device",b"multipass_device",u"multipass_email_change",b"multipass_email_change",u"multipass_onboard",b"multipass_onboard",u"multipass_password_change",b"multipass_password_change",u"multipass_password_reset_code",b"multipass_password_reset_code",u"multipass_select_merchant",b"multipass_select_merchant",u"multipass_select_unit",b"multipass_select_unit",u"multipass_session_create",b"multipass_session_create",u"multipass_session_terminate",b"multipass_session_terminate",u"multipass_session_terminate_all",b"multipass_session_terminate_all",u"person_token",b"person_token",u"unit_token",b"unit_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"event",b"event",u"event_type",b"event_type",u"ip_address",b"ip_address",u"merchant_token",b"merchant_token",u"multipass_2fa_manage",b"multipass_2fa_manage",u"multipass_2fa_state_change",b"multipass_2fa_state_change",u"multipass_claim_account_get_link",b"multipass_claim_account_get_link",u"multipass_claim_account_set_password",b"multipass_claim_account_set_password",u"multipass_device",b"multipass_device",u"multipass_email_change",b"multipass_email_change",u"multipass_onboard",b"multipass_onboard",u"multipass_password_change",b"multipass_password_change",u"multipass_password_reset_code",b"multipass_password_reset_code",u"multipass_select_merchant",b"multipass_select_merchant",u"multipass_select_unit",b"multipass_select_unit",u"multipass_session_create",b"multipass_session_create",u"multipass_session_terminate",b"multipass_session_terminate",u"multipass_session_terminate_all",b"multipass_session_terminate_all",u"person_token",b"person_token",u"unit_token",b"unit_token"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"event",b"event"]) -> typing_extensions___Literal["multipass_2fa_manage","multipass_2fa_state_change","multipass_password_change","multipass_session_create","multipass_email_change","multipass_password_reset_code","multipass_onboard","multipass_session_terminate","multipass_session_terminate_all","multipass_device","multipass_select_merchant","multipass_select_unit","multipass_claim_account_get_link","multipass_claim_account_set_password"]: ...
type___Multipass = Multipass

class MultipassTwoFactorMethod(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    TwoFactorActionValue = typing___NewType('TwoFactorActionValue', builtin___int)
    type___TwoFactorActionValue = TwoFactorActionValue
    TwoFactorAction: _TwoFactorAction
    class _TwoFactorAction(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[MultipassTwoFactorMethod.TwoFactorActionValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(MultipassTwoFactorMethod.TwoFactorActionValue, 0)
        ENROLL = typing___cast(MultipassTwoFactorMethod.TwoFactorActionValue, 1)
        REMOVE = typing___cast(MultipassTwoFactorMethod.TwoFactorActionValue, 2)
        RESET = typing___cast(MultipassTwoFactorMethod.TwoFactorActionValue, 3)
    UNKNOWN = typing___cast(MultipassTwoFactorMethod.TwoFactorActionValue, 0)
    ENROLL = typing___cast(MultipassTwoFactorMethod.TwoFactorActionValue, 1)
    REMOVE = typing___cast(MultipassTwoFactorMethod.TwoFactorActionValue, 2)
    RESET = typing___cast(MultipassTwoFactorMethod.TwoFactorActionValue, 3)
    type___TwoFactorAction = TwoFactorAction

    action: type___MultipassTwoFactorMethod.TwoFactorActionValue = ...

    @property
    def two_factor_details(self) -> squareup___multipass___common_pb2___TwoFactorDetails: ...

    def __init__(self,
        *,
        two_factor_details : typing___Optional[squareup___multipass___common_pb2___TwoFactorDetails] = None,
        action : typing___Optional[type___MultipassTwoFactorMethod.TwoFactorActionValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"action",b"action",u"two_factor_details",b"two_factor_details"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"action",b"action",u"two_factor_details",b"two_factor_details"]) -> None: ...
type___MultipassTwoFactorMethod = MultipassTwoFactorMethod

class MultipassTwoFactorState(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    TwoFactorStateValue = typing___NewType('TwoFactorStateValue', builtin___int)
    type___TwoFactorStateValue = TwoFactorStateValue
    TwoFactorState: _TwoFactorState
    class _TwoFactorState(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[MultipassTwoFactorState.TwoFactorStateValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(MultipassTwoFactorState.TwoFactorStateValue, 0)
        OFF = typing___cast(MultipassTwoFactorState.TwoFactorStateValue, 1)
        REQUIRED = typing___cast(MultipassTwoFactorState.TwoFactorStateValue, 2)
        OPTIONAL = typing___cast(MultipassTwoFactorState.TwoFactorStateValue, 3)
    UNKNOWN = typing___cast(MultipassTwoFactorState.TwoFactorStateValue, 0)
    OFF = typing___cast(MultipassTwoFactorState.TwoFactorStateValue, 1)
    REQUIRED = typing___cast(MultipassTwoFactorState.TwoFactorStateValue, 2)
    OPTIONAL = typing___cast(MultipassTwoFactorState.TwoFactorStateValue, 3)
    type___TwoFactorState = TwoFactorState

    state: type___MultipassTwoFactorState.TwoFactorStateValue = ...

    def __init__(self,
        *,
        state : typing___Optional[type___MultipassTwoFactorState.TwoFactorStateValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"state",b"state"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"state",b"state"]) -> None: ...
type___MultipassTwoFactorState = MultipassTwoFactorState

class MultipassPasswordChange(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    PasswordActionValue = typing___NewType('PasswordActionValue', builtin___int)
    type___PasswordActionValue = PasswordActionValue
    PasswordAction: _PasswordAction
    class _PasswordAction(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[MultipassPasswordChange.PasswordActionValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(MultipassPasswordChange.PasswordActionValue, 0)
        CHANGE = typing___cast(MultipassPasswordChange.PasswordActionValue, 1)
        RESET = typing___cast(MultipassPasswordChange.PasswordActionValue, 2)
    UNKNOWN = typing___cast(MultipassPasswordChange.PasswordActionValue, 0)
    CHANGE = typing___cast(MultipassPasswordChange.PasswordActionValue, 1)
    RESET = typing___cast(MultipassPasswordChange.PasswordActionValue, 2)
    type___PasswordAction = PasswordAction

    credential_token: typing___Text = ...
    locale: typing___Text = ...
    action: type___MultipassPasswordChange.PasswordActionValue = ...

    @property
    def device_details(self) -> squareup___multipass___service___common_pb2___DeviceDetails: ...

    def __init__(self,
        *,
        credential_token : typing___Optional[typing___Text] = None,
        device_details : typing___Optional[squareup___multipass___service___common_pb2___DeviceDetails] = None,
        locale : typing___Optional[typing___Text] = None,
        action : typing___Optional[type___MultipassPasswordChange.PasswordActionValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"action",b"action",u"credential_token",b"credential_token",u"device_details",b"device_details",u"locale",b"locale"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"action",b"action",u"credential_token",b"credential_token",u"device_details",b"device_details",u"locale",b"locale"]) -> None: ...
type___MultipassPasswordChange = MultipassPasswordChange

class MultipassPasswordResetCode(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    CodeActionValue = typing___NewType('CodeActionValue', builtin___int)
    type___CodeActionValue = CodeActionValue
    CodeAction: _CodeAction
    class _CodeAction(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[MultipassPasswordResetCode.CodeActionValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(MultipassPasswordResetCode.CodeActionValue, 0)
        SENT = typing___cast(MultipassPasswordResetCode.CodeActionValue, 1)
        VERIFIED = typing___cast(MultipassPasswordResetCode.CodeActionValue, 2)
    UNKNOWN = typing___cast(MultipassPasswordResetCode.CodeActionValue, 0)
    SENT = typing___cast(MultipassPasswordResetCode.CodeActionValue, 1)
    VERIFIED = typing___cast(MultipassPasswordResetCode.CodeActionValue, 2)
    type___CodeAction = CodeAction

    action: type___MultipassPasswordResetCode.CodeActionValue = ...
    email: typing___Text = ...
    phone: typing___Text = ...

    def __init__(self,
        *,
        action : typing___Optional[type___MultipassPasswordResetCode.CodeActionValue] = None,
        email : typing___Optional[typing___Text] = None,
        phone : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"action",b"action",u"destination",b"destination",u"email",b"email",u"phone",b"phone"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"action",b"action",u"destination",b"destination",u"email",b"email",u"phone",b"phone"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"destination",b"destination"]) -> typing_extensions___Literal["email","phone"]: ...
type___MultipassPasswordResetCode = MultipassPasswordResetCode

class MultipassSessionCreate(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    LoginMethodValue = typing___NewType('LoginMethodValue', builtin___int)
    type___LoginMethodValue = LoginMethodValue
    LoginMethod: _LoginMethod
    class _LoginMethod(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[MultipassSessionCreate.LoginMethodValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(MultipassSessionCreate.LoginMethodValue, 0)
        DEVICE = typing___cast(MultipassSessionCreate.LoginMethodValue, 1)
        TOTP = typing___cast(MultipassSessionCreate.LoginMethodValue, 2)
        REGULAR = typing___cast(MultipassSessionCreate.LoginMethodValue, 3)
        IMPERSONATE = typing___cast(MultipassSessionCreate.LoginMethodValue, 4)
    UNKNOWN = typing___cast(MultipassSessionCreate.LoginMethodValue, 0)
    DEVICE = typing___cast(MultipassSessionCreate.LoginMethodValue, 1)
    TOTP = typing___cast(MultipassSessionCreate.LoginMethodValue, 2)
    REGULAR = typing___cast(MultipassSessionCreate.LoginMethodValue, 3)
    IMPERSONATE = typing___cast(MultipassSessionCreate.LoginMethodValue, 4)
    type___LoginMethod = LoginMethod

    createdBy: type___MultipassSessionCreate.LoginMethodValue = ...
    email: typing___Text = ...
    phone: typing___Text = ...
    person_token: typing___Text = ...
    credential_token: typing___Text = ...
    application_token: typing___Text = ...
    app_owner_token: typing___Text = ...
    platform_account_token: typing___Text = ...
    merchant_token: typing___Text = ...
    unit_token: typing___Text = ...
    device_credential_token: typing___Text = ...

    @property
    def device_details(self) -> squareup___multipass___service___common_pb2___DeviceDetails: ...

    def __init__(self,
        *,
        createdBy : typing___Optional[type___MultipassSessionCreate.LoginMethodValue] = None,
        email : typing___Optional[typing___Text] = None,
        phone : typing___Optional[typing___Text] = None,
        person_token : typing___Optional[typing___Text] = None,
        credential_token : typing___Optional[typing___Text] = None,
        device_details : typing___Optional[squareup___multipass___service___common_pb2___DeviceDetails] = None,
        application_token : typing___Optional[typing___Text] = None,
        app_owner_token : typing___Optional[typing___Text] = None,
        platform_account_token : typing___Optional[typing___Text] = None,
        merchant_token : typing___Optional[typing___Text] = None,
        unit_token : typing___Optional[typing___Text] = None,
        device_credential_token : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"app_owner_token",b"app_owner_token",u"application_token",b"application_token",u"createdBy",b"createdBy",u"credential_token",b"credential_token",u"device_credential_token",b"device_credential_token",u"device_details",b"device_details",u"email",b"email",u"merchant_token",b"merchant_token",u"person_token",b"person_token",u"phone",b"phone",u"platform_account_token",b"platform_account_token",u"target",b"target",u"unit_token",b"unit_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"app_owner_token",b"app_owner_token",u"application_token",b"application_token",u"createdBy",b"createdBy",u"credential_token",b"credential_token",u"device_credential_token",b"device_credential_token",u"device_details",b"device_details",u"email",b"email",u"merchant_token",b"merchant_token",u"person_token",b"person_token",u"phone",b"phone",u"platform_account_token",b"platform_account_token",u"target",b"target",u"unit_token",b"unit_token"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"target",b"target"]) -> typing_extensions___Literal["email","phone","person_token"]: ...
type___MultipassSessionCreate = MultipassSessionCreate

class MultipassSessionTerminate(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    credential_token: typing___Text = ...
    application_token: typing___Text = ...
    app_owner_token: typing___Text = ...
    platform_account_token: typing___Text = ...
    merchant_token: typing___Text = ...
    unit_token: typing___Text = ...

    @property
    def device_details(self) -> squareup___multipass___service___common_pb2___DeviceDetails: ...

    def __init__(self,
        *,
        credential_token : typing___Optional[typing___Text] = None,
        device_details : typing___Optional[squareup___multipass___service___common_pb2___DeviceDetails] = None,
        application_token : typing___Optional[typing___Text] = None,
        app_owner_token : typing___Optional[typing___Text] = None,
        platform_account_token : typing___Optional[typing___Text] = None,
        merchant_token : typing___Optional[typing___Text] = None,
        unit_token : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"app_owner_token",b"app_owner_token",u"application_token",b"application_token",u"credential_token",b"credential_token",u"device_details",b"device_details",u"merchant_token",b"merchant_token",u"platform_account_token",b"platform_account_token",u"unit_token",b"unit_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"app_owner_token",b"app_owner_token",u"application_token",b"application_token",u"credential_token",b"credential_token",u"device_details",b"device_details",u"merchant_token",b"merchant_token",u"platform_account_token",b"platform_account_token",u"unit_token",b"unit_token"]) -> None: ...
type___MultipassSessionTerminate = MultipassSessionTerminate

class MultipassSessionTerminateAll(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    credential_token: typing___Text = ...
    user_token: typing___Text = ...
    device_credential_token: typing___Text = ...

    @property
    def device_details(self) -> squareup___multipass___service___common_pb2___DeviceDetails: ...

    def __init__(self,
        *,
        device_details : typing___Optional[squareup___multipass___service___common_pb2___DeviceDetails] = None,
        credential_token : typing___Optional[typing___Text] = None,
        user_token : typing___Optional[typing___Text] = None,
        device_credential_token : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"credential_token",b"credential_token",u"device_credential_token",b"device_credential_token",u"device_details",b"device_details",u"user_token",b"user_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"credential_token",b"credential_token",u"device_credential_token",b"device_credential_token",u"device_details",b"device_details",u"user_token",b"user_token"]) -> None: ...
type___MultipassSessionTerminateAll = MultipassSessionTerminateAll

class MultipassEmailChange(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    old_email: typing___Text = ...
    new_email: typing___Text = ...
    locale: typing___Text = ...

    def __init__(self,
        *,
        old_email : typing___Optional[typing___Text] = None,
        new_email : typing___Optional[typing___Text] = None,
        locale : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"locale",b"locale",u"new_email",b"new_email",u"old_email",b"old_email"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"locale",b"locale",u"new_email",b"new_email",u"old_email",b"old_email"]) -> None: ...
type___MultipassEmailChange = MultipassEmailChange

class MultipassOnboard(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    credential_token: typing___Text = ...
    email: typing___Text = ...
    phone: typing___Text = ...
    locale: typing___Text = ...
    scope: typing___Text = ...

    def __init__(self,
        *,
        credential_token : typing___Optional[typing___Text] = None,
        email : typing___Optional[typing___Text] = None,
        phone : typing___Optional[typing___Text] = None,
        locale : typing___Optional[typing___Text] = None,
        scope : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"alias",b"alias",u"credential_token",b"credential_token",u"email",b"email",u"locale",b"locale",u"phone",b"phone",u"scope",b"scope"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"alias",b"alias",u"credential_token",b"credential_token",u"email",b"email",u"locale",b"locale",u"phone",b"phone",u"scope",b"scope"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"alias",b"alias"]) -> typing_extensions___Literal["email","phone"]: ...
type___MultipassOnboard = MultipassOnboard

class MultipassDevice(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    DeviceActionValue = typing___NewType('DeviceActionValue', builtin___int)
    type___DeviceActionValue = DeviceActionValue
    DeviceAction: _DeviceAction
    class _DeviceAction(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[MultipassDevice.DeviceActionValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(MultipassDevice.DeviceActionValue, 0)
        CREATE = typing___cast(MultipassDevice.DeviceActionValue, 1)
        DELETE = typing___cast(MultipassDevice.DeviceActionValue, 2)
        RESET = typing___cast(MultipassDevice.DeviceActionValue, 3)
        MAKE_REUSABLE = typing___cast(MultipassDevice.DeviceActionValue, 4)
    UNKNOWN = typing___cast(MultipassDevice.DeviceActionValue, 0)
    CREATE = typing___cast(MultipassDevice.DeviceActionValue, 1)
    DELETE = typing___cast(MultipassDevice.DeviceActionValue, 2)
    RESET = typing___cast(MultipassDevice.DeviceActionValue, 3)
    MAKE_REUSABLE = typing___cast(MultipassDevice.DeviceActionValue, 4)
    type___DeviceAction = DeviceAction

    action: type___MultipassDevice.DeviceActionValue = ...
    device_credential_token: typing___Text = ...

    def __init__(self,
        *,
        action : typing___Optional[type___MultipassDevice.DeviceActionValue] = None,
        device_credential_token : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"action",b"action",u"device_credential_token",b"device_credential_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"action",b"action",u"device_credential_token",b"device_credential_token"]) -> None: ...
type___MultipassDevice = MultipassDevice

class MultipassSelectMerchant(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def device_details(self) -> squareup___multipass___service___common_pb2___DeviceDetails: ...

    def __init__(self,
        *,
        device_details : typing___Optional[squareup___multipass___service___common_pb2___DeviceDetails] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"device_details",b"device_details"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"device_details",b"device_details"]) -> None: ...
type___MultipassSelectMerchant = MultipassSelectMerchant

class MultipassSelectUnit(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def device_details(self) -> squareup___multipass___service___common_pb2___DeviceDetails: ...

    def __init__(self,
        *,
        device_details : typing___Optional[squareup___multipass___service___common_pb2___DeviceDetails] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"device_details",b"device_details"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"device_details",b"device_details"]) -> None: ...
type___MultipassSelectUnit = MultipassSelectUnit

class MultipassClaimAccountGetLink(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    email: typing___Text = ...
    locale: typing___Text = ...
    application_id: typing___Text = ...

    def __init__(self,
        *,
        email : typing___Optional[typing___Text] = None,
        locale : typing___Optional[typing___Text] = None,
        application_id : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"application_id",b"application_id",u"email",b"email",u"locale",b"locale"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"application_id",b"application_id",u"email",b"email",u"locale",b"locale"]) -> None: ...
type___MultipassClaimAccountGetLink = MultipassClaimAccountGetLink

class MultipassClaimAccountSetPassword(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    email: typing___Text = ...
    locale: typing___Text = ...

    def __init__(self,
        *,
        email : typing___Optional[typing___Text] = None,
        locale : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"email",b"email",u"locale",b"locale"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"email",b"email",u"locale",b"locale"]) -> None: ...
type___MultipassClaimAccountSetPassword = MultipassClaimAccountSetPassword

class MultipassHelper(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    person_token: typing___Text = ...
    ip_address: typing___Text = ...
    credential_token: typing___Text = ...
    locale: typing___Text = ...
    email: typing___Text = ...
    phone: typing___Text = ...
    scope: typing___Text = ...

    @property
    def two_factor_details(self) -> squareup___multipass___common_pb2___TwoFactorDetails: ...

    @property
    def device_details(self) -> squareup___multipass___service___common_pb2___DeviceDetails: ...

    @property
    def device(self) -> squareup___multipass___common_pb2___Device: ...

    def __init__(self,
        *,
        person_token : typing___Optional[typing___Text] = None,
        ip_address : typing___Optional[typing___Text] = None,
        two_factor_details : typing___Optional[squareup___multipass___common_pb2___TwoFactorDetails] = None,
        credential_token : typing___Optional[typing___Text] = None,
        device_details : typing___Optional[squareup___multipass___service___common_pb2___DeviceDetails] = None,
        locale : typing___Optional[typing___Text] = None,
        email : typing___Optional[typing___Text] = None,
        phone : typing___Optional[typing___Text] = None,
        device : typing___Optional[squareup___multipass___common_pb2___Device] = None,
        scope : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"credential_token",b"credential_token",u"device",b"device",u"device_details",b"device_details",u"email",b"email",u"ip_address",b"ip_address",u"locale",b"locale",u"person_token",b"person_token",u"phone",b"phone",u"scope",b"scope",u"two_factor_details",b"two_factor_details"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"credential_token",b"credential_token",u"device",b"device",u"device_details",b"device_details",u"email",b"email",u"ip_address",b"ip_address",u"locale",b"locale",u"person_token",b"person_token",u"phone",b"phone",u"scope",b"scope",u"two_factor_details",b"two_factor_details"]) -> None: ...
type___MultipassHelper = MultipassHelper

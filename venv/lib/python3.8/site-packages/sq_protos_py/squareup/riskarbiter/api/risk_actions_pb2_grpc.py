# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.riskarbiter.api import risk_actions_pb2 as squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2


class RiskActionsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRiskActions = channel.unary_unary(
                '/squareup.riskarbiter.api.RiskActionsService/GetRiskActions',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.GetRiskActionsRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.GetRiskActionsResponse.FromString,
                )
        self.InsertRiskActionJob = channel.unary_unary(
                '/squareup.riskarbiter.api.RiskActionsService/InsertRiskActionJob',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.InsertRiskActionJobRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.InsertRiskActionJobResponse.FromString,
                )


class RiskActionsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRiskActions(self, request, context):
        """*
        this endpoint is _only_ for riskarbiter-web! it is not intended to
        support business logic in any application.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertRiskActionJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RiskActionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRiskActions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRiskActions,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.GetRiskActionsRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.GetRiskActionsResponse.SerializeToString,
            ),
            'InsertRiskActionJob': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertRiskActionJob,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.InsertRiskActionJobRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.InsertRiskActionJobResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.riskarbiter.api.RiskActionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RiskActionsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRiskActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.RiskActionsService/GetRiskActions',
            squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.GetRiskActionsRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.GetRiskActionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertRiskActionJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.RiskActionsService/InsertRiskActionJob',
            squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.InsertRiskActionJobRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_risk__actions__pb2.InsertRiskActionJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

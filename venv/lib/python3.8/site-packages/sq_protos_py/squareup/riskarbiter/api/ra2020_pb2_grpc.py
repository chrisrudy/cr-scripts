# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.common import messages_pb2 as squareup_dot_common_dot_messages__pb2
from sq_protos_py.squareup.riskarbiter.api import ra2020_pb2 as squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2


class Riskarbiter2020ServiceStub(object):
    """* a service dedicated to getting us to the state described in the Riskarbiter 2020 Vision.

    This is it's own service so that we can make ACLs more restrictive.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializePartitionDefs = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/InitializePartitionDefs',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.InitializePartitionDefsRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.InitializePartitionDefsResponse.FromString,
                )
        self.InitializeTriggerDefs = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/InitializeTriggerDefs',
                request_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
                response_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                )
        self.Seed = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/Seed',
                request_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
                response_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                )
        self.ListPartitionDefs = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/ListPartitionDefs',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListPartitionDefsReq.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListPartitionDefsResp.FromString,
                )
        self.ListRulesets = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/ListRulesets',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListRulesetsReq.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListRulesetsResp.FromString,
                )
        self.ListTriggerDefs = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/ListTriggerDefs',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListTriggerDefsReq.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListTriggerDefsResp.FromString,
                )
        self.ReplaceFlow = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/ReplaceFlow',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ReplaceFlowRequest.SerializeToString,
                response_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                )
        self.CreateDisqualifier = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/CreateDisqualifier',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.CreateDisqualifierRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.CreateDisqualifierResponse.FromString,
                )
        self.GetApplicableTriggers = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/GetApplicableTriggers',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetApplicableTriggersRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetApplicableTriggersResponse.FromString,
                )
        self.UpdateTrigger = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/UpdateTrigger',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.UpdateTriggerActionRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.UpdateTriggerActionResponse.FromString,
                )
        self.GetRulesetInfo = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/GetRulesetInfo',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetRulesetInfoRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetRulesetInfoResponse.FromString,
                )
        self.ListSignalGeneratorsInfo = channel.unary_unary(
                '/squareup.riskarbiter.api.Riskarbiter2020Service/ListSignalGeneratorsInfo',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListSignalGeneratorsInfoReq.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListSignalGeneratorsInfoResp.FromString,
                )


class Riskarbiter2020ServiceServicer(object):
    """* a service dedicated to getting us to the state described in the Riskarbiter 2020 Vision.

    This is it's own service so that we can make ACLs more restrictive.
    """

    def InitializePartitionDefs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeTriggerDefs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Seed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPartitionDefs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRulesets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTriggerDefs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplaceFlow(self, request, context):
        """* update the flow associated with a certain trigger. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDisqualifier(self, request, context):
        """* temporary endpoint to create a disqualifier. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetApplicableTriggers(self, request, context):
        """* returns a set of related trigger def tokens for a given identifier 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTrigger(self, request, context):
        """* Endpoint to enable or disable a trigger. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRulesetInfo(self, request, context):
        """* returns information about rulesets 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSignalGeneratorsInfo(self, request, context):
        """* returns information about Signal Generators 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Riskarbiter2020ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializePartitionDefs': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializePartitionDefs,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.InitializePartitionDefsRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.InitializePartitionDefsResponse.SerializeToString,
            ),
            'InitializeTriggerDefs': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeTriggerDefs,
                    request_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                    response_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            ),
            'Seed': grpc.unary_unary_rpc_method_handler(
                    servicer.Seed,
                    request_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                    response_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            ),
            'ListPartitionDefs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPartitionDefs,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListPartitionDefsReq.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListPartitionDefsResp.SerializeToString,
            ),
            'ListRulesets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRulesets,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListRulesetsReq.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListRulesetsResp.SerializeToString,
            ),
            'ListTriggerDefs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTriggerDefs,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListTriggerDefsReq.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListTriggerDefsResp.SerializeToString,
            ),
            'ReplaceFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplaceFlow,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ReplaceFlowRequest.FromString,
                    response_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            ),
            'CreateDisqualifier': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDisqualifier,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.CreateDisqualifierRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.CreateDisqualifierResponse.SerializeToString,
            ),
            'GetApplicableTriggers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetApplicableTriggers,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetApplicableTriggersRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetApplicableTriggersResponse.SerializeToString,
            ),
            'UpdateTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTrigger,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.UpdateTriggerActionRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.UpdateTriggerActionResponse.SerializeToString,
            ),
            'GetRulesetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRulesetInfo,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetRulesetInfoRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetRulesetInfoResponse.SerializeToString,
            ),
            'ListSignalGeneratorsInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSignalGeneratorsInfo,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListSignalGeneratorsInfoReq.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListSignalGeneratorsInfoResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.riskarbiter.api.Riskarbiter2020Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Riskarbiter2020Service(object):
    """* a service dedicated to getting us to the state described in the Riskarbiter 2020 Vision.

    This is it's own service so that we can make ACLs more restrictive.
    """

    @staticmethod
    def InitializePartitionDefs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/InitializePartitionDefs',
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.InitializePartitionDefsRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.InitializePartitionDefsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitializeTriggerDefs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/InitializeTriggerDefs',
            squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            squareup_dot_common_dot_messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Seed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/Seed',
            squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            squareup_dot_common_dot_messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPartitionDefs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/ListPartitionDefs',
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListPartitionDefsReq.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListPartitionDefsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRulesets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/ListRulesets',
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListRulesetsReq.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListRulesetsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTriggerDefs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/ListTriggerDefs',
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListTriggerDefsReq.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListTriggerDefsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReplaceFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/ReplaceFlow',
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ReplaceFlowRequest.SerializeToString,
            squareup_dot_common_dot_messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDisqualifier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/CreateDisqualifier',
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.CreateDisqualifierRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.CreateDisqualifierResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetApplicableTriggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/GetApplicableTriggers',
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetApplicableTriggersRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetApplicableTriggersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/UpdateTrigger',
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.UpdateTriggerActionRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.UpdateTriggerActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRulesetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/GetRulesetInfo',
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetRulesetInfoRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.GetRulesetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSignalGeneratorsInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.Riskarbiter2020Service/ListSignalGeneratorsInfo',
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListSignalGeneratorsInfoReq.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_ra2020__pb2.ListSignalGeneratorsInfoResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

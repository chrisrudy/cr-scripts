# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.riskarbiter.api import rule_chain_pb2 as squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2


class EventEvaluationGraphServiceStub(object):
    """TODO(simonsyd): lookup experiments which have been stopped
    TODO(simonsyd): lookup experiment by rule_config_id for disabled rules.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddProposedChangeForExperimentIsProtected = channel.unary_unary(
                '/squareup.riskarbiter.api.EventEvaluationGraphService/AddProposedChangeForExperimentIsProtected',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.AddProposedChangeForExperimentIsProtectedRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.AddProposedChangeForExperimentIsProtectedResponse.FromString,
                )
        self.ChangeGraph = channel.unary_unary(
                '/squareup.riskarbiter.api.EventEvaluationGraphService/ChangeGraph',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ChangeGraphRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ChangeGraphResponse.FromString,
                )
        self.CreateRuleChainExperiment = channel.unary_unary(
                '/squareup.riskarbiter.api.EventEvaluationGraphService/CreateRuleChainExperiment',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.CreateRuleChainExperimentRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.CreateRuleChainExperimentResponse.FromString,
                )
        self.GetExecutionInfo = channel.unary_unary(
                '/squareup.riskarbiter.api.EventEvaluationGraphService/GetExecutionInfo',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetExecutionInfoRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetExecutionInfoResponse.FromString,
                )
        self.GetRuleChainExperimentAuthoringParameters = channel.unary_unary(
                '/squareup.riskarbiter.api.EventEvaluationGraphService/GetRuleChainExperimentAuthoringParameters',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetRuleChainExperimentAuthoringParametersRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetRuleChainExperimentAuthoringParametersResponse.FromString,
                )
        self.ListGraphs = channel.unary_unary(
                '/squareup.riskarbiter.api.EventEvaluationGraphService/ListGraphs',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ListGraphsRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ListGraphsResponse.FromString,
                )
        self.StopRuleChainExperiment = channel.unary_unary(
                '/squareup.riskarbiter.api.EventEvaluationGraphService/StopRuleChainExperiment',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.StopRuleChainExperimentRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.StopRuleChainExperimentResponse.FromString,
                )


class EventEvaluationGraphServiceServicer(object):
    """TODO(simonsyd): lookup experiments which have been stopped
    TODO(simonsyd): lookup experiment by rule_config_id for disabled rules.
    """

    def AddProposedChangeForExperimentIsProtected(self, request, context):
        """*
        Add a proposed change set to change the isprotected status of the rules in a rule chaining experiment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeGraph(self, request, context):
        """*
        Change the graph definition.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRuleChainExperiment(self, request, context):
        """*
        Create a new rule chaining experiment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExecutionInfo(self, request, context):
        """*
        Information about how a rule chain is going to be executed.
        Includes information about all the rules in production as well as information about all the experiments.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRuleChainExperimentAuthoringParameters(self, request, context):
        """*
        Get authoring parameters for creating a rule chain experiment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGraphs(self, request, context):
        """*
        List all the graph definitions in riskarbiter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopRuleChainExperiment(self, request, context):
        """*
        Stop rule chain experiments.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventEvaluationGraphServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddProposedChangeForExperimentIsProtected': grpc.unary_unary_rpc_method_handler(
                    servicer.AddProposedChangeForExperimentIsProtected,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.AddProposedChangeForExperimentIsProtectedRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.AddProposedChangeForExperimentIsProtectedResponse.SerializeToString,
            ),
            'ChangeGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeGraph,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ChangeGraphRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ChangeGraphResponse.SerializeToString,
            ),
            'CreateRuleChainExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRuleChainExperiment,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.CreateRuleChainExperimentRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.CreateRuleChainExperimentResponse.SerializeToString,
            ),
            'GetExecutionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExecutionInfo,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetExecutionInfoRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetExecutionInfoResponse.SerializeToString,
            ),
            'GetRuleChainExperimentAuthoringParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRuleChainExperimentAuthoringParameters,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetRuleChainExperimentAuthoringParametersRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetRuleChainExperimentAuthoringParametersResponse.SerializeToString,
            ),
            'ListGraphs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGraphs,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ListGraphsRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ListGraphsResponse.SerializeToString,
            ),
            'StopRuleChainExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.StopRuleChainExperiment,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.StopRuleChainExperimentRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.StopRuleChainExperimentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.riskarbiter.api.EventEvaluationGraphService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventEvaluationGraphService(object):
    """TODO(simonsyd): lookup experiments which have been stopped
    TODO(simonsyd): lookup experiment by rule_config_id for disabled rules.
    """

    @staticmethod
    def AddProposedChangeForExperimentIsProtected(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.EventEvaluationGraphService/AddProposedChangeForExperimentIsProtected',
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.AddProposedChangeForExperimentIsProtectedRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.AddProposedChangeForExperimentIsProtectedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.EventEvaluationGraphService/ChangeGraph',
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ChangeGraphRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ChangeGraphResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRuleChainExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.EventEvaluationGraphService/CreateRuleChainExperiment',
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.CreateRuleChainExperimentRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.CreateRuleChainExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExecutionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.EventEvaluationGraphService/GetExecutionInfo',
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetExecutionInfoRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetExecutionInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRuleChainExperimentAuthoringParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.EventEvaluationGraphService/GetRuleChainExperimentAuthoringParameters',
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetRuleChainExperimentAuthoringParametersRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.GetRuleChainExperimentAuthoringParametersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGraphs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.EventEvaluationGraphService/ListGraphs',
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ListGraphsRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.ListGraphsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopRuleChainExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.EventEvaluationGraphService/StopRuleChainExperiment',
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.StopRuleChainExperimentRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_rule__chain__pb2.StopRuleChainExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

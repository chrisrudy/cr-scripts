# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.riskarbiter.api import hyperdynamic_pb2 as squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2


class HyperdynamicRuleServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateHyperDynamicRule = channel.unary_unary(
                '/squareup.riskarbiter.api.HyperdynamicRuleService/CreateHyperDynamicRule',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.CreateHyperDynamicRuleRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.CreateHyperDynamicRuleResponse.FromString,
                )
        self.ListConcerns = channel.unary_unary(
                '/squareup.riskarbiter.api.HyperdynamicRuleService/ListConcerns',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListConcernsRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListConcernsResponse.FromString,
                )
        self.ListRules = channel.unary_unary(
                '/squareup.riskarbiter.api.HyperdynamicRuleService/ListRules',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListRulesRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListRulesResponse.FromString,
                )
        self.ListNodes = channel.unary_unary(
                '/squareup.riskarbiter.api.HyperdynamicRuleService/ListNodes',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListNodesRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListNodesResponse.FromString,
                )
        self.ListSignals = channel.unary_unary(
                '/squareup.riskarbiter.api.HyperdynamicRuleService/ListSignals',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListSignalsRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListSignalsResponse.FromString,
                )
        self.GetAuthoringParameters = channel.unary_unary(
                '/squareup.riskarbiter.api.HyperdynamicRuleService/GetAuthoringParameters',
                request_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.GetAuthoringParametersRequest.SerializeToString,
                response_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.GetAuthoringParametersResponse.FromString,
                )


class HyperdynamicRuleServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateHyperDynamicRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConcerns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSignals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuthoringParameters(self, request, context):
        """* returns the parameters we need to know about to author new rules. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HyperdynamicRuleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateHyperDynamicRule': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateHyperDynamicRule,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.CreateHyperDynamicRuleRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.CreateHyperDynamicRuleResponse.SerializeToString,
            ),
            'ListConcerns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConcerns,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListConcernsRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListConcernsResponse.SerializeToString,
            ),
            'ListRules': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRules,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListRulesRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListRulesResponse.SerializeToString,
            ),
            'ListNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNodes,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListNodesRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListNodesResponse.SerializeToString,
            ),
            'ListSignals': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSignals,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListSignalsRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListSignalsResponse.SerializeToString,
            ),
            'GetAuthoringParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuthoringParameters,
                    request_deserializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.GetAuthoringParametersRequest.FromString,
                    response_serializer=squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.GetAuthoringParametersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.riskarbiter.api.HyperdynamicRuleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HyperdynamicRuleService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateHyperDynamicRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.HyperdynamicRuleService/CreateHyperDynamicRule',
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.CreateHyperDynamicRuleRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.CreateHyperDynamicRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListConcerns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.HyperdynamicRuleService/ListConcerns',
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListConcernsRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListConcernsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.HyperdynamicRuleService/ListRules',
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListRulesRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListRulesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.HyperdynamicRuleService/ListNodes',
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListNodesRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListNodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.HyperdynamicRuleService/ListSignals',
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListSignalsRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.ListSignalsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAuthoringParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.riskarbiter.api.HyperdynamicRuleService/GetAuthoringParameters',
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.GetAuthoringParametersRequest.SerializeToString,
            squareup_dot_riskarbiter_dot_api_dot_hyperdynamic__pb2.GetAuthoringParametersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

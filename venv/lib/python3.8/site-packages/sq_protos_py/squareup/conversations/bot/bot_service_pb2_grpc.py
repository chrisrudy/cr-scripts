# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.conversations.bot import bot_service_pb2 as squareup_dot_conversations_dot_bot_dot_bot__service__pb2


class BotServiceStub(object):
    """*
    This service is the public API for the conversations collection of services
    in AWS.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TransformAndRecordOutbound = channel.unary_unary(
                '/squareup.conversations.bot.BotService/TransformAndRecordOutbound',
                request_serializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.TransformAndRecordOutboundRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.TransformAndRecordOutboundResponse.FromString,
                )
        self.ReplyInbound = channel.unary_unary(
                '/squareup.conversations.bot.BotService/ReplyInbound',
                request_serializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.ReplyInboundRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.ReplyInboundResponse.FromString,
                )
        self.FindTranscript = channel.unary_unary(
                '/squareup.conversations.bot.BotService/FindTranscript',
                request_serializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.FindTranscriptRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.FindTranscriptResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/squareup.conversations.bot.BotService/Ping',
                request_serializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.PingRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.PingResponse.FromString,
                )


class BotServiceServicer(object):
    """*
    This service is the public API for the conversations collection of services
    in AWS.
    """

    def TransformAndRecordOutbound(self, request, context):
        """*
        Inform the bot that the caller is attempting to send a message to a
        customer on behalf of a Square merchant, and give the Bot an opportunity
        to rewrite the message, as well as placing it into the transcript for a
        particular conversation. This Rpc also allows the injection of
        conversation-related metadata (e.g. appointment ID).

        Today, the outbound message will almost certainly be sent from a Square
        service on behalf of a Square merchant, but future outbound messages could
        be sent from merchants directly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplyInbound(self, request, context):
        """*
        Inform the bot of an inbound message from a customer and get a response
        from the bot for said message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindTranscript(self, request, context):
        """*
        Obtain a page of transcripts based on a set of filters specified in the
        request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """*
        Determine whether the service is up and reachable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TransformAndRecordOutbound': grpc.unary_unary_rpc_method_handler(
                    servicer.TransformAndRecordOutbound,
                    request_deserializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.TransformAndRecordOutboundRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.TransformAndRecordOutboundResponse.SerializeToString,
            ),
            'ReplyInbound': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplyInbound,
                    request_deserializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.ReplyInboundRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.ReplyInboundResponse.SerializeToString,
            ),
            'FindTranscript': grpc.unary_unary_rpc_method_handler(
                    servicer.FindTranscript,
                    request_deserializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.FindTranscriptRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.FindTranscriptResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.PingRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_bot_dot_bot__service__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.conversations.bot.BotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BotService(object):
    """*
    This service is the public API for the conversations collection of services
    in AWS.
    """

    @staticmethod
    def TransformAndRecordOutbound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.bot.BotService/TransformAndRecordOutbound',
            squareup_dot_conversations_dot_bot_dot_bot__service__pb2.TransformAndRecordOutboundRequest.SerializeToString,
            squareup_dot_conversations_dot_bot_dot_bot__service__pb2.TransformAndRecordOutboundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReplyInbound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.bot.BotService/ReplyInbound',
            squareup_dot_conversations_dot_bot_dot_bot__service__pb2.ReplyInboundRequest.SerializeToString,
            squareup_dot_conversations_dot_bot_dot_bot__service__pb2.ReplyInboundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindTranscript(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.bot.BotService/FindTranscript',
            squareup_dot_conversations_dot_bot_dot_bot__service__pb2.FindTranscriptRequest.SerializeToString,
            squareup_dot_conversations_dot_bot_dot_bot__service__pb2.FindTranscriptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.bot.BotService/Ping',
            squareup_dot_conversations_dot_bot_dot_bot__service__pb2.PingRequest.SerializeToString,
            squareup_dot_conversations_dot_bot_dot_bot__service__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

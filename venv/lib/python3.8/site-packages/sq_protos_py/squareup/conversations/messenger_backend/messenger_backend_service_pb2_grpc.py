# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.conversations.messenger_backend import messenger_backend_service_pb2 as squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2


class MessengerBackendServiceStub(object):
    """*
    This service is the API for the Conversations Backend Messenger service which
    lives in AWS. It is not a public API, and exists only for use by the
    Conversations Messenger service in the datacenter. Those looking to call into
    Messenger should look at messenger_service.proto in the conversations
    directory of the Java monorepo.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTranscripts = channel.unary_unary(
                '/squareup.conversations.messenger.MessengerBackendService/GetTranscripts',
                request_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTranscriptsRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTranscriptsResponse.FromString,
                )
        self.GetUtterances = channel.unary_unary(
                '/squareup.conversations.messenger.MessengerBackendService/GetUtterances',
                request_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUtterancesRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUtterancesResponse.FromString,
                )
        self.UpdateTranscript = channel.unary_unary(
                '/squareup.conversations.messenger.MessengerBackendService/UpdateTranscript',
                request_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateTranscriptRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateTranscriptResponse.FromString,
                )
        self.UpdateUtterance = channel.unary_unary(
                '/squareup.conversations.messenger.MessengerBackendService/UpdateUtterance',
                request_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateUtteranceRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateUtteranceResponse.FromString,
                )
        self.GetTokens = channel.unary_unary(
                '/squareup.conversations.messenger.MessengerBackendService/GetTokens',
                request_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTokensRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTokensResponse.FromString,
                )
        self.PendingSend = channel.unary_unary(
                '/squareup.conversations.messenger.MessengerBackendService/PendingSend',
                request_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.PendingSendRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.PendingSendResponse.FromString,
                )
        self.RecordInbound = channel.unary_unary(
                '/squareup.conversations.messenger.MessengerBackendService/RecordInbound',
                request_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.RecordInboundRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.RecordInboundResponse.FromString,
                )
        self.GetUnreadTranscriptsCount = channel.unary_unary(
                '/squareup.conversations.messenger.MessengerBackendService/GetUnreadTranscriptsCount',
                request_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUnreadTranscriptsCountRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUnreadTranscriptsCountResponse.FromString,
                )


class MessengerBackendServiceServicer(object):
    """*
    This service is the API for the Conversations Backend Messenger service which
    lives in AWS. It is not a public API, and exists only for use by the
    Conversations Messenger service in the datacenter. Those looking to call into
    Messenger should look at messenger_service.proto in the conversations
    directory of the Java monorepo.
    """

    def GetTranscripts(self, request, context):
        """Get the transcripts matching a set of filters. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUtterances(self, request, context):
        """Get the utterances associated with a transcript. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTranscript(self, request, context):
        """Update transcript fields and metadata. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUtterance(self, request, context):
        """Update utterance fields and metadata. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTokens(self, request, context):
        """Returns the unit/customer tokens associated with a transcript id 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PendingSend(self, request, context):
        """
        Appends a new outbound message to the transcript and marks it PENDING.
        Callers must check the Utterance for the text they should send, since
        MessengerBackendService can change it.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordInbound(self, request, context):
        """*
        Inform the messenger backend of an inbound message from a customer.
        Depending on the message itself, the merchant's global settings, and the
        per-transcript settings, the server may respond with an auto-reply.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUnreadTranscriptsCount(self, request, context):
        """*
        Get the number of transcripts that contain at least one unread message.
        This endpoint will eventually be replaced by a function that returns unread
        transcripts so that the Messenger API can compute unread conversations.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessengerBackendServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTranscripts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTranscripts,
                    request_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTranscriptsRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTranscriptsResponse.SerializeToString,
            ),
            'GetUtterances': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUtterances,
                    request_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUtterancesRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUtterancesResponse.SerializeToString,
            ),
            'UpdateTranscript': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTranscript,
                    request_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateTranscriptRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateTranscriptResponse.SerializeToString,
            ),
            'UpdateUtterance': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUtterance,
                    request_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateUtteranceRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateUtteranceResponse.SerializeToString,
            ),
            'GetTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTokens,
                    request_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTokensRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTokensResponse.SerializeToString,
            ),
            'PendingSend': grpc.unary_unary_rpc_method_handler(
                    servicer.PendingSend,
                    request_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.PendingSendRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.PendingSendResponse.SerializeToString,
            ),
            'RecordInbound': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordInbound,
                    request_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.RecordInboundRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.RecordInboundResponse.SerializeToString,
            ),
            'GetUnreadTranscriptsCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUnreadTranscriptsCount,
                    request_deserializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUnreadTranscriptsCountRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUnreadTranscriptsCountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.conversations.messenger.MessengerBackendService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessengerBackendService(object):
    """*
    This service is the API for the Conversations Backend Messenger service which
    lives in AWS. It is not a public API, and exists only for use by the
    Conversations Messenger service in the datacenter. Those looking to call into
    Messenger should look at messenger_service.proto in the conversations
    directory of the Java monorepo.
    """

    @staticmethod
    def GetTranscripts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.messenger.MessengerBackendService/GetTranscripts',
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTranscriptsRequest.SerializeToString,
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTranscriptsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUtterances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.messenger.MessengerBackendService/GetUtterances',
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUtterancesRequest.SerializeToString,
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUtterancesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTranscript(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.messenger.MessengerBackendService/UpdateTranscript',
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateTranscriptRequest.SerializeToString,
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateTranscriptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUtterance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.messenger.MessengerBackendService/UpdateUtterance',
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateUtteranceRequest.SerializeToString,
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.UpdateUtteranceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.messenger.MessengerBackendService/GetTokens',
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTokensRequest.SerializeToString,
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PendingSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.messenger.MessengerBackendService/PendingSend',
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.PendingSendRequest.SerializeToString,
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.PendingSendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordInbound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.messenger.MessengerBackendService/RecordInbound',
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.RecordInboundRequest.SerializeToString,
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.RecordInboundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUnreadTranscriptsCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.messenger.MessengerBackendService/GetUnreadTranscriptsCount',
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUnreadTranscriptsCountRequest.SerializeToString,
            squareup_dot_conversations_dot_messenger__backend_dot_messenger__backend__service__pb2.GetUnreadTranscriptsCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

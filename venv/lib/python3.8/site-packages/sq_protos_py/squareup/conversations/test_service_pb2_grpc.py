# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.appointments.api import service_pb2 as squareup_dot_appointments_dot_api_dot_service__pb2
from sq_protos_py.squareup.conversations import test_service_pb2 as squareup_dot_conversations_dot_test__service__pb2
from sq_protos_py.squareup.deviceregistry import service_pb2 as squareup_dot_deviceregistry_dot_service__pb2
from sq_protos_py.squareup.multipass.service import service_pb2 as squareup_dot_multipass_dot_service_dot_service__pb2
from sq_protos_py.squareup.pushv2 import service_pb2 as squareup_dot_pushv2_dot_service__pb2


class TestServiceStub(object):
    """*
    A collection of Rpcs that function as thin wrappers over invocations to
    other services to verify that we can talk to them. These are intended to
    make it easy to identify which integrations are failing if our service is
    unable to communicate with services in production.
    These should not be invoked by consuming services.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TestBotPerformance = channel.unary_unary(
                '/squareup.conversations.TestService/TestBotPerformance',
                request_serializer=squareup_dot_conversations_dot_test__service__pb2.TestBotPerformanceRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestBotPerformanceResponse.FromString,
                )
        self.TestPingAws = channel.unary_unary(
                '/squareup.conversations.TestService/TestPingAws',
                request_serializer=squareup_dot_conversations_dot_test__service__pb2.TestPingAwsRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestPingAwsResponse.FromString,
                )
        self.TestSendSms = channel.unary_unary(
                '/squareup.conversations.TestService/TestSendSms',
                request_serializer=squareup_dot_conversations_dot_test__service__pb2.TestSendSmsRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestSendSmsResponse.FromString,
                )
        self.TestTokenize = channel.unary_unary(
                '/squareup.conversations.TestService/TestTokenize',
                request_serializer=squareup_dot_conversations_dot_test__service__pb2.TestTokenizeRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestTokenizeResponse.FromString,
                )
        self.TestSmsThreader = channel.unary_unary(
                '/squareup.conversations.TestService/TestSmsThreader',
                request_serializer=squareup_dot_conversations_dot_test__service__pb2.TestSmsThreaderRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestSmsThreaderResponse.FromString,
                )
        self.TestGeneric = channel.unary_unary(
                '/squareup.conversations.TestService/TestGeneric',
                request_serializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.FromString,
                )
        self.TestAppointmentsListReservationsForContact = channel.unary_unary(
                '/squareup.conversations.TestService/TestAppointmentsListReservationsForContact',
                request_serializer=squareup_dot_appointments_dot_api_dot_service__pb2.ListReservationsForContactInternalRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.FromString,
                )
        self.TestValidateSession = channel.unary_unary(
                '/squareup.conversations.TestService/TestValidateSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.FromString,
                )
        self.TestFindDevicesForPushNotifications = channel.unary_unary(
                '/squareup.conversations.TestService/TestFindDevicesForPushNotifications',
                request_serializer=squareup_dot_deviceregistry_dot_service__pb2.FindDevicesForPushNotificationsRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.FromString,
                )
        self.TestNotifyDevice = channel.unary_unary(
                '/squareup.conversations.TestService/TestNotifyDevice',
                request_serializer=squareup_dot_pushv2_dot_service__pb2.NotifyDeviceRequest.SerializeToString,
                response_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.FromString,
                )


class TestServiceServicer(object):
    """*
    A collection of Rpcs that function as thin wrappers over invocations to
    other services to verify that we can talk to them. These are intended to
    make it easy to identify which integrations are failing if our service is
    unable to communicate with services in production.
    These should not be invoked by consuming services.
    """

    def TestBotPerformance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestPingAws(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestSendSms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestTokenize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestSmsThreader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestGeneric(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestAppointmentsListReservationsForContact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestValidateSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestFindDevicesForPushNotifications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestNotifyDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TestBotPerformance': grpc.unary_unary_rpc_method_handler(
                    servicer.TestBotPerformance,
                    request_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestBotPerformanceRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_test__service__pb2.TestBotPerformanceResponse.SerializeToString,
            ),
            'TestPingAws': grpc.unary_unary_rpc_method_handler(
                    servicer.TestPingAws,
                    request_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestPingAwsRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_test__service__pb2.TestPingAwsResponse.SerializeToString,
            ),
            'TestSendSms': grpc.unary_unary_rpc_method_handler(
                    servicer.TestSendSms,
                    request_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestSendSmsRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_test__service__pb2.TestSendSmsResponse.SerializeToString,
            ),
            'TestTokenize': grpc.unary_unary_rpc_method_handler(
                    servicer.TestTokenize,
                    request_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestTokenizeRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_test__service__pb2.TestTokenizeResponse.SerializeToString,
            ),
            'TestSmsThreader': grpc.unary_unary_rpc_method_handler(
                    servicer.TestSmsThreader,
                    request_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestSmsThreaderRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_test__service__pb2.TestSmsThreaderResponse.SerializeToString,
            ),
            'TestGeneric': grpc.unary_unary_rpc_method_handler(
                    servicer.TestGeneric,
                    request_deserializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.SerializeToString,
            ),
            'TestAppointmentsListReservationsForContact': grpc.unary_unary_rpc_method_handler(
                    servicer.TestAppointmentsListReservationsForContact,
                    request_deserializer=squareup_dot_appointments_dot_api_dot_service__pb2.ListReservationsForContactInternalRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.SerializeToString,
            ),
            'TestValidateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.TestValidateSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.SerializeToString,
            ),
            'TestFindDevicesForPushNotifications': grpc.unary_unary_rpc_method_handler(
                    servicer.TestFindDevicesForPushNotifications,
                    request_deserializer=squareup_dot_deviceregistry_dot_service__pb2.FindDevicesForPushNotificationsRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.SerializeToString,
            ),
            'TestNotifyDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.TestNotifyDevice,
                    request_deserializer=squareup_dot_pushv2_dot_service__pb2.NotifyDeviceRequest.FromString,
                    response_serializer=squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.conversations.TestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TestService(object):
    """*
    A collection of Rpcs that function as thin wrappers over invocations to
    other services to verify that we can talk to them. These are intended to
    make it easy to identify which integrations are failing if our service is
    unable to communicate with services in production.
    These should not be invoked by consuming services.
    """

    @staticmethod
    def TestBotPerformance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.TestService/TestBotPerformance',
            squareup_dot_conversations_dot_test__service__pb2.TestBotPerformanceRequest.SerializeToString,
            squareup_dot_conversations_dot_test__service__pb2.TestBotPerformanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestPingAws(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.TestService/TestPingAws',
            squareup_dot_conversations_dot_test__service__pb2.TestPingAwsRequest.SerializeToString,
            squareup_dot_conversations_dot_test__service__pb2.TestPingAwsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestSendSms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.TestService/TestSendSms',
            squareup_dot_conversations_dot_test__service__pb2.TestSendSmsRequest.SerializeToString,
            squareup_dot_conversations_dot_test__service__pb2.TestSendSmsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestTokenize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.TestService/TestTokenize',
            squareup_dot_conversations_dot_test__service__pb2.TestTokenizeRequest.SerializeToString,
            squareup_dot_conversations_dot_test__service__pb2.TestTokenizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestSmsThreader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.TestService/TestSmsThreader',
            squareup_dot_conversations_dot_test__service__pb2.TestSmsThreaderRequest.SerializeToString,
            squareup_dot_conversations_dot_test__service__pb2.TestSmsThreaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestGeneric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.TestService/TestGeneric',
            squareup_dot_conversations_dot_test__service__pb2.TestGenericRequest.SerializeToString,
            squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestAppointmentsListReservationsForContact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.TestService/TestAppointmentsListReservationsForContact',
            squareup_dot_appointments_dot_api_dot_service__pb2.ListReservationsForContactInternalRequest.SerializeToString,
            squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestValidateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.TestService/TestValidateSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionRequest.SerializeToString,
            squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestFindDevicesForPushNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.TestService/TestFindDevicesForPushNotifications',
            squareup_dot_deviceregistry_dot_service__pb2.FindDevicesForPushNotificationsRequest.SerializeToString,
            squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestNotifyDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.conversations.TestService/TestNotifyDevice',
            squareup_dot_pushv2_dot_service__pb2.NotifyDeviceRequest.SerializeToString,
            squareup_dot_conversations_dot_test__service__pb2.TestGenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

TagValue = typing___NewType('TagValue', builtin___int)
type___TagValue = TagValue
Tag: _Tag
class _Tag(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[TagValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    T_DO_NOT_USE = typing___cast(TagValue, 0)
    ALL_OBSERVED = typing___cast(TagValue, 1)
    SUSPECTED = typing___cast(TagValue, 2)
    CASE_DECISION_BAD = typing___cast(TagValue, 3)
    EVENTUALLY_FROZEN = typing___cast(TagValue, 4)
T_DO_NOT_USE = typing___cast(TagValue, 0)
ALL_OBSERVED = typing___cast(TagValue, 1)
SUSPECTED = typing___cast(TagValue, 2)
CASE_DECISION_BAD = typing___cast(TagValue, 3)
EVENTUALLY_FROZEN = typing___cast(TagValue, 4)
type___Tag = Tag

class EventSpaceDefinition(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    total: type___TagValue = ...
    counted: type___TagValue = ...

    def __init__(self,
        *,
        total : typing___Optional[type___TagValue] = None,
        counted : typing___Optional[type___TagValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"counted",b"counted",u"total",b"total"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"counted",b"counted",u"total",b"total"]) -> None: ...
type___EventSpaceDefinition = EventSpaceDefinition

class PropertyCountRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    message_type_id: builtin___int = ...
    message_bytes: builtin___bytes = ...
    token: typing___Text = ...

    @property
    def event_space_definition(self) -> type___EventSpaceDefinition: ...

    def __init__(self,
        *,
        message_type_id : typing___Optional[builtin___int] = None,
        message_bytes : typing___Optional[builtin___bytes] = None,
        token : typing___Optional[typing___Text] = None,
        event_space_definition : typing___Optional[type___EventSpaceDefinition] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"event_space_definition",b"event_space_definition",u"key",b"key",u"message_bytes",b"message_bytes",u"message_type_id",b"message_type_id",u"token",b"token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"event_space_definition",b"event_space_definition",u"key",b"key",u"message_bytes",b"message_bytes",u"message_type_id",b"message_type_id",u"token",b"token"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"key",b"key"]) -> typing_extensions___Literal["message_bytes","token"]: ...
type___PropertyCountRequest = PropertyCountRequest

class FriendlyProperty(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    field_name_path: typing___Text = ...
    field_value: typing___Text = ...
    ingested: builtin___bool = ...

    def __init__(self,
        *,
        field_name_path : typing___Optional[typing___Text] = None,
        field_value : typing___Optional[typing___Text] = None,
        ingested : typing___Optional[builtin___bool] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"field_name_path",b"field_name_path",u"field_value",b"field_value",u"ingested",b"ingested"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"field_name_path",b"field_name_path",u"field_value",b"field_value",u"ingested",b"ingested"]) -> None: ...
type___FriendlyProperty = FriendlyProperty

class TallyCount(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    tag: type___TagValue = ...
    count: builtin___int = ...

    @property
    def property(self) -> type___FriendlyProperty: ...

    def __init__(self,
        *,
        tag : typing___Optional[type___TagValue] = None,
        property : typing___Optional[type___FriendlyProperty] = None,
        count : typing___Optional[builtin___int] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"count",b"count",u"property",b"property",u"tag",b"tag"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"count",b"count",u"property",b"property",u"tag",b"tag"]) -> None: ...
type___TallyCount = TallyCount

class TagCount(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    tag: type___TagValue = ...
    count: builtin___int = ...

    def __init__(self,
        *,
        tag : typing___Optional[type___TagValue] = None,
        count : typing___Optional[builtin___int] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"count",b"count",u"tag",b"tag"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"count",b"count",u"tag",b"tag"]) -> None: ...
type___TagCount = TagCount

class PropertyCountResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def tally_count(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___TallyCount]: ...

    def __init__(self,
        *,
        tally_count : typing___Optional[typing___Iterable[type___TallyCount]] = None,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"tally_count",b"tally_count"]) -> None: ...
type___PropertyCountResponse = PropertyCountResponse

class PropertyProbability(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    probability: builtin___float = ...

    @property
    def property(self) -> type___FriendlyProperty: ...

    @property
    def tag_count(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___TagCount]: ...

    def __init__(self,
        *,
        property : typing___Optional[type___FriendlyProperty] = None,
        probability : typing___Optional[builtin___float] = None,
        tag_count : typing___Optional[typing___Iterable[type___TagCount]] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"probability",b"probability",u"property",b"property"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"probability",b"probability",u"property",b"property",u"tag_count",b"tag_count"]) -> None: ...
type___PropertyProbability = PropertyProbability

class CalculateProbabilityRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    message_type_id: builtin___int = ...
    message_bytes: builtin___bytes = ...
    token: typing___Text = ...

    @property
    def event_space_definition(self) -> type___EventSpaceDefinition: ...

    def __init__(self,
        *,
        message_type_id : typing___Optional[builtin___int] = None,
        message_bytes : typing___Optional[builtin___bytes] = None,
        token : typing___Optional[typing___Text] = None,
        event_space_definition : typing___Optional[type___EventSpaceDefinition] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"event_space_definition",b"event_space_definition",u"key",b"key",u"message_bytes",b"message_bytes",u"message_type_id",b"message_type_id",u"token",b"token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"event_space_definition",b"event_space_definition",u"key",b"key",u"message_bytes",b"message_bytes",u"message_type_id",b"message_type_id",u"token",b"token"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"key",b"key"]) -> typing_extensions___Literal["message_bytes","token"]: ...
type___CalculateProbabilityRequest = CalculateProbabilityRequest

class CalculateProbabilityResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    score: builtin___float = ...

    @property
    def probability(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___PropertyProbability]: ...

    @property
    def excluded(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___FriendlyProperty]: ...

    def __init__(self,
        *,
        score : typing___Optional[builtin___float] = None,
        probability : typing___Optional[typing___Iterable[type___PropertyProbability]] = None,
        excluded : typing___Optional[typing___Iterable[type___FriendlyProperty]] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"score",b"score"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"excluded",b"excluded",u"probability",b"probability",u"score",b"score"]) -> None: ...
type___CalculateProbabilityResponse = CalculateProbabilityResponse

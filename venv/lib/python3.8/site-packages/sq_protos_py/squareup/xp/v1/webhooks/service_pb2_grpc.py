# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.xp.webhooks import service_pb2 as squareup_dot_xp_dot_webhooks_dot_service__pb2


class XpWebhooksServiceStub(object):
    """Exposes the webhooks service via a REST compatible API
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListEventTypes = channel.unary_unary(
                '/squareup.xp.v1.webhooks.XpWebhooksService/ListEventTypes',
                request_serializer=squareup_dot_xp_dot_webhooks_dot_service__pb2.ListEventTypesForMerchantAndClientRequest.SerializeToString,
                response_deserializer=squareup_dot_xp_dot_webhooks_dot_service__pb2.ListEventTypesForMerchantAndClientResponse.FromString,
                )
        self.SetEventTypes = channel.unary_unary(
                '/squareup.xp.v1.webhooks.XpWebhooksService/SetEventTypes',
                request_serializer=squareup_dot_xp_dot_webhooks_dot_service__pb2.SetEventTypesForMerchantAndClientRequest.SerializeToString,
                response_deserializer=squareup_dot_xp_dot_webhooks_dot_service__pb2.SetEventTypesForMerchantAndClientResponse.FromString,
                )


class XpWebhooksServiceServicer(object):
    """Exposes the webhooks service via a REST compatible API
    """

    def ListEventTypes(self, request, context):
        """List all event types a merchant is subscribed to for a given client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEventTypes(self, request, context):
        """Set all event types a merchant is subscribed to for a given client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_XpWebhooksServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListEventTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEventTypes,
                    request_deserializer=squareup_dot_xp_dot_webhooks_dot_service__pb2.ListEventTypesForMerchantAndClientRequest.FromString,
                    response_serializer=squareup_dot_xp_dot_webhooks_dot_service__pb2.ListEventTypesForMerchantAndClientResponse.SerializeToString,
            ),
            'SetEventTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEventTypes,
                    request_deserializer=squareup_dot_xp_dot_webhooks_dot_service__pb2.SetEventTypesForMerchantAndClientRequest.FromString,
                    response_serializer=squareup_dot_xp_dot_webhooks_dot_service__pb2.SetEventTypesForMerchantAndClientResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.xp.v1.webhooks.XpWebhooksService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class XpWebhooksService(object):
    """Exposes the webhooks service via a REST compatible API
    """

    @staticmethod
    def ListEventTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.xp.v1.webhooks.XpWebhooksService/ListEventTypes',
            squareup_dot_xp_dot_webhooks_dot_service__pb2.ListEventTypesForMerchantAndClientRequest.SerializeToString,
            squareup_dot_xp_dot_webhooks_dot_service__pb2.ListEventTypesForMerchantAndClientResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEventTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.xp.v1.webhooks.XpWebhooksService/SetEventTypes',
            squareup_dot_xp_dot_webhooks_dot_service__pb2.SetEventTypesForMerchantAndClientRequest.SerializeToString,
            squareup_dot_xp_dot_webhooks_dot_service__pb2.SetEventTypesForMerchantAndClientResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.common.currency_pb2 import (
    Money as squareup___common___currency_pb2___Money,
)

from typing import (
    Iterable as typing___Iterable,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class LedgerEntry(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    ReasonValue = typing___NewType('ReasonValue', builtin___int)
    type___ReasonValue = ReasonValue
    Reason: _Reason
    class _Reason(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[LedgerEntry.ReasonValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        CHARGE = typing___cast(LedgerEntry.ReasonValue, 1)
        BALANCE_CHARGE = typing___cast(LedgerEntry.ReasonValue, 2)
        HOLD_ADJUSTMENT = typing___cast(LedgerEntry.ReasonValue, 3)
        REFUND = typing___cast(LedgerEntry.ReasonValue, 4)
        ADJUSTMENT = typing___cast(LedgerEntry.ReasonValue, 5)
        REDEMPTION_CODE = typing___cast(LedgerEntry.ReasonValue, 6)
        INCENTED_PAYMENT = typing___cast(LedgerEntry.ReasonValue, 7)
        PAYOUT = typing___cast(LedgerEntry.ReasonValue, 8)
        RETURNED_PAYOUT = typing___cast(LedgerEntry.ReasonValue, 9)
        RETURNED_ACH_ENTRY = typing___cast(LedgerEntry.ReasonValue, 10)
        SQUARE_275 = typing___cast(LedgerEntry.ReasonValue, 11)
        RETURNED_SQUARE_275 = typing___cast(LedgerEntry.ReasonValue, 12)
        SQUARE_CAPITAL_ADVANCE = typing___cast(LedgerEntry.ReasonValue, 13)
        SQUARE_CAPITAL_PAYMENT = typing___cast(LedgerEntry.ReasonValue, 14)
        SQUARE_CAPITAL_REVERSED_PAYMENT = typing___cast(LedgerEntry.ReasonValue, 15)
        FREE_PROCESSING = typing___cast(LedgerEntry.ReasonValue, 16)
        SUBSCRIPTION_FEE = typing___cast(LedgerEntry.ReasonValue, 17)
        SUBSCRIPTION_FEE_REFUND = typing___cast(LedgerEntry.ReasonValue, 18)
        PAID_SERVICE_FEE = typing___cast(LedgerEntry.ReasonValue, 19)
        PAID_SERVICE_FEE_REFUND = typing___cast(LedgerEntry.ReasonValue, 20)
        SQUARE_CARD = typing___cast(LedgerEntry.ReasonValue, 21)
        DISPUTE_ADJUSTMENT = typing___cast(LedgerEntry.ReasonValue, 22)
        MONEY_TRANSFER = typing___cast(LedgerEntry.ReasonValue, 23)
        MONEY_TRANSFER_REVERSAL = typing___cast(LedgerEntry.ReasonValue, 24)
        THIRD_PARTY_FEE = typing___cast(LedgerEntry.ReasonValue, 25)
        THIRD_PARTY_FEE_REFUND = typing___cast(LedgerEntry.ReasonValue, 26)
        FEE = typing___cast(LedgerEntry.ReasonValue, 27)
        TAX_ON_FEE = typing___cast(LedgerEntry.ReasonValue, 28)
        APP_FEE_REFUND = typing___cast(LedgerEntry.ReasonValue, 29)
        APP_FEE_REVENUE = typing___cast(LedgerEntry.ReasonValue, 30)
        OTHER_ADJUSTMENT = typing___cast(LedgerEntry.ReasonValue, 31)
        ESCHEATMENT = typing___cast(LedgerEntry.ReasonValue, 32)
        INITIAL_BALANCE_CHANGE = typing___cast(LedgerEntry.ReasonValue, 33)
        OPEN_DISPUTE = typing___cast(LedgerEntry.ReasonValue, 34)
        RESOLVED_DISPUTE = typing___cast(LedgerEntry.ReasonValue, 35)
        SUBSCRIPTION_FEE_PAID_REFUND = typing___cast(LedgerEntry.ReasonValue, 36)
        SQUARE_CAPITAL_FIXED_DEPOSIT = typing___cast(LedgerEntry.ReasonValue, 37)
        SQUARE_CAPITAL_FIXED_PAYMENT = typing___cast(LedgerEntry.ReasonValue, 38)
        SQUARE_CAPITAL_PROMOTION_BONUS = typing___cast(LedgerEntry.ReasonValue, 39)
        PAYMENT = typing___cast(LedgerEntry.ReasonValue, 40)
        REDEMPTION = typing___cast(LedgerEntry.ReasonValue, 41)
        HOLD = typing___cast(LedgerEntry.ReasonValue, 42)
        RELEASE = typing___cast(LedgerEntry.ReasonValue, 43)
        CANCELED_HOLD = typing___cast(LedgerEntry.ReasonValue, 44)
        CANCELED_RELEASE = typing___cast(LedgerEntry.ReasonValue, 45)
        SQUARE_CAPITAL_REVERSE_PAYMENT = typing___cast(LedgerEntry.ReasonValue, 46)
        SQUARE_CAPITAL_DEPOSIT = typing___cast(LedgerEntry.ReasonValue, 47)
        SQUARE_275_FEE = typing___cast(LedgerEntry.ReasonValue, 48)
        RETURNED_SQUARE_275_FEE = typing___cast(LedgerEntry.ReasonValue, 49)
        CANCELED = typing___cast(LedgerEntry.ReasonValue, 50)
        GST_ON_FEES = typing___cast(LedgerEntry.ReasonValue, 51)
        GST_ON_FEES_REFUND = typing___cast(LedgerEntry.ReasonValue, 52)
        CANCELED_FEE = typing___cast(LedgerEntry.ReasonValue, 53)
        PAID_SERVICES = typing___cast(LedgerEntry.ReasonValue, 54)
        PAID_SERVICES_REFUND = typing___cast(LedgerEntry.ReasonValue, 55)
        INSTANT_DEPOSIT_FEE = typing___cast(LedgerEntry.ReasonValue, 56)
        OTHER = typing___cast(LedgerEntry.ReasonValue, 100)
    CHARGE = typing___cast(LedgerEntry.ReasonValue, 1)
    BALANCE_CHARGE = typing___cast(LedgerEntry.ReasonValue, 2)
    HOLD_ADJUSTMENT = typing___cast(LedgerEntry.ReasonValue, 3)
    REFUND = typing___cast(LedgerEntry.ReasonValue, 4)
    ADJUSTMENT = typing___cast(LedgerEntry.ReasonValue, 5)
    REDEMPTION_CODE = typing___cast(LedgerEntry.ReasonValue, 6)
    INCENTED_PAYMENT = typing___cast(LedgerEntry.ReasonValue, 7)
    PAYOUT = typing___cast(LedgerEntry.ReasonValue, 8)
    RETURNED_PAYOUT = typing___cast(LedgerEntry.ReasonValue, 9)
    RETURNED_ACH_ENTRY = typing___cast(LedgerEntry.ReasonValue, 10)
    SQUARE_275 = typing___cast(LedgerEntry.ReasonValue, 11)
    RETURNED_SQUARE_275 = typing___cast(LedgerEntry.ReasonValue, 12)
    SQUARE_CAPITAL_ADVANCE = typing___cast(LedgerEntry.ReasonValue, 13)
    SQUARE_CAPITAL_PAYMENT = typing___cast(LedgerEntry.ReasonValue, 14)
    SQUARE_CAPITAL_REVERSED_PAYMENT = typing___cast(LedgerEntry.ReasonValue, 15)
    FREE_PROCESSING = typing___cast(LedgerEntry.ReasonValue, 16)
    SUBSCRIPTION_FEE = typing___cast(LedgerEntry.ReasonValue, 17)
    SUBSCRIPTION_FEE_REFUND = typing___cast(LedgerEntry.ReasonValue, 18)
    PAID_SERVICE_FEE = typing___cast(LedgerEntry.ReasonValue, 19)
    PAID_SERVICE_FEE_REFUND = typing___cast(LedgerEntry.ReasonValue, 20)
    SQUARE_CARD = typing___cast(LedgerEntry.ReasonValue, 21)
    DISPUTE_ADJUSTMENT = typing___cast(LedgerEntry.ReasonValue, 22)
    MONEY_TRANSFER = typing___cast(LedgerEntry.ReasonValue, 23)
    MONEY_TRANSFER_REVERSAL = typing___cast(LedgerEntry.ReasonValue, 24)
    THIRD_PARTY_FEE = typing___cast(LedgerEntry.ReasonValue, 25)
    THIRD_PARTY_FEE_REFUND = typing___cast(LedgerEntry.ReasonValue, 26)
    FEE = typing___cast(LedgerEntry.ReasonValue, 27)
    TAX_ON_FEE = typing___cast(LedgerEntry.ReasonValue, 28)
    APP_FEE_REFUND = typing___cast(LedgerEntry.ReasonValue, 29)
    APP_FEE_REVENUE = typing___cast(LedgerEntry.ReasonValue, 30)
    OTHER_ADJUSTMENT = typing___cast(LedgerEntry.ReasonValue, 31)
    ESCHEATMENT = typing___cast(LedgerEntry.ReasonValue, 32)
    INITIAL_BALANCE_CHANGE = typing___cast(LedgerEntry.ReasonValue, 33)
    OPEN_DISPUTE = typing___cast(LedgerEntry.ReasonValue, 34)
    RESOLVED_DISPUTE = typing___cast(LedgerEntry.ReasonValue, 35)
    SUBSCRIPTION_FEE_PAID_REFUND = typing___cast(LedgerEntry.ReasonValue, 36)
    SQUARE_CAPITAL_FIXED_DEPOSIT = typing___cast(LedgerEntry.ReasonValue, 37)
    SQUARE_CAPITAL_FIXED_PAYMENT = typing___cast(LedgerEntry.ReasonValue, 38)
    SQUARE_CAPITAL_PROMOTION_BONUS = typing___cast(LedgerEntry.ReasonValue, 39)
    PAYMENT = typing___cast(LedgerEntry.ReasonValue, 40)
    REDEMPTION = typing___cast(LedgerEntry.ReasonValue, 41)
    HOLD = typing___cast(LedgerEntry.ReasonValue, 42)
    RELEASE = typing___cast(LedgerEntry.ReasonValue, 43)
    CANCELED_HOLD = typing___cast(LedgerEntry.ReasonValue, 44)
    CANCELED_RELEASE = typing___cast(LedgerEntry.ReasonValue, 45)
    SQUARE_CAPITAL_REVERSE_PAYMENT = typing___cast(LedgerEntry.ReasonValue, 46)
    SQUARE_CAPITAL_DEPOSIT = typing___cast(LedgerEntry.ReasonValue, 47)
    SQUARE_275_FEE = typing___cast(LedgerEntry.ReasonValue, 48)
    RETURNED_SQUARE_275_FEE = typing___cast(LedgerEntry.ReasonValue, 49)
    CANCELED = typing___cast(LedgerEntry.ReasonValue, 50)
    GST_ON_FEES = typing___cast(LedgerEntry.ReasonValue, 51)
    GST_ON_FEES_REFUND = typing___cast(LedgerEntry.ReasonValue, 52)
    CANCELED_FEE = typing___cast(LedgerEntry.ReasonValue, 53)
    PAID_SERVICES = typing___cast(LedgerEntry.ReasonValue, 54)
    PAID_SERVICES_REFUND = typing___cast(LedgerEntry.ReasonValue, 55)
    INSTANT_DEPOSIT_FEE = typing___cast(LedgerEntry.ReasonValue, 56)
    OTHER = typing___cast(LedgerEntry.ReasonValue, 100)
    type___Reason = Reason

    type: type___LedgerEntry.ReasonValue = ...
    payment_id: typing___Text = ...
    refund_id: typing___Text = ...

    @property
    def amount_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def fee_money(self) -> squareup___common___currency_pb2___Money: ...

    def __init__(self,
        *,
        type : typing___Optional[type___LedgerEntry.ReasonValue] = None,
        payment_id : typing___Optional[typing___Text] = None,
        amount_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        fee_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        refund_id : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"amount_money",b"amount_money",u"fee_money",b"fee_money",u"payment_id",b"payment_id",u"refund_id",b"refund_id",u"type",b"type"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"amount_money",b"amount_money",u"fee_money",b"fee_money",u"payment_id",b"payment_id",u"refund_id",b"refund_id",u"type",b"type"]) -> None: ...
type___LedgerEntry = LedgerEntry

class SummarySettlement(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    StatusValue = typing___NewType('StatusValue', builtin___int)
    type___StatusValue = StatusValue
    Status: _Status
    class _Status(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[SummarySettlement.StatusValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        SENT = typing___cast(SummarySettlement.StatusValue, 1)
        FAILED = typing___cast(SummarySettlement.StatusValue, 2)
    SENT = typing___cast(SummarySettlement.StatusValue, 1)
    FAILED = typing___cast(SummarySettlement.StatusValue, 2)
    type___Status = Status

    id: typing___Text = ...
    status: type___SummarySettlement.StatusValue = ...
    bank_account_id: typing___Text = ...
    initiated_at: typing___Text = ...

    @property
    def total_money(self) -> squareup___common___currency_pb2___Money: ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        status : typing___Optional[type___SummarySettlement.StatusValue] = None,
        bank_account_id : typing___Optional[typing___Text] = None,
        initiated_at : typing___Optional[typing___Text] = None,
        total_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"bank_account_id",b"bank_account_id",u"id",b"id",u"initiated_at",b"initiated_at",u"status",b"status",u"total_money",b"total_money"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"bank_account_id",b"bank_account_id",u"id",b"id",u"initiated_at",b"initiated_at",u"status",b"status",u"total_money",b"total_money"]) -> None: ...
type___SummarySettlement = SummarySettlement

class Settlement(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    StatusValue = typing___NewType('StatusValue', builtin___int)
    type___StatusValue = StatusValue
    Status: _Status
    class _Status(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Settlement.StatusValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        SENT = typing___cast(Settlement.StatusValue, 1)
        FAILED = typing___cast(Settlement.StatusValue, 2)
    SENT = typing___cast(Settlement.StatusValue, 1)
    FAILED = typing___cast(Settlement.StatusValue, 2)
    type___Status = Status

    id: typing___Text = ...
    status: type___Settlement.StatusValue = ...
    bank_account_id: typing___Text = ...
    initiated_at: typing___Text = ...
    batch_token: typing___Text = ...

    @property
    def total_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def entries(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___LedgerEntry]: ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        status : typing___Optional[type___Settlement.StatusValue] = None,
        bank_account_id : typing___Optional[typing___Text] = None,
        initiated_at : typing___Optional[typing___Text] = None,
        total_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        entries : typing___Optional[typing___Iterable[type___LedgerEntry]] = None,
        batch_token : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"bank_account_id",b"bank_account_id",u"batch_token",b"batch_token",u"id",b"id",u"initiated_at",b"initiated_at",u"status",b"status",u"total_money",b"total_money"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"bank_account_id",b"bank_account_id",u"batch_token",b"batch_token",u"entries",b"entries",u"id",b"id",u"initiated_at",b"initiated_at",u"status",b"status",u"total_money",b"total_money"]) -> None: ...
type___Settlement = Settlement

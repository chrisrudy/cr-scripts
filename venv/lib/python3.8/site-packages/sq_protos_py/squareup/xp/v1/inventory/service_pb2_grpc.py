# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.xp.v1.inventory import service_pb2 as squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2


class XpInventoryServiceStub(object):
    """Exposes the Inventory service via a REST compatible API
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListInventory = channel.unary_unary(
                '/squareup.xp.v1.inventory.XpInventoryService/ListInventory',
                request_serializer=squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.ListInventoryRequest.SerializeToString,
                response_deserializer=squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.ListInventoryResponse.FromString,
                )
        self.CreateInventoryAdjustment = channel.unary_unary(
                '/squareup.xp.v1.inventory.XpInventoryService/CreateInventoryAdjustment',
                request_serializer=squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.CreateInventoryAdjustmentRequest.SerializeToString,
                response_deserializer=squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.CreateInventoryAdjustmentResponse.FromString,
                )


class XpInventoryServiceServicer(object):
    """Exposes the Inventory service via a REST compatible API
    """

    def ListInventory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateInventoryAdjustment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_XpInventoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListInventory': grpc.unary_unary_rpc_method_handler(
                    servicer.ListInventory,
                    request_deserializer=squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.ListInventoryRequest.FromString,
                    response_serializer=squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.ListInventoryResponse.SerializeToString,
            ),
            'CreateInventoryAdjustment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateInventoryAdjustment,
                    request_deserializer=squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.CreateInventoryAdjustmentRequest.FromString,
                    response_serializer=squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.CreateInventoryAdjustmentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.xp.v1.inventory.XpInventoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class XpInventoryService(object):
    """Exposes the Inventory service via a REST compatible API
    """

    @staticmethod
    def ListInventory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.xp.v1.inventory.XpInventoryService/ListInventory',
            squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.ListInventoryRequest.SerializeToString,
            squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.ListInventoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateInventoryAdjustment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.xp.v1.inventory.XpInventoryService/CreateInventoryAdjustment',
            squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.CreateInventoryAdjustmentRequest.SerializeToString,
            squareup_dot_xp_dot_v1_dot_inventory_dot_service__pb2.CreateInventoryAdjustmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

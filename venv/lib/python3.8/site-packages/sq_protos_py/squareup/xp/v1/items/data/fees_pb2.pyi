# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.common.currency_pb2 import (
    Money as squareup___common___currency_pb2___Money,
)

from sq_protos_py.squareup.items.items_pb2 import (
    CalculationPhaseValue as squareup___items___items_pb2___CalculationPhaseValue,
    Fee as squareup___items___items_pb2___Fee,
)

from typing import (
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Fee(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    TypeValue = typing___NewType('TypeValue', builtin___int)
    type___TypeValue = TypeValue
    Type: _Type
    class _Type(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Fee.TypeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        US_SALES_TAX = typing___cast(Fee.TypeValue, 1)
        CA_GST = typing___cast(Fee.TypeValue, 2)
        CA_PST = typing___cast(Fee.TypeValue, 3)
        CA_HST = typing___cast(Fee.TypeValue, 4)
        CA_QST = typing___cast(Fee.TypeValue, 5)
        CA_PEI_PST = typing___cast(Fee.TypeValue, 6)
        JP_CONSUMPTION_TAX = typing___cast(Fee.TypeValue, 7)
        OTHER = typing___cast(Fee.TypeValue, 100)
    US_SALES_TAX = typing___cast(Fee.TypeValue, 1)
    CA_GST = typing___cast(Fee.TypeValue, 2)
    CA_PST = typing___cast(Fee.TypeValue, 3)
    CA_HST = typing___cast(Fee.TypeValue, 4)
    CA_QST = typing___cast(Fee.TypeValue, 5)
    CA_PEI_PST = typing___cast(Fee.TypeValue, 6)
    JP_CONSUMPTION_TAX = typing___cast(Fee.TypeValue, 7)
    OTHER = typing___cast(Fee.TypeValue, 100)
    type___Type = Type

    id: typing___Text = ...
    name: typing___Text = ...
    rate: typing___Text = ...
    calculation_phase: squareup___items___items_pb2___CalculationPhaseValue = ...
    adjustment_type: squareup___items___items_pb2___Fee.AdjustmentTypeValue = ...
    applies_to_custom_amounts: builtin___bool = ...
    enabled: builtin___bool = ...
    inclusion_type: squareup___items___items_pb2___Fee.InclusionTypeValue = ...
    type: type___Fee.TypeValue = ...
    v2_id: typing___Text = ...

    @property
    def amount_money(self) -> squareup___common___currency_pb2___Money: ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        name : typing___Optional[typing___Text] = None,
        rate : typing___Optional[typing___Text] = None,
        amount_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        calculation_phase : typing___Optional[squareup___items___items_pb2___CalculationPhaseValue] = None,
        adjustment_type : typing___Optional[squareup___items___items_pb2___Fee.AdjustmentTypeValue] = None,
        applies_to_custom_amounts : typing___Optional[builtin___bool] = None,
        enabled : typing___Optional[builtin___bool] = None,
        inclusion_type : typing___Optional[squareup___items___items_pb2___Fee.InclusionTypeValue] = None,
        type : typing___Optional[type___Fee.TypeValue] = None,
        v2_id : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"adjustment_type",b"adjustment_type",u"amount_money",b"amount_money",u"applies_to_custom_amounts",b"applies_to_custom_amounts",u"calculation_phase",b"calculation_phase",u"enabled",b"enabled",u"id",b"id",u"inclusion_type",b"inclusion_type",u"name",b"name",u"rate",b"rate",u"type",b"type",u"v2_id",b"v2_id"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"adjustment_type",b"adjustment_type",u"amount_money",b"amount_money",u"applies_to_custom_amounts",b"applies_to_custom_amounts",u"calculation_phase",b"calculation_phase",u"enabled",b"enabled",u"id",b"id",u"inclusion_type",b"inclusion_type",u"name",b"name",u"rate",b"rate",u"type",b"type",u"v2_id",b"v2_id"]) -> None: ...
type___Fee = Fee

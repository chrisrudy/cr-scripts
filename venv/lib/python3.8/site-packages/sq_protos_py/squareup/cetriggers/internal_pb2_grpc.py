# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.cetriggers import internal_pb2 as squareup_dot_cetriggers_dot_internal__pb2


class InternalCETriggersServiceStub(object):
    """Endpoints for Triggers. Trigger is the meta data for how we trigger marketing
    on events, e.g., transactions. TriggerInstance is the actual event for marketing on a buyer.
    This is published by a feed of TriggerInstance, which is setup in go/src/square/up/cetriggers/feedpublisher/module.go.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListTriggers = channel.unary_unary(
                '/squareup.cetriggers.InternalCETriggersService/ListTriggers',
                request_serializer=squareup_dot_cetriggers_dot_internal__pb2.ListTriggersRequest.SerializeToString,
                response_deserializer=squareup_dot_cetriggers_dot_internal__pb2.ListTriggersResponse.FromString,
                )
        self.UpdateTrigger = channel.unary_unary(
                '/squareup.cetriggers.InternalCETriggersService/UpdateTrigger',
                request_serializer=squareup_dot_cetriggers_dot_internal__pb2.UpdateTriggerRequest.SerializeToString,
                response_deserializer=squareup_dot_cetriggers_dot_internal__pb2.UpdateTriggerResponse.FromString,
                )


class InternalCETriggersServiceServicer(object):
    """Endpoints for Triggers. Trigger is the meta data for how we trigger marketing
    on events, e.g., transactions. TriggerInstance is the actual event for marketing on a buyer.
    This is published by a feed of TriggerInstance, which is setup in go/src/square/up/cetriggers/feedpublisher/module.go.
    """

    def ListTriggers(self, request, context):
        """List all available triggers for a merchant. New triggers are disabled by default.
        Caller does not need to worry about creating triggers.
        It is up to the caller's to display them to users. For example, if a new trigger
        is added, it will be in the response but the caller can choose not to display them.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTrigger(self, request, context):
        """Update trigger state, e.g., enabling.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InternalCETriggersServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListTriggers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTriggers,
                    request_deserializer=squareup_dot_cetriggers_dot_internal__pb2.ListTriggersRequest.FromString,
                    response_serializer=squareup_dot_cetriggers_dot_internal__pb2.ListTriggersResponse.SerializeToString,
            ),
            'UpdateTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTrigger,
                    request_deserializer=squareup_dot_cetriggers_dot_internal__pb2.UpdateTriggerRequest.FromString,
                    response_serializer=squareup_dot_cetriggers_dot_internal__pb2.UpdateTriggerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.cetriggers.InternalCETriggersService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InternalCETriggersService(object):
    """Endpoints for Triggers. Trigger is the meta data for how we trigger marketing
    on events, e.g., transactions. TriggerInstance is the actual event for marketing on a buyer.
    This is published by a feed of TriggerInstance, which is setup in go/src/square/up/cetriggers/feedpublisher/module.go.
    """

    @staticmethod
    def ListTriggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cetriggers.InternalCETriggersService/ListTriggers',
            squareup_dot_cetriggers_dot_internal__pb2.ListTriggersRequest.SerializeToString,
            squareup_dot_cetriggers_dot_internal__pb2.ListTriggersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cetriggers.InternalCETriggersService/UpdateTrigger',
            squareup_dot_cetriggers_dot_internal__pb2.UpdateTriggerRequest.SerializeToString,
            squareup_dot_cetriggers_dot_internal__pb2.UpdateTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

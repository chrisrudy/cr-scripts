# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.flipper import service_pb2 as squareup_dot_flipper_dot_service__pb2


class FlipperApplicationDatabaseServiceStub(object):
    """*
    Submit application meta information to the application database.
    Returns a status and a status message.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitAppInfo = channel.unary_unary(
                '/squareup.flipper.service.FlipperApplicationDatabaseService/SubmitAppInfo',
                request_serializer=squareup_dot_flipper_dot_service__pb2.SubmitAppInfoRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.SubmitAppInfoResponse.FromString,
                )
        self.SubmitPaySdkBuild = channel.unary_unary(
                '/squareup.flipper.service.FlipperApplicationDatabaseService/SubmitPaySdkBuild',
                request_serializer=squareup_dot_flipper_dot_service__pb2.SubmitPaySdkBuildRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.PaySdkSubmissionResponse.FromString,
                )
        self.SubmitPaySdkApp = channel.unary_unary(
                '/squareup.flipper.service.FlipperApplicationDatabaseService/SubmitPaySdkApp',
                request_serializer=squareup_dot_flipper_dot_service__pb2.SubmitPaySdkApplicationRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.PaySdkSubmissionResponse.FromString,
                )


class FlipperApplicationDatabaseServiceServicer(object):
    """*
    Submit application meta information to the application database.
    Returns a status and a status message.
    """

    def SubmitAppInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitPaySdkBuild(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitPaySdkApp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlipperApplicationDatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitAppInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitAppInfo,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.SubmitAppInfoRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.SubmitAppInfoResponse.SerializeToString,
            ),
            'SubmitPaySdkBuild': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitPaySdkBuild,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.SubmitPaySdkBuildRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.PaySdkSubmissionResponse.SerializeToString,
            ),
            'SubmitPaySdkApp': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitPaySdkApp,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.SubmitPaySdkApplicationRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.PaySdkSubmissionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.flipper.service.FlipperApplicationDatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlipperApplicationDatabaseService(object):
    """*
    Submit application meta information to the application database.
    Returns a status and a status message.
    """

    @staticmethod
    def SubmitAppInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperApplicationDatabaseService/SubmitAppInfo',
            squareup_dot_flipper_dot_service__pb2.SubmitAppInfoRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.SubmitAppInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitPaySdkBuild(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperApplicationDatabaseService/SubmitPaySdkBuild',
            squareup_dot_flipper_dot_service__pb2.SubmitPaySdkBuildRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.PaySdkSubmissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitPaySdkApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperApplicationDatabaseService/SubmitPaySdkApp',
            squareup_dot_flipper_dot_service__pb2.SubmitPaySdkApplicationRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.PaySdkSubmissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FlipperDeviceEventsServiceStub(object):
    """*
    An RPC service for providing info about devices that Flipper has seen.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDeviceEvents = channel.unary_unary(
                '/squareup.flipper.service.FlipperDeviceEventsService/GetDeviceEvents',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetDeviceEventsRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetDeviceEventsResponse.FromString,
                )


class FlipperDeviceEventsServiceServicer(object):
    """*
    An RPC service for providing info about devices that Flipper has seen.
    """

    def GetDeviceEvents(self, request, context):
        """*
        Given a set of web UDIDs (device identifiers), returns events seen by Flipper for those
        devices.  For a given device and event type, only the most recent instance will be returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlipperDeviceEventsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDeviceEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeviceEvents,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetDeviceEventsRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetDeviceEventsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.flipper.service.FlipperDeviceEventsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlipperDeviceEventsService(object):
    """*
    An RPC service for providing info about devices that Flipper has seen.
    """

    @staticmethod
    def GetDeviceEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperDeviceEventsService/GetDeviceEvents',
            squareup_dot_flipper_dot_service__pb2.GetDeviceEventsRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetDeviceEventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FlipperAlertReviewServiceStub(object):
    """*
    An RPC service for summarizing Flipper results (DENY/REVIEW) for other Square services,
    e.g., Regulator. Provides sufficient information for humans to make a conclusion on REVIEWs,
    and to take action upon that conclusion.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAlerts = channel.unary_unary(
                '/squareup.flipper.service.FlipperAlertReviewService/GetAlerts',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetAlertsRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetAlertsResponse.FromString,
                )
        self.GetReviewDecisions = channel.unary_unary(
                '/squareup.flipper.service.FlipperAlertReviewService/GetReviewDecisions',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetReviewDecisionsRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetReviewDecisionsResponse.FromString,
                )
        self.GetReviewsV2 = channel.unary_unary(
                '/squareup.flipper.service.FlipperAlertReviewService/GetReviewsV2',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetReviewsV2Request.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetReviewsV2Response.FromString,
                )
        self.GetAlertsV2 = channel.unary_unary(
                '/squareup.flipper.service.FlipperAlertReviewService/GetAlertsV2',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetAlertsV2Request.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetAlertsV2Response.FromString,
                )


class FlipperAlertReviewServiceServicer(object):
    """*
    An RPC service for summarizing Flipper results (DENY/REVIEW) for other Square services,
    e.g., Regulator. Provides sufficient information for humans to make a conclusion on REVIEWs,
    and to take action upon that conclusion.
    """

    def GetAlerts(self, request, context):
        """* Given a set of alert identifiers, returns a summary for each request alert, along with its
        associated Minesweeper frame and possibly its location. If only some of the requested alerts
        are found, the RPC still succeeds and the result_code field indicates a partial success.
        If all are found, the result_code indicates total success. In the case of an erroneously
        missing frame (for any of the contained alerts), a separate boolean field frames_missing
        signals this problem to the caller without failing the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReviewDecisions(self, request, context):
        """* Given a single alert or device identifier, return the (optionally paginated) set of
        review decisions associated with that alert or device.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReviewsV2(self, request, context):
        """* Given a regulator_case_token, threat_uuid, and boolean indicating whether to return
        all cases chronologically or only open cases, return all available reviews.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAlertsV2(self, request, context):
        """* Given an equivalence_token and threat_uuid, return details of associated Alerts. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlipperAlertReviewServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAlerts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlerts,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetAlertsRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetAlertsResponse.SerializeToString,
            ),
            'GetReviewDecisions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReviewDecisions,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetReviewDecisionsRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetReviewDecisionsResponse.SerializeToString,
            ),
            'GetReviewsV2': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReviewsV2,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetReviewsV2Request.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetReviewsV2Response.SerializeToString,
            ),
            'GetAlertsV2': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlertsV2,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetAlertsV2Request.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetAlertsV2Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.flipper.service.FlipperAlertReviewService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlipperAlertReviewService(object):
    """*
    An RPC service for summarizing Flipper results (DENY/REVIEW) for other Square services,
    e.g., Regulator. Provides sufficient information for humans to make a conclusion on REVIEWs,
    and to take action upon that conclusion.
    """

    @staticmethod
    def GetAlerts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperAlertReviewService/GetAlerts',
            squareup_dot_flipper_dot_service__pb2.GetAlertsRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetAlertsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReviewDecisions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperAlertReviewService/GetReviewDecisions',
            squareup_dot_flipper_dot_service__pb2.GetReviewDecisionsRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetReviewDecisionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReviewsV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperAlertReviewService/GetReviewsV2',
            squareup_dot_flipper_dot_service__pb2.GetReviewsV2Request.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetReviewsV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAlertsV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperAlertReviewService/GetAlertsV2',
            squareup_dot_flipper_dot_service__pb2.GetAlertsV2Request.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetAlertsV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FlipperDeviceAttestationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InternalGetTicket = channel.unary_unary(
                '/squareup.flipper.service.FlipperDeviceAttestationService/InternalGetTicket',
                request_serializer=squareup_dot_flipper_dot_service__pb2.InternalGetTicketRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.InternalGetTicketResponse.FromString,
                )
        self.InternalValidateSession = channel.unary_unary(
                '/squareup.flipper.service.FlipperDeviceAttestationService/InternalValidateSession',
                request_serializer=squareup_dot_flipper_dot_service__pb2.InternalValidateSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.InternalValidateSessionResponse.FromString,
                )


class FlipperDeviceAttestationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InternalGetTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InternalValidateSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlipperDeviceAttestationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InternalGetTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.InternalGetTicket,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.InternalGetTicketRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.InternalGetTicketResponse.SerializeToString,
            ),
            'InternalValidateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.InternalValidateSession,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.InternalValidateSessionRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.InternalValidateSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.flipper.service.FlipperDeviceAttestationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlipperDeviceAttestationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InternalGetTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperDeviceAttestationService/InternalGetTicket',
            squareup_dot_flipper_dot_service__pb2.InternalGetTicketRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.InternalGetTicketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InternalValidateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperDeviceAttestationService/InternalValidateSession',
            squareup_dot_flipper_dot_service__pb2.InternalValidateSessionRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.InternalValidateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RegulatorReviewStateChangeServiceStub(object):
    """*
    Service for getting review attribute values from Regulator when a case is cleared by an agent
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReviewStateChange = channel.unary_unary(
                '/squareup.flipper.service.RegulatorReviewStateChangeService/ReviewStateChange',
                request_serializer=squareup_dot_flipper_dot_service__pb2.ReviewStateChangeRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.ReviewStateChangeResponse.FromString,
                )
        self.GetReviewState = channel.unary_unary(
                '/squareup.flipper.service.RegulatorReviewStateChangeService/GetReviewState',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetReviewStateRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetReviewStateResponse.FromString,
                )
        self.GetPendingReviewDecisions = channel.unary_unary(
                '/squareup.flipper.service.RegulatorReviewStateChangeService/GetPendingReviewDecisions',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetPendingReviewDecisionsRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetPendingReviewDecisionsResponse.FromString,
                )
        self.GetPendingReviewsV2 = channel.unary_unary(
                '/squareup.flipper.service.RegulatorReviewStateChangeService/GetPendingReviewsV2',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetPendingReviewsV2Request.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetPendingReviewsV2Response.FromString,
                )
        self.GetReviewStateV2 = channel.unary_unary(
                '/squareup.flipper.service.RegulatorReviewStateChangeService/GetReviewStateV2',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetReviewStateV2Request.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetReviewStateV2Response.FromString,
                )
        self.ReviewStateChangeV2 = channel.unary_unary(
                '/squareup.flipper.service.RegulatorReviewStateChangeService/ReviewStateChangeV2',
                request_serializer=squareup_dot_flipper_dot_service__pb2.ReviewStateChangeV2Request.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.ReviewStateChangeV2Response.FromString,
                )


class RegulatorReviewStateChangeServiceServicer(object):
    """*
    Service for getting review attribute values from Regulator when a case is cleared by an agent
    """

    def ReviewStateChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReviewState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPendingReviewDecisions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPendingReviewsV2(self, request, context):
        """* Regulator request asking for all alerts that have not been reviewed for a particular
        threat_uuid. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReviewStateV2(self, request, context):
        """* Regulator request, asking for the review state of a particular alert from a
        particular threat_uuid 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReviewStateChangeV2(self, request, context):
        """* Regulator requests sent to Flipper to persist review state changes made when a case
        is cleared. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegulatorReviewStateChangeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReviewStateChange': grpc.unary_unary_rpc_method_handler(
                    servicer.ReviewStateChange,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.ReviewStateChangeRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.ReviewStateChangeResponse.SerializeToString,
            ),
            'GetReviewState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReviewState,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetReviewStateRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetReviewStateResponse.SerializeToString,
            ),
            'GetPendingReviewDecisions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPendingReviewDecisions,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetPendingReviewDecisionsRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetPendingReviewDecisionsResponse.SerializeToString,
            ),
            'GetPendingReviewsV2': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPendingReviewsV2,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetPendingReviewsV2Request.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetPendingReviewsV2Response.SerializeToString,
            ),
            'GetReviewStateV2': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReviewStateV2,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetReviewStateV2Request.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetReviewStateV2Response.SerializeToString,
            ),
            'ReviewStateChangeV2': grpc.unary_unary_rpc_method_handler(
                    servicer.ReviewStateChangeV2,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.ReviewStateChangeV2Request.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.ReviewStateChangeV2Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.flipper.service.RegulatorReviewStateChangeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegulatorReviewStateChangeService(object):
    """*
    Service for getting review attribute values from Regulator when a case is cleared by an agent
    """

    @staticmethod
    def ReviewStateChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.RegulatorReviewStateChangeService/ReviewStateChange',
            squareup_dot_flipper_dot_service__pb2.ReviewStateChangeRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.ReviewStateChangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReviewState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.RegulatorReviewStateChangeService/GetReviewState',
            squareup_dot_flipper_dot_service__pb2.GetReviewStateRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetReviewStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPendingReviewDecisions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.RegulatorReviewStateChangeService/GetPendingReviewDecisions',
            squareup_dot_flipper_dot_service__pb2.GetPendingReviewDecisionsRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetPendingReviewDecisionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPendingReviewsV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.RegulatorReviewStateChangeService/GetPendingReviewsV2',
            squareup_dot_flipper_dot_service__pb2.GetPendingReviewsV2Request.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetPendingReviewsV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReviewStateV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.RegulatorReviewStateChangeService/GetReviewStateV2',
            squareup_dot_flipper_dot_service__pb2.GetReviewStateV2Request.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetReviewStateV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReviewStateChangeV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.RegulatorReviewStateChangeService/ReviewStateChangeV2',
            squareup_dot_flipper_dot_service__pb2.ReviewStateChangeV2Request.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.ReviewStateChangeV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FlipperDeviceServiceStub(object):
    """*
    Service for regulator to query for flipper device
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFlipperDevice = channel.unary_unary(
                '/squareup.flipper.service.FlipperDeviceService/GetFlipperDevice',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetFlipperDeviceRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetFlipperDeviceResponse.FromString,
                )


class FlipperDeviceServiceServicer(object):
    """*
    Service for regulator to query for flipper device
    """

    def GetFlipperDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlipperDeviceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFlipperDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFlipperDevice,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetFlipperDeviceRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetFlipperDeviceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.flipper.service.FlipperDeviceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlipperDeviceService(object):
    """*
    Service for regulator to query for flipper device
    """

    @staticmethod
    def GetFlipperDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperDeviceService/GetFlipperDevice',
            squareup_dot_flipper_dot_service__pb2.GetFlipperDeviceRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetFlipperDeviceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ThreatIdServiceStub(object):
    """*
    Service for regulator to query for a threat uuid
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetThreatId = channel.unary_unary(
                '/squareup.flipper.service.ThreatIdService/GetThreatId',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetThreatIdRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetThreatIdResponse.FromString,
                )


class ThreatIdServiceServicer(object):
    """*
    Service for regulator to query for a threat uuid
    """

    def GetThreatId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ThreatIdServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetThreatId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetThreatId,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetThreatIdRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetThreatIdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.flipper.service.ThreatIdService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ThreatIdService(object):
    """*
    Service for regulator to query for a threat uuid
    """

    @staticmethod
    def GetThreatId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.ThreatIdService/GetThreatId',
            squareup_dot_flipper_dot_service__pb2.GetThreatIdRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetThreatIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UploadMsCommsConfigServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadMsCommsConfig = channel.unary_unary(
                '/squareup.flipper.service.UploadMsCommsConfigService/UploadMsCommsConfig',
                request_serializer=squareup_dot_flipper_dot_service__pb2.UploadMsCommsRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.UploadMsCommsResponse.FromString,
                )


class UploadMsCommsConfigServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadMsCommsConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UploadMsCommsConfigServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadMsCommsConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadMsCommsConfig,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.UploadMsCommsRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.UploadMsCommsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.flipper.service.UploadMsCommsConfigService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UploadMsCommsConfigService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadMsCommsConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.UploadMsCommsConfigService/UploadMsCommsConfig',
            squareup_dot_flipper_dot_service__pb2.UploadMsCommsRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.UploadMsCommsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FlipperInternalGetTicketInfoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTicketInfo = channel.unary_unary(
                '/squareup.flipper.service.FlipperInternalGetTicketInfoService/GetTicketInfo',
                request_serializer=squareup_dot_flipper_dot_service__pb2.GetTicketInfoRequest.SerializeToString,
                response_deserializer=squareup_dot_flipper_dot_service__pb2.GetTicketInfoResponse.FromString,
                )


class FlipperInternalGetTicketInfoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTicketInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlipperInternalGetTicketInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTicketInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTicketInfo,
                    request_deserializer=squareup_dot_flipper_dot_service__pb2.GetTicketInfoRequest.FromString,
                    response_serializer=squareup_dot_flipper_dot_service__pb2.GetTicketInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.flipper.service.FlipperInternalGetTicketInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlipperInternalGetTicketInfoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTicketInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.flipper.service.FlipperInternalGetTicketInfoService/GetTicketInfo',
            squareup_dot_flipper_dot_service__pb2.GetTicketInfoRequest.SerializeToString,
            squareup_dot_flipper_dot_service__pb2.GetTicketInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

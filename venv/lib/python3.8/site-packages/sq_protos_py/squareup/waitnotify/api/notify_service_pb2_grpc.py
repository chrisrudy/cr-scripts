# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.waitnotify.api import notify_service_pb2 as squareup_dot_waitnotify_dot_api_dot_notify__service__pb2


class NotifyServiceStub(object):
    """*
    This service allows other services to wait and notify on a common host.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Wait = channel.unary_unary(
                '/squareup.waitnotify.api.NotifyService/Wait',
                request_serializer=squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.WaitRequest.SerializeToString,
                response_deserializer=squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.WaitResponse.FromString,
                )
        self.NotifyAll = channel.unary_unary(
                '/squareup.waitnotify.api.NotifyService/NotifyAll',
                request_serializer=squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.NotifyAllRequest.SerializeToString,
                response_deserializer=squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.NotifyAllResponse.FromString,
                )


class NotifyServiceServicer(object):
    """*
    This service allows other services to wait and notify on a common host.
    """

    def Wait(self, request, context):
        """*
        Waits on a given identifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyAll(self, request, context):
        """*
        Notifies all waiting on a given identifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotifyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Wait': grpc.unary_unary_rpc_method_handler(
                    servicer.Wait,
                    request_deserializer=squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.WaitRequest.FromString,
                    response_serializer=squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.WaitResponse.SerializeToString,
            ),
            'NotifyAll': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyAll,
                    request_deserializer=squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.NotifyAllRequest.FromString,
                    response_serializer=squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.NotifyAllResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.waitnotify.api.NotifyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NotifyService(object):
    """*
    This service allows other services to wait and notify on a common host.
    """

    @staticmethod
    def Wait(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.waitnotify.api.NotifyService/Wait',
            squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.WaitRequest.SerializeToString,
            squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.WaitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.waitnotify.api.NotifyService/NotifyAll',
            squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.NotifyAllRequest.SerializeToString,
            squareup_dot_waitnotify_dot_api_dot_notify__service__pb2.NotifyAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

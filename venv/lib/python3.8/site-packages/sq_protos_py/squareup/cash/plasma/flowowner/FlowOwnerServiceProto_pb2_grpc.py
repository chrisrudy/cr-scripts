# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.cash.plasma.flowowner import FlowOwnerServiceProto_pb2 as squareup_dot_cash_dot_plasma_dot_flowowner_dot_FlowOwnerServiceProto__pb2


class FlowOwnerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OnFlowChanged = channel.unary_unary(
                '/squareup.cash.plasma.flowowner.FlowOwnerService/OnFlowChanged',
                request_serializer=squareup_dot_cash_dot_plasma_dot_flowowner_dot_FlowOwnerServiceProto__pb2.OnFlowChangedRequest.SerializeToString,
                response_deserializer=squareup_dot_cash_dot_plasma_dot_flowowner_dot_FlowOwnerServiceProto__pb2.OnFlowChangedResponse.FromString,
                )


class FlowOwnerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OnFlowChanged(self, request, context):
        """*
        Decides if the flow is complete, or returns the new requirements in the response. This is
        invoked once Plasma has all the requirements concluded and it wants the flow owner to make a
        decision.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlowOwnerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OnFlowChanged': grpc.unary_unary_rpc_method_handler(
                    servicer.OnFlowChanged,
                    request_deserializer=squareup_dot_cash_dot_plasma_dot_flowowner_dot_FlowOwnerServiceProto__pb2.OnFlowChangedRequest.FromString,
                    response_serializer=squareup_dot_cash_dot_plasma_dot_flowowner_dot_FlowOwnerServiceProto__pb2.OnFlowChangedResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.cash.plasma.flowowner.FlowOwnerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlowOwnerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OnFlowChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cash.plasma.flowowner.FlowOwnerService/OnFlowChanged',
            squareup_dot_cash_dot_plasma_dot_flowowner_dot_FlowOwnerServiceProto__pb2.OnFlowChangedRequest.SerializeToString,
            squareup_dot_cash_dot_plasma_dot_flowowner_dot_FlowOwnerServiceProto__pb2.OnFlowChangedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

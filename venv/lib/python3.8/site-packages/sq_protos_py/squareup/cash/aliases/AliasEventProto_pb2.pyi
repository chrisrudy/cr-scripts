# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.cash.aliases.AliasLinkedEventProto_pb2 import (
    AliasLinkedEvent as squareup___cash___aliases___AliasLinkedEventProto_pb2___AliasLinkedEvent,
)

from sq_protos_py.squareup.cash.aliases.AliasUnlinkedEventProto_pb2 import (
    AliasUnlinkedEvent as squareup___cash___aliases___AliasUnlinkedEventProto_pb2___AliasUnlinkedEvent,
)

from sq_protos_py.squareup.franklin.browser_interaction_pb2 import (
    BrowserInteraction as squareup___franklin___browser_interaction_pb2___BrowserInteraction,
)

from typing import (
    NewType as typing___NewType,
    Optional as typing___Optional,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class AliasEvent(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    AliasEventCauseElaborationValue = typing___NewType('AliasEventCauseElaborationValue', builtin___int)
    type___AliasEventCauseElaborationValue = AliasEventCauseElaborationValue
    AliasEventCauseElaboration: _AliasEventCauseElaboration
    class _AliasEventCauseElaboration(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[AliasEvent.AliasEventCauseElaborationValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        DEFAULT_ALIAS_EVENT_CAUSE_DO_NOT_USE = typing___cast(AliasEvent.AliasEventCauseElaborationValue, 0)
        CUSTOMER_MERGE = typing___cast(AliasEvent.AliasEventCauseElaborationValue, 1)
    DEFAULT_ALIAS_EVENT_CAUSE_DO_NOT_USE = typing___cast(AliasEvent.AliasEventCauseElaborationValue, 0)
    CUSTOMER_MERGE = typing___cast(AliasEvent.AliasEventCauseElaborationValue, 1)
    type___AliasEventCauseElaboration = AliasEventCauseElaboration

    occurred_at: builtin___int = ...
    cause_elaboration: type___AliasEvent.AliasEventCauseElaborationValue = ...
    version: builtin___int = ...
    display_date: builtin___int = ...

    @property
    def linked(self) -> squareup___cash___aliases___AliasLinkedEventProto_pb2___AliasLinkedEvent: ...

    @property
    def unlinked(self) -> squareup___cash___aliases___AliasUnlinkedEventProto_pb2___AliasUnlinkedEvent: ...

    @property
    def browser_interaction(self) -> squareup___franklin___browser_interaction_pb2___BrowserInteraction: ...

    def __init__(self,
        *,
        linked : typing___Optional[squareup___cash___aliases___AliasLinkedEventProto_pb2___AliasLinkedEvent] = None,
        unlinked : typing___Optional[squareup___cash___aliases___AliasUnlinkedEventProto_pb2___AliasUnlinkedEvent] = None,
        occurred_at : typing___Optional[builtin___int] = None,
        browser_interaction : typing___Optional[squareup___franklin___browser_interaction_pb2___BrowserInteraction] = None,
        cause_elaboration : typing___Optional[type___AliasEvent.AliasEventCauseElaborationValue] = None,
        version : typing___Optional[builtin___int] = None,
        display_date : typing___Optional[builtin___int] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"browser_interaction",b"browser_interaction",u"cause_elaboration",b"cause_elaboration",u"display_date",b"display_date",u"linked",b"linked",u"occurred_at",b"occurred_at",u"type",b"type",u"unlinked",b"unlinked",u"version",b"version"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"browser_interaction",b"browser_interaction",u"cause_elaboration",b"cause_elaboration",u"display_date",b"display_date",u"linked",b"linked",u"occurred_at",b"occurred_at",u"type",b"type",u"unlinked",b"unlinked",u"version",b"version"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"type",b"type"]) -> typing_extensions___Literal["linked","unlinked"]: ...
type___AliasEvent = AliasEvent

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.cash.evently import evently_pb2 as squareup_dot_cash_dot_evently_dot_evently__pb2


class EventlyServiceStub(object):
    """* The Evently service interface 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BatchPublish = channel.unary_unary(
                '/squareup.cash.evently.service.EventlyService/BatchPublish',
                request_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.BatchPublishRequest.SerializeToString,
                response_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.BatchPublishResponse.FromString,
                )
        self.Fetch = channel.unary_unary(
                '/squareup.cash.evently.service.EventlyService/Fetch',
                request_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.FetchRequest.SerializeToString,
                response_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.FetchResponse.FromString,
                )
        self.AckFetch = channel.unary_unary(
                '/squareup.cash.evently.service.EventlyService/AckFetch',
                request_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.AckFetchRequest.SerializeToString,
                response_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.AckFetchResponse.FromString,
                )
        self.FetchRedeliveries = channel.unary_unary(
                '/squareup.cash.evently.service.EventlyService/FetchRedeliveries',
                request_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.FetchRedeliveriesRequest.SerializeToString,
                response_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.FetchRedeliveriesResponse.FromString,
                )
        self.AckRedeliveries = channel.unary_unary(
                '/squareup.cash.evently.service.EventlyService/AckRedeliveries',
                request_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.AckRedeliveriesRequest.SerializeToString,
                response_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.AckRedeliveriesResponse.FromString,
                )
        self.GetTopicConsumerMetadata = channel.unary_unary(
                '/squareup.cash.evently.service.EventlyService/GetTopicConsumerMetadata',
                request_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.GetTopicConsumerMetadataRequest.SerializeToString,
                response_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.GetTopicConsumerMetadataResponse.FromString,
                )


class EventlyServiceServicer(object):
    """* The Evently service interface 
    """

    def BatchPublish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fetch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AckFetch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchRedeliveries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AckRedeliveries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopicConsumerMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventlyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BatchPublish': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchPublish,
                    request_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.BatchPublishRequest.FromString,
                    response_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.BatchPublishResponse.SerializeToString,
            ),
            'Fetch': grpc.unary_unary_rpc_method_handler(
                    servicer.Fetch,
                    request_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.FetchRequest.FromString,
                    response_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.FetchResponse.SerializeToString,
            ),
            'AckFetch': grpc.unary_unary_rpc_method_handler(
                    servicer.AckFetch,
                    request_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.AckFetchRequest.FromString,
                    response_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.AckFetchResponse.SerializeToString,
            ),
            'FetchRedeliveries': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchRedeliveries,
                    request_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.FetchRedeliveriesRequest.FromString,
                    response_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.FetchRedeliveriesResponse.SerializeToString,
            ),
            'AckRedeliveries': grpc.unary_unary_rpc_method_handler(
                    servicer.AckRedeliveries,
                    request_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.AckRedeliveriesRequest.FromString,
                    response_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.AckRedeliveriesResponse.SerializeToString,
            ),
            'GetTopicConsumerMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopicConsumerMetadata,
                    request_deserializer=squareup_dot_cash_dot_evently_dot_evently__pb2.GetTopicConsumerMetadataRequest.FromString,
                    response_serializer=squareup_dot_cash_dot_evently_dot_evently__pb2.GetTopicConsumerMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.cash.evently.service.EventlyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventlyService(object):
    """* The Evently service interface 
    """

    @staticmethod
    def BatchPublish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cash.evently.service.EventlyService/BatchPublish',
            squareup_dot_cash_dot_evently_dot_evently__pb2.BatchPublishRequest.SerializeToString,
            squareup_dot_cash_dot_evently_dot_evently__pb2.BatchPublishResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cash.evently.service.EventlyService/Fetch',
            squareup_dot_cash_dot_evently_dot_evently__pb2.FetchRequest.SerializeToString,
            squareup_dot_cash_dot_evently_dot_evently__pb2.FetchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AckFetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cash.evently.service.EventlyService/AckFetch',
            squareup_dot_cash_dot_evently_dot_evently__pb2.AckFetchRequest.SerializeToString,
            squareup_dot_cash_dot_evently_dot_evently__pb2.AckFetchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchRedeliveries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cash.evently.service.EventlyService/FetchRedeliveries',
            squareup_dot_cash_dot_evently_dot_evently__pb2.FetchRedeliveriesRequest.SerializeToString,
            squareup_dot_cash_dot_evently_dot_evently__pb2.FetchRedeliveriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AckRedeliveries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cash.evently.service.EventlyService/AckRedeliveries',
            squareup_dot_cash_dot_evently_dot_evently__pb2.AckRedeliveriesRequest.SerializeToString,
            squareup_dot_cash_dot_evently_dot_evently__pb2.AckRedeliveriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopicConsumerMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cash.evently.service.EventlyService/GetTopicConsumerMetadata',
            squareup_dot_cash_dot_evently_dot_evently__pb2.GetTopicConsumerMetadataRequest.SerializeToString,
            squareup_dot_cash_dot_evently_dot_evently__pb2.GetTopicConsumerMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

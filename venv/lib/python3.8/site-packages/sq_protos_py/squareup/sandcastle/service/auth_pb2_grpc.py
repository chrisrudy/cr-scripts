# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.sandcastle.auth import create_sandbox_otk_pb2 as squareup_dot_sandcastle_dot_auth_dot_create__sandbox__otk__pb2
from sq_protos_py.squareup.sandcastle.auth import exchange_sandbox_otk_for_session_pb2 as squareup_dot_sandcastle_dot_auth_dot_exchange__sandbox__otk__for__session__pb2
from sq_protos_py.squareup.sandcastle.auth import obtain_primary_sandbox_session_pb2 as squareup_dot_sandcastle_dot_auth_dot_obtain__primary__sandbox__session__pb2


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSandboxOtk = channel.unary_unary(
                '/squareup.sandcastle.service.AuthService/CreateSandboxOtk',
                request_serializer=squareup_dot_sandcastle_dot_auth_dot_create__sandbox__otk__pb2.CreateSandboxOtkRequest.SerializeToString,
                response_deserializer=squareup_dot_sandcastle_dot_auth_dot_create__sandbox__otk__pb2.CreateSandboxOtkResponse.FromString,
                )
        self.ExchangeSandboxOtkForSession = channel.unary_unary(
                '/squareup.sandcastle.service.AuthService/ExchangeSandboxOtkForSession',
                request_serializer=squareup_dot_sandcastle_dot_auth_dot_exchange__sandbox__otk__for__session__pb2.ExchangeSandboxOtkForSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_sandcastle_dot_auth_dot_exchange__sandbox__otk__for__session__pb2.ExchangeSandboxOtkForSessionResponse.FromString,
                )
        self.ObtainPrimarySandboxSession = channel.unary_unary(
                '/squareup.sandcastle.service.AuthService/ObtainPrimarySandboxSession',
                request_serializer=squareup_dot_sandcastle_dot_auth_dot_obtain__primary__sandbox__session__pb2.ObtainPrimarySandboxSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_sandcastle_dot_auth_dot_obtain__primary__sandbox__session__pb2.ObtainPrimarySandboxSessionResponse.FromString,
                )


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateSandboxOtk(self, request, context):
        """CreateSandboxOtk returns a Multipass one time key for a developer's sandbox
        account. This key can be exchanged for a valid session in the sandbox via
        ExchangeSandboxOtkForSession.

        This RPC can be used for any of the developer's sandbox accounts, and not
        only their primary account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeSandboxOtkForSession(self, request, context):
        """ExchangeSandboxOtkForSession returns a valid authenticated sandbox session
        for the provided one time key. One time keys can be generated with
        CreateSandboxOtk.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObtainPrimarySandboxSession(self, request, context):
        """ObtainPrimarySandboxSession returns a valid authenticated sandbox session
        on behalf of a developer. The sandbox session is tied to the developer's
        primary sandbox merchant account. Every developer has up to one primary
        sandbox merchant account.

        The primary sandbox session is primarily used to configure a developer's
        sandbox integrations, which are all stored in the sandbox environment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSandboxOtk': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSandboxOtk,
                    request_deserializer=squareup_dot_sandcastle_dot_auth_dot_create__sandbox__otk__pb2.CreateSandboxOtkRequest.FromString,
                    response_serializer=squareup_dot_sandcastle_dot_auth_dot_create__sandbox__otk__pb2.CreateSandboxOtkResponse.SerializeToString,
            ),
            'ExchangeSandboxOtkForSession': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeSandboxOtkForSession,
                    request_deserializer=squareup_dot_sandcastle_dot_auth_dot_exchange__sandbox__otk__for__session__pb2.ExchangeSandboxOtkForSessionRequest.FromString,
                    response_serializer=squareup_dot_sandcastle_dot_auth_dot_exchange__sandbox__otk__for__session__pb2.ExchangeSandboxOtkForSessionResponse.SerializeToString,
            ),
            'ObtainPrimarySandboxSession': grpc.unary_unary_rpc_method_handler(
                    servicer.ObtainPrimarySandboxSession,
                    request_deserializer=squareup_dot_sandcastle_dot_auth_dot_obtain__primary__sandbox__session__pb2.ObtainPrimarySandboxSessionRequest.FromString,
                    response_serializer=squareup_dot_sandcastle_dot_auth_dot_obtain__primary__sandbox__session__pb2.ObtainPrimarySandboxSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.sandcastle.service.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateSandboxOtk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sandcastle.service.AuthService/CreateSandboxOtk',
            squareup_dot_sandcastle_dot_auth_dot_create__sandbox__otk__pb2.CreateSandboxOtkRequest.SerializeToString,
            squareup_dot_sandcastle_dot_auth_dot_create__sandbox__otk__pb2.CreateSandboxOtkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeSandboxOtkForSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sandcastle.service.AuthService/ExchangeSandboxOtkForSession',
            squareup_dot_sandcastle_dot_auth_dot_exchange__sandbox__otk__for__session__pb2.ExchangeSandboxOtkForSessionRequest.SerializeToString,
            squareup_dot_sandcastle_dot_auth_dot_exchange__sandbox__otk__for__session__pb2.ExchangeSandboxOtkForSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObtainPrimarySandboxSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sandcastle.service.AuthService/ObtainPrimarySandboxSession',
            squareup_dot_sandcastle_dot_auth_dot_obtain__primary__sandbox__session__pb2.ObtainPrimarySandboxSessionRequest.SerializeToString,
            squareup_dot_sandcastle_dot_auth_dot_obtain__primary__sandbox__session__pb2.ObtainPrimarySandboxSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.taxinator import service_pb2 as squareup_dot_taxinator_dot_service__pb2


class TaxinatorServiceStub(object):
    """Defines the Taxinator service API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ComputeAndCommitTax = channel.unary_unary(
                '/squareup.taxinator.service.TaxinatorService/ComputeAndCommitTax',
                request_serializer=squareup_dot_taxinator_dot_service__pb2.ComputeAndCommitTaxRequest.SerializeToString,
                response_deserializer=squareup_dot_taxinator_dot_service__pb2.ComputeAndCommitTaxResponse.FromString,
                )
        self.EstimateTax = channel.unary_unary(
                '/squareup.taxinator.service.TaxinatorService/EstimateTax',
                request_serializer=squareup_dot_taxinator_dot_service__pb2.EstimateTaxRequest.SerializeToString,
                response_deserializer=squareup_dot_taxinator_dot_service__pb2.EstimateTaxResponse.FromString,
                )


class TaxinatorServiceServicer(object):
    """Defines the Taxinator service API.
    """

    def ComputeAndCommitTax(self, request, context):
        """The ComputeAndCommitTax API.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EstimateTax(self, request, context):
        """The EstimateTax API.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaxinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ComputeAndCommitTax': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeAndCommitTax,
                    request_deserializer=squareup_dot_taxinator_dot_service__pb2.ComputeAndCommitTaxRequest.FromString,
                    response_serializer=squareup_dot_taxinator_dot_service__pb2.ComputeAndCommitTaxResponse.SerializeToString,
            ),
            'EstimateTax': grpc.unary_unary_rpc_method_handler(
                    servicer.EstimateTax,
                    request_deserializer=squareup_dot_taxinator_dot_service__pb2.EstimateTaxRequest.FromString,
                    response_serializer=squareup_dot_taxinator_dot_service__pb2.EstimateTaxResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.taxinator.service.TaxinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaxinatorService(object):
    """Defines the Taxinator service API.
    """

    @staticmethod
    def ComputeAndCommitTax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.taxinator.service.TaxinatorService/ComputeAndCommitTax',
            squareup_dot_taxinator_dot_service__pb2.ComputeAndCommitTaxRequest.SerializeToString,
            squareup_dot_taxinator_dot_service__pb2.ComputeAndCommitTaxResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EstimateTax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.taxinator.service.TaxinatorService/EstimateTax',
            squareup_dot_taxinator_dot_service__pb2.EstimateTaxRequest.SerializeToString,
            squareup_dot_taxinator_dot_service__pb2.EstimateTaxResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

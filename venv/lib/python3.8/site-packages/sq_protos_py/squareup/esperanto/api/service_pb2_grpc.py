# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.esperanto.api import auth_pb2 as squareup_dot_esperanto_dot_api_dot_auth__pb2
from sq_protos_py.squareup.esperanto.api import capture_pb2 as squareup_dot_esperanto_dot_api_dot_capture__pb2
from sq_protos_py.squareup.esperanto.api import card_fingerprints_pb2 as squareup_dot_esperanto_dot_api_dot_card__fingerprints__pb2
from sq_protos_py.squareup.esperanto.api import complete_or_cancel_recorded_pb2 as squareup_dot_esperanto_dot_api_dot_complete__or__cancel__recorded__pb2
from sq_protos_py.squareup.esperanto.api import create_bank_transaction_reservation_pb2 as squareup_dot_esperanto_dot_api_dot_create__bank__transaction__reservation__pb2
from sq_protos_py.squareup.esperanto.api import create_recorded_pb2 as squareup_dot_esperanto_dot_api_dot_create__recorded__pb2
from sq_protos_py.squareup.esperanto.api import fee_events_pb2 as squareup_dot_esperanto_dot_api_dot_fee__events__pb2
from sq_protos_py.squareup.esperanto.api import finalize_bank_transaction_pb2 as squareup_dot_esperanto_dot_api_dot_finalize__bank__transaction__pb2
from sq_protos_py.squareup.esperanto.api import getpayment_pb2 as squareup_dot_esperanto_dot_api_dot_getpayment__pb2
from sq_protos_py.squareup.esperanto.api import itemization_pb2 as squareup_dot_esperanto_dot_api_dot_itemization__pb2
from sq_protos_py.squareup.esperanto.api import payment_fraud_taxonomy_pb2 as squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2
from sq_protos_py.squareup.esperanto.api import payment_risk_details_pb2 as squareup_dot_esperanto_dot_api_dot_payment__risk__details__pb2
from sq_protos_py.squareup.esperanto.api import push_money_pb2 as squareup_dot_esperanto_dot_api_dot_push__money__pb2
from sq_protos_py.squareup.esperanto.api import record_failed_authorization_pb2 as squareup_dot_esperanto_dot_api_dot_record__failed__authorization__pb2
from sq_protos_py.squareup.esperanto.api import refund_bank_transaction_pb2 as squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2
from sq_protos_py.squareup.esperanto.api import refund_pb2 as squareup_dot_esperanto_dot_api_dot_refund__pb2
from sq_protos_py.squareup.esperanto.api import refund_recorded_pb2 as squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2
from sq_protos_py.squareup.esperanto.api import reverse_pb2 as squareup_dot_esperanto_dot_api_dot_reverse__pb2
from sq_protos_py.squareup.esperanto.api import send_bank_transaction_pb2 as squareup_dot_esperanto_dot_api_dot_send__bank__transaction__pb2
from sq_protos_py.squareup.esperanto.api import send_bank_transaction_refund_pb2 as squareup_dot_esperanto_dot_api_dot_send__bank__transaction__refund__pb2
from sq_protos_py.squareup.esperanto.api import set_metadata_pb2 as squareup_dot_esperanto_dot_api_dot_set__metadata__pb2
from sq_protos_py.squareup.esperanto.api import set_refund_metadata_pb2 as squareup_dot_esperanto_dot_api_dot_set__refund__metadata__pb2
from sq_protos_py.squareup.esperanto.api import unlinked_refund_pb2 as squareup_dot_esperanto_dot_api_dot_unlinked__refund__pb2
from sq_protos_py.squareup.esperanto.api import update_payment_pb2 as squareup_dot_esperanto_dot_api_dot_update__payment__pb2
from sq_protos_py.squareup.esperanto.api import verify_pb2 as squareup_dot_esperanto_dot_api_dot_verify__pb2


class PaymentServiceStub(object):
    """*
    Esperanto's main PaymentService. Esperanto supports highly-available active-active deployment
    across multiple datacenters, which means there are several nuances to how requests are processed.

    Methods which use the {@code squareup.sake.idempotent} option are considered idempotent, and
    can be retried. Otherwise methods are not idempotent.

    Some methods, however, are described as implementing "best-effort idempotency", meaning they will
    return a previously processed response idempotently, if it is locally available. However, due to
    Esperanto's active-active deployment, this is not always possible, due to async cross datacenter
    propagation. Requests to these methods can be retried safely, with the caveat that the results
    may not always be the same. In this case, duplicate results can be returned for the same request,
    which we refer to as duplicate created payments (or specifically "duplicate auths" in the case of
    card payments via the {@code Authorization} method).

    In the case of duplicate created payments, Esperanto will make an attempt to reverse (or cancel)
    unused duplicates. To do this, it must wait until one (and only one) of the duplicates is used by
    the client for subsequent requests. The selected result is said to be "progressed", after which
    an asynchronous process is initiated to reverse any remaining duplicates. This effectively
    protects against the possibility of problems, like a "double capture", to the extent possible,
    given the async nature of the process, and dependent on the assumption of well-behaved clients
    which shouldn't attempt to progress multiple duplicate payments.

    Methods which result in "progressing" a payment's state, are marked as such, and can be assumed
    to result in this asynchronous reversing/canceling of duplicate payments.

    Some of the methods are described as enqueuing the request for "async offline processing". This
    means they enqueue the incoming request, but return a synchronous result to the caller
    immediately. Thus a successful response only indicates the request was successfully received, and
    doesn't indicate whether the eventual async operation will be successful. This means the request
    could silently fail asynchronously. Clients should manage the lifecycle of these submitted
    requests to ensure that they are in the expected state for a successful outcome.

    Methods which require a call to an external gateway, have a long timeout set that is derived from
    the the downstream gateway timeout + 1. (See usage of the {@code squareup.sake.timeout} option).

    Methods which require a minimum time to complete, use a minimum deadline short-circuit option to
    reject requests that otherwise wouldn't have enough time to complete, based on the incoming
    deadline. (See usage of the {@code squareup.sake.minimum_deadline_millis} option).

    Presentation on the use of minimum deadlines is here:
    https://docs.google.com/presentation/d/19-TrqYtEwq1N4JSqFNEkS2abVRpGjk_7w6bxVZWkVjA
    Analysis and calculations for determining good minimum deadline values for different methods:
    https://docs.google.com/spreadsheets/d/1pZatqqHeqNCqGIKpK7dvbHAviS9S1ElCygqGPrYjmKs
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authorization = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/Authorization',
                request_serializer=squareup_dot_esperanto_dot_api_dot_auth__pb2.AuthorizationRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_auth__pb2.AuthorizationResponse.FromString,
                )
        self.Capture = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/Capture',
                request_serializer=squareup_dot_esperanto_dot_api_dot_capture__pb2.CaptureRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_capture__pb2.CaptureResponse.FromString,
                )
        self.Reverse = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/Reverse',
                request_serializer=squareup_dot_esperanto_dot_api_dot_reverse__pb2.ReverseRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_reverse__pb2.ReverseResponse.FromString,
                )
        self.Refund = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/Refund',
                request_serializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundResponse.FromString,
                )
        self.RefundReservation = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/RefundReservation',
                request_serializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReservationRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReservationResponse.FromString,
                )
        self.RefundReversal = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/RefundReversal',
                request_serializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReversalRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReversalResponse.FromString,
                )
        self.RefundCompletion = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/RefundCompletion',
                request_serializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundCompletionRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundCompletionResponse.FromString,
                )
        self.UnlinkedRefund = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/UnlinkedRefund',
                request_serializer=squareup_dot_esperanto_dot_api_dot_unlinked__refund__pb2.UnlinkedRefundRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_unlinked__refund__pb2.UnlinkedRefundResponse.FromString,
                )
        self.Verification = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/Verification',
                request_serializer=squareup_dot_esperanto_dot_api_dot_verify__pb2.VerificationRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_verify__pb2.VerificationResponse.FromString,
                )
        self.PushMoney = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/PushMoney',
                request_serializer=squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyResponse.FromString,
                )
        self.PushMoneyUsingRouter = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/PushMoneyUsingRouter',
                request_serializer=squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyResponse.FromString,
                )
        self.GetPayment = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/GetPayment',
                request_serializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentResponse.FromString,
                )
        self.UpdatePayment = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/UpdatePayment',
                request_serializer=squareup_dot_esperanto_dot_api_dot_update__payment__pb2.UpdatePaymentRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_update__payment__pb2.UpdatePaymentResponse.FromString,
                )
        self.CreateRecordedTransaction = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/CreateRecordedTransaction',
                request_serializer=squareup_dot_esperanto_dot_api_dot_create__recorded__pb2.CreateRecordedTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_create__recorded__pb2.CreateRecordedTransactionResponse.FromString,
                )
        self.CompleteOrCancelRecordedTransaction = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/CompleteOrCancelRecordedTransaction',
                request_serializer=squareup_dot_esperanto_dot_api_dot_complete__or__cancel__recorded__pb2.CompleteOrCancelRecordedTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_complete__or__cancel__recorded__pb2.CompleteOrCancelRecordedTransactionResponse.FromString,
                )
        self.RefundRecordedTransaction = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/RefundRecordedTransaction',
                request_serializer=squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.RefundRecordedTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.RefundRecordedTransactionResponse.FromString,
                )
        self.CompleteOrCancelRecordedRefund = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/CompleteOrCancelRecordedRefund',
                request_serializer=squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.CompleteOrCancelRecordedRefundRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.CompleteOrCancelRecordedRefundResponse.FromString,
                )
        self.CreateBankTransactionReservation = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/CreateBankTransactionReservation',
                request_serializer=squareup_dot_esperanto_dot_api_dot_create__bank__transaction__reservation__pb2.CreateBankTransactionReservationRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_create__bank__transaction__reservation__pb2.CreateBankTransactionReservationResponse.FromString,
                )
        self.SendBankTransaction = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/SendBankTransaction',
                request_serializer=squareup_dot_esperanto_dot_api_dot_send__bank__transaction__pb2.SendBankTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_send__bank__transaction__pb2.SendBankTransactionResponse.FromString,
                )
        self.FinalizeBankTransaction = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/FinalizeBankTransaction',
                request_serializer=squareup_dot_esperanto_dot_api_dot_finalize__bank__transaction__pb2.FinalizeBankTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_finalize__bank__transaction__pb2.FinalizeBankTransactionResponse.FromString,
                )
        self.CreateBankTransactionRefund = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/CreateBankTransactionRefund',
                request_serializer=squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.CreateBankTransactionRefundRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.CreateBankTransactionRefundResponse.FromString,
                )
        self.SendBankTransactionRefund = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/SendBankTransactionRefund',
                request_serializer=squareup_dot_esperanto_dot_api_dot_send__bank__transaction__refund__pb2.SendBankTransactionRefundRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_send__bank__transaction__refund__pb2.SendBankTransactionRefundResponse.FromString,
                )
        self.FinalizeBankTransactionRefund = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/FinalizeBankTransactionRefund',
                request_serializer=squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.FinalizeBankTransactionRefundRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.FinalizeBankTransactionRefundResponse.FromString,
                )
        self.SetMetadata = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/SetMetadata',
                request_serializer=squareup_dot_esperanto_dot_api_dot_set__metadata__pb2.SetMetadataRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_set__metadata__pb2.SetMetadataResponse.FromString,
                )
        self.SetRefundMetadata = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/SetRefundMetadata',
                request_serializer=squareup_dot_esperanto_dot_api_dot_set__refund__metadata__pb2.SetRefundMetadataRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_set__refund__metadata__pb2.SetRefundMetadataResponse.FromString,
                )
        self.AddFeeEvents = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/AddFeeEvents',
                request_serializer=squareup_dot_esperanto_dot_api_dot_fee__events__pb2.AddFeeEventsRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_fee__events__pb2.AddFeeEventsResponse.FromString,
                )
        self.RecordFailedAuthorization = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/RecordFailedAuthorization',
                request_serializer=squareup_dot_esperanto_dot_api_dot_record__failed__authorization__pb2.RecordFailedAuthorizationRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_record__failed__authorization__pb2.RecordFailedAuthorizationResponse.FromString,
                )
        self.SetFraudTaxonomy = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/SetFraudTaxonomy',
                request_serializer=squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.SetFraudTaxonomyRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.SetFraudTaxonomyResponse.FromString,
                )
        self.RemoveFraudTaxonomy = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/RemoveFraudTaxonomy',
                request_serializer=squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.RemoveFraudTaxonomyRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.RemoveFraudTaxonomyResponse.FromString,
                )
        self.SetRiskDetails = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/SetRiskDetails',
                request_serializer=squareup_dot_esperanto_dot_api_dot_payment__risk__details__pb2.SetRiskDetailsRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_payment__risk__details__pb2.SetRiskDetailsResponse.FromString,
                )
        self.SetItemizationData = channel.unary_unary(
                '/squareup.esperanto.api.PaymentService/SetItemizationData',
                request_serializer=squareup_dot_esperanto_dot_api_dot_itemization__pb2.SetItemizationDataRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_itemization__pb2.SetItemizationDataResponse.FromString,
                )


class PaymentServiceServicer(object):
    """*
    Esperanto's main PaymentService. Esperanto supports highly-available active-active deployment
    across multiple datacenters, which means there are several nuances to how requests are processed.

    Methods which use the {@code squareup.sake.idempotent} option are considered idempotent, and
    can be retried. Otherwise methods are not idempotent.

    Some methods, however, are described as implementing "best-effort idempotency", meaning they will
    return a previously processed response idempotently, if it is locally available. However, due to
    Esperanto's active-active deployment, this is not always possible, due to async cross datacenter
    propagation. Requests to these methods can be retried safely, with the caveat that the results
    may not always be the same. In this case, duplicate results can be returned for the same request,
    which we refer to as duplicate created payments (or specifically "duplicate auths" in the case of
    card payments via the {@code Authorization} method).

    In the case of duplicate created payments, Esperanto will make an attempt to reverse (or cancel)
    unused duplicates. To do this, it must wait until one (and only one) of the duplicates is used by
    the client for subsequent requests. The selected result is said to be "progressed", after which
    an asynchronous process is initiated to reverse any remaining duplicates. This effectively
    protects against the possibility of problems, like a "double capture", to the extent possible,
    given the async nature of the process, and dependent on the assumption of well-behaved clients
    which shouldn't attempt to progress multiple duplicate payments.

    Methods which result in "progressing" a payment's state, are marked as such, and can be assumed
    to result in this asynchronous reversing/canceling of duplicate payments.

    Some of the methods are described as enqueuing the request for "async offline processing". This
    means they enqueue the incoming request, but return a synchronous result to the caller
    immediately. Thus a successful response only indicates the request was successfully received, and
    doesn't indicate whether the eventual async operation will be successful. This means the request
    could silently fail asynchronously. Clients should manage the lifecycle of these submitted
    requests to ensure that they are in the expected state for a successful outcome.

    Methods which require a call to an external gateway, have a long timeout set that is derived from
    the the downstream gateway timeout + 1. (See usage of the {@code squareup.sake.timeout} option).

    Methods which require a minimum time to complete, use a minimum deadline short-circuit option to
    reject requests that otherwise wouldn't have enough time to complete, based on the incoming
    deadline. (See usage of the {@code squareup.sake.minimum_deadline_millis} option).

    Presentation on the use of minimum deadlines is here:
    https://docs.google.com/presentation/d/19-TrqYtEwq1N4JSqFNEkS2abVRpGjk_7w6bxVZWkVjA
    Analysis and calculations for determining good minimum deadline values for different methods:
    https://docs.google.com/spreadsheets/d/1pZatqqHeqNCqGIKpK7dvbHAviS9S1ElCygqGPrYjmKs
    """

    def Authorization(self, request, context):
        """*
        Create a payment authorization.

        Note, this method uses "best-effort idempotency". Thus it is possible in certain edge cases to
        end up with "duplicate authorizations" for the same request (based on the request
        {@code client_payment_key}).

        See descriptions of the {@code Capture} and {@code Reverse} methods for dealing with duplicate
        authorizations.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Capture(self, request, context):
        """*
        Capture a payment authorization.

        This method enqueues requests for async offline processing.

        This method progresses the payment state, resulting in duplicate auth reversals.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reverse(self, request, context):
        """*
        Reverse a payment authorization. This is also commonly referred to as "Voiding" or "Canceling"
        an authorization.

        The {@code ReverseRequest} can target a payment by specifying either a {@code payment_id}, or
        the {@code client_payment_key} that a payment was created with.

        This method usually enqueues requests for async offline processing, but this can be overridden.
        It will use synchronous "online" processing, if {@code options.online = true} is set on the
        incoming {@code ReverseRequest} request.

        This method progresses the payment state, resulting in reversals of all duplicate auths.

        TODO(jbr): document that this can also be applied to PushMoney's
        TODO(jbr): because the idempotency retry timeouts should be so different between online/offline
        reverses, we should probably define separate rpc methods here, so we can have a short retry
        timeout for offline reverses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Refund(self, request, context):
        """*
        Refund a payment. This method bypasses a 2-step refund reservation/completion.

        This method enqueues requests for async offline processing.

        @Deprecated in favor of the 2-step refund reservation-completion (or reversal) methods.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefundReservation(self, request, context):
        """*
        Create a refund reservation. If successful, the reservation can then be completed or reversed,
        typically after undergoing a pending review process.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefundReversal(self, request, context):
        """*
        Reverse a refund reservation. This will essentially cancel a refund reservation prior to
        completion, typically in response to a failed review process. Once reversed, an attempt to
        complete a refund reservation will be ignored.

        This method enqueues requests for async offline processing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefundCompletion(self, request, context):
        """*
        Complete a refund reservation. This will initiate the actual processing of a refund, typically
        in response to a successful review process. Once completed, an attempt to reverse a refund
        reservation will be ignored.

        This method enqueues requests for offline async processing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlinkedRefund(self, request, context):
        """*
        Creates an unlinked refund. An unlinked refund is a refund which requires no reference to a
        previously authorized or captured payment.

        This method enqueues requests for offline async processing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Verification(self, request, context):
        """* Verify that a given payment source is valid. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushMoney(self, request, context):
        """* Push money to a card via an original credit transaction. 

        TODO(jbr): document idempotency (or lack thereof)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushMoneyUsingRouter(self, request, context):
        """*
        Push money to a card via an original credit transaction.
        This is like {@ link PushMoney}, except that it will try multiple routes before failing.

        TODO(acrowe) this should eventually merge with PushMoney
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPayment(self, request, context):
        """* Retrieve a payment by payment id 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePayment(self, request, context):
        """* Update Payment fields 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRecordedTransaction(self, request, context):
        """* Create RecordedTransaction 

        TODO(jbr, laurenc): implement/document proper "best-effort" idempotency
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteOrCancelRecordedTransaction(self, request, context):
        """* Complete or Cancel a RecordedTransaction 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefundRecordedTransaction(self, request, context):
        """* Refund a RecordedTransaction 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteOrCancelRecordedRefund(self, request, context):
        """* Complete or Cancel a RecordedTransaction Refund
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBankTransactionReservation(self, request, context):
        """* Creates a reservation for a bank transaction payment. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendBankTransaction(self, request, context):
        """* Sends a bank transaction to Teller. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinalizeBankTransaction(self, request, context):
        """* Finalizes a bank transaction payment. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBankTransactionRefund(self, request, context):
        """*
        Creates a bank transaction refund record. Note this does not execute the refund, but rather
        serves as a record of intent while refund risk reviews are conducted. (Refund execution can be
        initiated later via the SendBankTransactionRefund RPC.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendBankTransactionRefund(self, request, context):
        """* Sends a bank transaction refund to Teller. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinalizeBankTransactionRefund(self, request, context):
        """*
        Marks a bank transaction refund record as succeeded or failed. Should be called only after
        obtaining a response from the SendBankTransactionRefund RPC.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMetadata(self, request, context):
        """*
        Set metadata on the payment.

        This method enqueues requests for offline async processing.

        This method progresses the payment state, resulting in duplicate auth reversals.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRefundMetadata(self, request, context):
        """*
        Set refund metadata on the payment refund.

        This method enqueues requests for offline async processing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddFeeEvents(self, request, context):
        """*
        Add fee events to a payment. This method is idempotent: if called twice with the
        same request the second call will be ignored. A FeeEvent will only be added to a payment
        once. If multiple calls are made where some of the events are repeated the union of the events
        will be stored.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordFailedAuthorization(self, request, context):
        """*
        Record an authorization that failed front-end validation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFraudTaxonomy(self, request, context):
        """* Alter the Fraud Taxonomy field in a payment record 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFraudTaxonomy(self, request, context):
        """* Remove Fraud Taxonomy field from a payment record 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRiskDetails(self, request, context):
        """*
        Set the external risk evaluation details field of the payment record.
        This endpoint is intended to be used when riskarbiter fails to provide the data during
        synchronous evaluation, or if we need to make any ammendments.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetItemizationData(self, request, context):
        """* Set itemization data in batch on payment records 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authorization': grpc.unary_unary_rpc_method_handler(
                    servicer.Authorization,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_auth__pb2.AuthorizationRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_auth__pb2.AuthorizationResponse.SerializeToString,
            ),
            'Capture': grpc.unary_unary_rpc_method_handler(
                    servicer.Capture,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_capture__pb2.CaptureRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_capture__pb2.CaptureResponse.SerializeToString,
            ),
            'Reverse': grpc.unary_unary_rpc_method_handler(
                    servicer.Reverse,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_reverse__pb2.ReverseRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_reverse__pb2.ReverseResponse.SerializeToString,
            ),
            'Refund': grpc.unary_unary_rpc_method_handler(
                    servicer.Refund,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundResponse.SerializeToString,
            ),
            'RefundReservation': grpc.unary_unary_rpc_method_handler(
                    servicer.RefundReservation,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReservationRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReservationResponse.SerializeToString,
            ),
            'RefundReversal': grpc.unary_unary_rpc_method_handler(
                    servicer.RefundReversal,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReversalRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReversalResponse.SerializeToString,
            ),
            'RefundCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.RefundCompletion,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundCompletionRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundCompletionResponse.SerializeToString,
            ),
            'UnlinkedRefund': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlinkedRefund,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_unlinked__refund__pb2.UnlinkedRefundRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_unlinked__refund__pb2.UnlinkedRefundResponse.SerializeToString,
            ),
            'Verification': grpc.unary_unary_rpc_method_handler(
                    servicer.Verification,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_verify__pb2.VerificationRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_verify__pb2.VerificationResponse.SerializeToString,
            ),
            'PushMoney': grpc.unary_unary_rpc_method_handler(
                    servicer.PushMoney,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyResponse.SerializeToString,
            ),
            'PushMoneyUsingRouter': grpc.unary_unary_rpc_method_handler(
                    servicer.PushMoneyUsingRouter,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyResponse.SerializeToString,
            ),
            'GetPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPayment,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentResponse.SerializeToString,
            ),
            'UpdatePayment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePayment,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_update__payment__pb2.UpdatePaymentRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_update__payment__pb2.UpdatePaymentResponse.SerializeToString,
            ),
            'CreateRecordedTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRecordedTransaction,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_create__recorded__pb2.CreateRecordedTransactionRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_create__recorded__pb2.CreateRecordedTransactionResponse.SerializeToString,
            ),
            'CompleteOrCancelRecordedTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteOrCancelRecordedTransaction,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_complete__or__cancel__recorded__pb2.CompleteOrCancelRecordedTransactionRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_complete__or__cancel__recorded__pb2.CompleteOrCancelRecordedTransactionResponse.SerializeToString,
            ),
            'RefundRecordedTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.RefundRecordedTransaction,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.RefundRecordedTransactionRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.RefundRecordedTransactionResponse.SerializeToString,
            ),
            'CompleteOrCancelRecordedRefund': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteOrCancelRecordedRefund,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.CompleteOrCancelRecordedRefundRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.CompleteOrCancelRecordedRefundResponse.SerializeToString,
            ),
            'CreateBankTransactionReservation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBankTransactionReservation,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_create__bank__transaction__reservation__pb2.CreateBankTransactionReservationRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_create__bank__transaction__reservation__pb2.CreateBankTransactionReservationResponse.SerializeToString,
            ),
            'SendBankTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.SendBankTransaction,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_send__bank__transaction__pb2.SendBankTransactionRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_send__bank__transaction__pb2.SendBankTransactionResponse.SerializeToString,
            ),
            'FinalizeBankTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.FinalizeBankTransaction,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_finalize__bank__transaction__pb2.FinalizeBankTransactionRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_finalize__bank__transaction__pb2.FinalizeBankTransactionResponse.SerializeToString,
            ),
            'CreateBankTransactionRefund': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBankTransactionRefund,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.CreateBankTransactionRefundRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.CreateBankTransactionRefundResponse.SerializeToString,
            ),
            'SendBankTransactionRefund': grpc.unary_unary_rpc_method_handler(
                    servicer.SendBankTransactionRefund,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_send__bank__transaction__refund__pb2.SendBankTransactionRefundRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_send__bank__transaction__refund__pb2.SendBankTransactionRefundResponse.SerializeToString,
            ),
            'FinalizeBankTransactionRefund': grpc.unary_unary_rpc_method_handler(
                    servicer.FinalizeBankTransactionRefund,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.FinalizeBankTransactionRefundRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.FinalizeBankTransactionRefundResponse.SerializeToString,
            ),
            'SetMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMetadata,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_set__metadata__pb2.SetMetadataRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_set__metadata__pb2.SetMetadataResponse.SerializeToString,
            ),
            'SetRefundMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRefundMetadata,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_set__refund__metadata__pb2.SetRefundMetadataRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_set__refund__metadata__pb2.SetRefundMetadataResponse.SerializeToString,
            ),
            'AddFeeEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.AddFeeEvents,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_fee__events__pb2.AddFeeEventsRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_fee__events__pb2.AddFeeEventsResponse.SerializeToString,
            ),
            'RecordFailedAuthorization': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordFailedAuthorization,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_record__failed__authorization__pb2.RecordFailedAuthorizationRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_record__failed__authorization__pb2.RecordFailedAuthorizationResponse.SerializeToString,
            ),
            'SetFraudTaxonomy': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFraudTaxonomy,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.SetFraudTaxonomyRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.SetFraudTaxonomyResponse.SerializeToString,
            ),
            'RemoveFraudTaxonomy': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFraudTaxonomy,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.RemoveFraudTaxonomyRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.RemoveFraudTaxonomyResponse.SerializeToString,
            ),
            'SetRiskDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRiskDetails,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_payment__risk__details__pb2.SetRiskDetailsRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_payment__risk__details__pb2.SetRiskDetailsResponse.SerializeToString,
            ),
            'SetItemizationData': grpc.unary_unary_rpc_method_handler(
                    servicer.SetItemizationData,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_itemization__pb2.SetItemizationDataRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_itemization__pb2.SetItemizationDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.esperanto.api.PaymentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaymentService(object):
    """*
    Esperanto's main PaymentService. Esperanto supports highly-available active-active deployment
    across multiple datacenters, which means there are several nuances to how requests are processed.

    Methods which use the {@code squareup.sake.idempotent} option are considered idempotent, and
    can be retried. Otherwise methods are not idempotent.

    Some methods, however, are described as implementing "best-effort idempotency", meaning they will
    return a previously processed response idempotently, if it is locally available. However, due to
    Esperanto's active-active deployment, this is not always possible, due to async cross datacenter
    propagation. Requests to these methods can be retried safely, with the caveat that the results
    may not always be the same. In this case, duplicate results can be returned for the same request,
    which we refer to as duplicate created payments (or specifically "duplicate auths" in the case of
    card payments via the {@code Authorization} method).

    In the case of duplicate created payments, Esperanto will make an attempt to reverse (or cancel)
    unused duplicates. To do this, it must wait until one (and only one) of the duplicates is used by
    the client for subsequent requests. The selected result is said to be "progressed", after which
    an asynchronous process is initiated to reverse any remaining duplicates. This effectively
    protects against the possibility of problems, like a "double capture", to the extent possible,
    given the async nature of the process, and dependent on the assumption of well-behaved clients
    which shouldn't attempt to progress multiple duplicate payments.

    Methods which result in "progressing" a payment's state, are marked as such, and can be assumed
    to result in this asynchronous reversing/canceling of duplicate payments.

    Some of the methods are described as enqueuing the request for "async offline processing". This
    means they enqueue the incoming request, but return a synchronous result to the caller
    immediately. Thus a successful response only indicates the request was successfully received, and
    doesn't indicate whether the eventual async operation will be successful. This means the request
    could silently fail asynchronously. Clients should manage the lifecycle of these submitted
    requests to ensure that they are in the expected state for a successful outcome.

    Methods which require a call to an external gateway, have a long timeout set that is derived from
    the the downstream gateway timeout + 1. (See usage of the {@code squareup.sake.timeout} option).

    Methods which require a minimum time to complete, use a minimum deadline short-circuit option to
    reject requests that otherwise wouldn't have enough time to complete, based on the incoming
    deadline. (See usage of the {@code squareup.sake.minimum_deadline_millis} option).

    Presentation on the use of minimum deadlines is here:
    https://docs.google.com/presentation/d/19-TrqYtEwq1N4JSqFNEkS2abVRpGjk_7w6bxVZWkVjA
    Analysis and calculations for determining good minimum deadline values for different methods:
    https://docs.google.com/spreadsheets/d/1pZatqqHeqNCqGIKpK7dvbHAviS9S1ElCygqGPrYjmKs
    """

    @staticmethod
    def Authorization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/Authorization',
            squareup_dot_esperanto_dot_api_dot_auth__pb2.AuthorizationRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_auth__pb2.AuthorizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Capture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/Capture',
            squareup_dot_esperanto_dot_api_dot_capture__pb2.CaptureRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_capture__pb2.CaptureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reverse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/Reverse',
            squareup_dot_esperanto_dot_api_dot_reverse__pb2.ReverseRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_reverse__pb2.ReverseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Refund(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/Refund',
            squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefundReservation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/RefundReservation',
            squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReservationRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReservationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefundReversal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/RefundReversal',
            squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReversalRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundReversalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefundCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/RefundCompletion',
            squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundCompletionRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_refund__pb2.RefundCompletionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlinkedRefund(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/UnlinkedRefund',
            squareup_dot_esperanto_dot_api_dot_unlinked__refund__pb2.UnlinkedRefundRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_unlinked__refund__pb2.UnlinkedRefundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Verification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/Verification',
            squareup_dot_esperanto_dot_api_dot_verify__pb2.VerificationRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_verify__pb2.VerificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushMoney(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/PushMoney',
            squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushMoneyUsingRouter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/PushMoneyUsingRouter',
            squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_push__money__pb2.PushMoneyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/GetPayment',
            squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/UpdatePayment',
            squareup_dot_esperanto_dot_api_dot_update__payment__pb2.UpdatePaymentRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_update__payment__pb2.UpdatePaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRecordedTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/CreateRecordedTransaction',
            squareup_dot_esperanto_dot_api_dot_create__recorded__pb2.CreateRecordedTransactionRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_create__recorded__pb2.CreateRecordedTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteOrCancelRecordedTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/CompleteOrCancelRecordedTransaction',
            squareup_dot_esperanto_dot_api_dot_complete__or__cancel__recorded__pb2.CompleteOrCancelRecordedTransactionRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_complete__or__cancel__recorded__pb2.CompleteOrCancelRecordedTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefundRecordedTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/RefundRecordedTransaction',
            squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.RefundRecordedTransactionRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.RefundRecordedTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteOrCancelRecordedRefund(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/CompleteOrCancelRecordedRefund',
            squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.CompleteOrCancelRecordedRefundRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_refund__recorded__pb2.CompleteOrCancelRecordedRefundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBankTransactionReservation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/CreateBankTransactionReservation',
            squareup_dot_esperanto_dot_api_dot_create__bank__transaction__reservation__pb2.CreateBankTransactionReservationRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_create__bank__transaction__reservation__pb2.CreateBankTransactionReservationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendBankTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/SendBankTransaction',
            squareup_dot_esperanto_dot_api_dot_send__bank__transaction__pb2.SendBankTransactionRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_send__bank__transaction__pb2.SendBankTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinalizeBankTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/FinalizeBankTransaction',
            squareup_dot_esperanto_dot_api_dot_finalize__bank__transaction__pb2.FinalizeBankTransactionRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_finalize__bank__transaction__pb2.FinalizeBankTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBankTransactionRefund(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/CreateBankTransactionRefund',
            squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.CreateBankTransactionRefundRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.CreateBankTransactionRefundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendBankTransactionRefund(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/SendBankTransactionRefund',
            squareup_dot_esperanto_dot_api_dot_send__bank__transaction__refund__pb2.SendBankTransactionRefundRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_send__bank__transaction__refund__pb2.SendBankTransactionRefundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinalizeBankTransactionRefund(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/FinalizeBankTransactionRefund',
            squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.FinalizeBankTransactionRefundRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_refund__bank__transaction__pb2.FinalizeBankTransactionRefundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/SetMetadata',
            squareup_dot_esperanto_dot_api_dot_set__metadata__pb2.SetMetadataRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_set__metadata__pb2.SetMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRefundMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/SetRefundMetadata',
            squareup_dot_esperanto_dot_api_dot_set__refund__metadata__pb2.SetRefundMetadataRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_set__refund__metadata__pb2.SetRefundMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddFeeEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/AddFeeEvents',
            squareup_dot_esperanto_dot_api_dot_fee__events__pb2.AddFeeEventsRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_fee__events__pb2.AddFeeEventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordFailedAuthorization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/RecordFailedAuthorization',
            squareup_dot_esperanto_dot_api_dot_record__failed__authorization__pb2.RecordFailedAuthorizationRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_record__failed__authorization__pb2.RecordFailedAuthorizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetFraudTaxonomy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/SetFraudTaxonomy',
            squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.SetFraudTaxonomyRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.SetFraudTaxonomyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveFraudTaxonomy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/RemoveFraudTaxonomy',
            squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.RemoveFraudTaxonomyRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_payment__fraud__taxonomy__pb2.RemoveFraudTaxonomyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRiskDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/SetRiskDetails',
            squareup_dot_esperanto_dot_api_dot_payment__risk__details__pb2.SetRiskDetailsRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_payment__risk__details__pb2.SetRiskDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetItemizationData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentService/SetItemizationData',
            squareup_dot_esperanto_dot_api_dot_itemization__pb2.SetItemizationDataRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_itemization__pb2.SetItemizationDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PaymentDataServiceStub(object):
    """*
    Payments API only exposing the data, instead of the payments verbs.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPaymentRaw = channel.unary_unary(
                '/squareup.esperanto.api.PaymentDataService/GetPaymentRaw',
                request_serializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentResponse.FromString,
                )
        self.GetPaymentsRaw = channel.unary_unary(
                '/squareup.esperanto.api.PaymentDataService/GetPaymentsRaw',
                request_serializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentsRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentsResponse.FromString,
                )
        self.GetPaymentRedacted = channel.unary_unary(
                '/squareup.esperanto.api.PaymentDataService/GetPaymentRedacted',
                request_serializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentResponse.FromString,
                )
        self.GetCardFingerprints = channel.unary_unary(
                '/squareup.esperanto.api.PaymentDataService/GetCardFingerprints',
                request_serializer=squareup_dot_esperanto_dot_api_dot_card__fingerprints__pb2.GetCardFingerprintsRequest.SerializeToString,
                response_deserializer=squareup_dot_esperanto_dot_api_dot_card__fingerprints__pb2.GetCardFingerprintsResponse.FromString,
                )


class PaymentDataServiceServicer(object):
    """*
    Payments API only exposing the data, instead of the payments verbs.
    """

    def GetPaymentRaw(self, request, context):
        """* Retrieve a payment by payment id 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPaymentsRaw(self, request, context):
        """* Retrieve multiple payments by payment id 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPaymentRedacted(self, request, context):
        """* Retrieve a payment by payment id, redacting PIIs 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCardFingerprints(self, request, context):
        """* Retrieve card fingerprints 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPaymentRaw': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentRaw,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentResponse.SerializeToString,
            ),
            'GetPaymentsRaw': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentsRaw,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentsRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentsResponse.SerializeToString,
            ),
            'GetPaymentRedacted': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentRedacted,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentResponse.SerializeToString,
            ),
            'GetCardFingerprints': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCardFingerprints,
                    request_deserializer=squareup_dot_esperanto_dot_api_dot_card__fingerprints__pb2.GetCardFingerprintsRequest.FromString,
                    response_serializer=squareup_dot_esperanto_dot_api_dot_card__fingerprints__pb2.GetCardFingerprintsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.esperanto.api.PaymentDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaymentDataService(object):
    """*
    Payments API only exposing the data, instead of the payments verbs.
    """

    @staticmethod
    def GetPaymentRaw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentDataService/GetPaymentRaw',
            squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPaymentsRaw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentDataService/GetPaymentsRaw',
            squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentsRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPaymentRedacted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentDataService/GetPaymentRedacted',
            squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_getpayment__pb2.GetPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCardFingerprints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.esperanto.api.PaymentDataService/GetCardFingerprints',
            squareup_dot_esperanto_dot_api_dot_card__fingerprints__pb2.GetCardFingerprintsRequest.SerializeToString,
            squareup_dot_esperanto_dot_api_dot_card__fingerprints__pb2.GetCardFingerprintsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

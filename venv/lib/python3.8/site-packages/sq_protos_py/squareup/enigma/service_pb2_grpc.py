# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.enigma import service_pb2 as squareup_dot_enigma_dot_service__pb2


class SecureSessionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DecodeSessionRequest = channel.unary_unary(
                '/squareup.enigma.service.SecureSessionService/DecodeSessionRequest',
                request_serializer=squareup_dot_enigma_dot_service__pb2.DecodeSessionRequestRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.DecodeSessionRequestResponse.FromString,
                )
        self.EncodeSessionApprove = channel.unary_unary(
                '/squareup.enigma.service.SecureSessionService/EncodeSessionApprove',
                request_serializer=squareup_dot_enigma_dot_service__pb2.EncodeSessionApproveRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.EncodeSessionApproveResponse.FromString,
                )
        self.DeriveAppKey = channel.unary_unary(
                '/squareup.enigma.service.SecureSessionService/DeriveAppKey',
                request_serializer=squareup_dot_enigma_dot_service__pb2.DeriveAppKeyRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.DeriveAppKeyResponse.FromString,
                )
        self.DeriveMsCommsKey = channel.unary_unary(
                '/squareup.enigma.service.SecureSessionService/DeriveMsCommsKey',
                request_serializer=squareup_dot_enigma_dot_service__pb2.DeriveMsCommsKeyRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.DeriveMsCommsKeyResponse.FromString,
                )


class SecureSessionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DecodeSessionRequest(self, request, context):
        """*
        Decodes a secure_session_init_data message from a Square reader (for Square POS or paySDK builds).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncodeSessionApprove(self, request, context):
        """*
        Encodes a secure_session_approve message to a Square reader (for Square POS or paySDK builds).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeriveAppKey(self, request, context):
        """*
        Derive a new app key (for paySDK builds).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeriveMsCommsKey(self, request, context):
        """*
        Generate a new MinesweeperComms Key, for minesweeper builds
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SecureSessionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DecodeSessionRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodeSessionRequest,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.DecodeSessionRequestRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.DecodeSessionRequestResponse.SerializeToString,
            ),
            'EncodeSessionApprove': grpc.unary_unary_rpc_method_handler(
                    servicer.EncodeSessionApprove,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.EncodeSessionApproveRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.EncodeSessionApproveResponse.SerializeToString,
            ),
            'DeriveAppKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeriveAppKey,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.DeriveAppKeyRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.DeriveAppKeyResponse.SerializeToString,
            ),
            'DeriveMsCommsKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeriveMsCommsKey,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.DeriveMsCommsKeyRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.DeriveMsCommsKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.enigma.service.SecureSessionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SecureSessionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DecodeSessionRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.SecureSessionService/DecodeSessionRequest',
            squareup_dot_enigma_dot_service__pb2.DecodeSessionRequestRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.DecodeSessionRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncodeSessionApprove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.SecureSessionService/EncodeSessionApprove',
            squareup_dot_enigma_dot_service__pb2.EncodeSessionApproveRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.EncodeSessionApproveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeriveAppKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.SecureSessionService/DeriveAppKey',
            squareup_dot_enigma_dot_service__pb2.DeriveAppKeyRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.DeriveAppKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeriveMsCommsKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.SecureSessionService/DeriveMsCommsKey',
            squareup_dot_enigma_dot_service__pb2.DeriveMsCommsKeyRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.DeriveMsCommsKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DecryptionServiceStub(object):
    """TODO(davis): rename DecryptionService to something more descriptive
    ^^^ especially important now that it also does encryption, this service actually
    handles all card-data communication with Square-manufactured devices.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DecryptAndReturnTokenizedTrackData = channel.unary_unary(
                '/squareup.enigma.service.DecryptionService/DecryptAndReturnTokenizedTrackData',
                request_serializer=squareup_dot_enigma_dot_service__pb2.DecryptTrackDataRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.DecryptAndReturnTokenizedTrackDataResponse.FromString,
                )
        self.DecryptAndReturnFullTrackData = channel.unary_unary(
                '/squareup.enigma.service.DecryptionService/DecryptAndReturnFullTrackData',
                request_serializer=squareup_dot_enigma_dot_service__pb2.DecryptTrackDataRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.DecryptAndReturnFullTrackDataResponse.FromString,
                )
        self.DecryptReaderData = channel.unary_unary(
                '/squareup.enigma.service.DecryptionService/DecryptReaderData',
                request_serializer=squareup_dot_enigma_dot_service__pb2.DecryptReaderDataRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.DecryptReaderDataResponse.FromString,
                )
        self.DecryptDukpt = channel.unary_unary(
                '/squareup.enigma.service.DecryptionService/DecryptDukpt',
                request_serializer=squareup_dot_enigma_dot_service__pb2.DecryptDukptRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.DecryptDukptResponse.FromString,
                )
        self.DecryptCoredump = channel.unary_unary(
                '/squareup.enigma.service.DecryptionService/DecryptCoredump',
                request_serializer=squareup_dot_enigma_dot_service__pb2.CoredumpDecryptionRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.CoredumpDecryptionResponse.FromString,
                )
        self.EncryptEmv = channel.unary_unary(
                '/squareup.enigma.service.DecryptionService/EncryptEmv',
                request_serializer=squareup_dot_enigma_dot_service__pb2.EncryptEmvRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.EncryptEmvResponse.FromString,
                )
        self.AuthenticateManifest = channel.unary_unary(
                '/squareup.enigma.service.DecryptionService/AuthenticateManifest',
                request_serializer=squareup_dot_enigma_dot_service__pb2.AuthenticateManifestRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.AuthenticateManifestResponse.FromString,
                )
        self.ResetStagingReader = channel.unary_unary(
                '/squareup.enigma.service.DecryptionService/ResetStagingReader',
                request_serializer=squareup_dot_enigma_dot_service__pb2.ResetStagingReaderRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.ResetStagingReaderResponse.FromString,
                )


class DecryptionServiceServicer(object):
    """TODO(davis): rename DecryptionService to something more descriptive
    ^^^ especially important now that it also does encryption, this service actually
    handles all card-data communication with Square-manufactured devices.
    """

    def DecryptAndReturnTokenizedTrackData(self, request, context):
        """*
        Decrypts swipe data encrypted by a O1, S1, R4, or R6 reader. The track data is stored in Fidelius.
        The response contains the metadata and Fidelius token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptAndReturnFullTrackData(self, request, context):
        """*
        Decrypts swipe data encrypted by a O1, S1, R4, or R6 reader. The track data is stored in Fidelius.
        The response contains the metadata, Fidelius token and track data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptReaderData(self, request, context):
        """*
        API for decryption the encrypted blobs produced by R6/R12
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptDukpt(self, request, context):
        """*
        Decrypt data encrypted with DUKPT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptCoredump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncryptEmv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthenticateManifest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetStagingReader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DecryptionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DecryptAndReturnTokenizedTrackData': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptAndReturnTokenizedTrackData,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.DecryptTrackDataRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.DecryptAndReturnTokenizedTrackDataResponse.SerializeToString,
            ),
            'DecryptAndReturnFullTrackData': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptAndReturnFullTrackData,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.DecryptTrackDataRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.DecryptAndReturnFullTrackDataResponse.SerializeToString,
            ),
            'DecryptReaderData': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptReaderData,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.DecryptReaderDataRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.DecryptReaderDataResponse.SerializeToString,
            ),
            'DecryptDukpt': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptDukpt,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.DecryptDukptRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.DecryptDukptResponse.SerializeToString,
            ),
            'DecryptCoredump': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptCoredump,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.CoredumpDecryptionRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.CoredumpDecryptionResponse.SerializeToString,
            ),
            'EncryptEmv': grpc.unary_unary_rpc_method_handler(
                    servicer.EncryptEmv,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.EncryptEmvRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.EncryptEmvResponse.SerializeToString,
            ),
            'AuthenticateManifest': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateManifest,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.AuthenticateManifestRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.AuthenticateManifestResponse.SerializeToString,
            ),
            'ResetStagingReader': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetStagingReader,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.ResetStagingReaderRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.ResetStagingReaderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.enigma.service.DecryptionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DecryptionService(object):
    """TODO(davis): rename DecryptionService to something more descriptive
    ^^^ especially important now that it also does encryption, this service actually
    handles all card-data communication with Square-manufactured devices.
    """

    @staticmethod
    def DecryptAndReturnTokenizedTrackData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.DecryptionService/DecryptAndReturnTokenizedTrackData',
            squareup_dot_enigma_dot_service__pb2.DecryptTrackDataRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.DecryptAndReturnTokenizedTrackDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecryptAndReturnFullTrackData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.DecryptionService/DecryptAndReturnFullTrackData',
            squareup_dot_enigma_dot_service__pb2.DecryptTrackDataRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.DecryptAndReturnFullTrackDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecryptReaderData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.DecryptionService/DecryptReaderData',
            squareup_dot_enigma_dot_service__pb2.DecryptReaderDataRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.DecryptReaderDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecryptDukpt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.DecryptionService/DecryptDukpt',
            squareup_dot_enigma_dot_service__pb2.DecryptDukptRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.DecryptDukptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecryptCoredump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.DecryptionService/DecryptCoredump',
            squareup_dot_enigma_dot_service__pb2.CoredumpDecryptionRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.CoredumpDecryptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncryptEmv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.DecryptionService/EncryptEmv',
            squareup_dot_enigma_dot_service__pb2.EncryptEmvRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.EncryptEmvResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthenticateManifest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.DecryptionService/AuthenticateManifest',
            squareup_dot_enigma_dot_service__pb2.AuthenticateManifestRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.AuthenticateManifestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetStagingReader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.DecryptionService/ResetStagingReader',
            squareup_dot_enigma_dot_service__pb2.ResetStagingReaderRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.ResetStagingReaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class P2PEInjectionServiceStub(object):
    """*
    This is currently only used for A10.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.KeyInjectionRequest = channel.unary_unary(
                '/squareup.enigma.service.P2PEInjectionService/KeyInjectionRequest',
                request_serializer=squareup_dot_enigma_dot_service__pb2.P2PEInjectionRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.P2PEInjectionResponse.FromString,
                )
        self.AuthenticateDukpt = channel.unary_unary(
                '/squareup.enigma.service.P2PEInjectionService/AuthenticateDukpt',
                request_serializer=squareup_dot_enigma_dot_service__pb2.AuthenticateDukptRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.AuthenticateDukptResponse.FromString,
                )


class P2PEInjectionServiceServicer(object):
    """*
    This is currently only used for A10.
    """

    def KeyInjectionRequest(self, request, context):
        """*
        Takes a P2PE key injection request, returns keys encrypted appropriately.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthenticateDukpt(self, request, context):
        """*
        Calculate Mac over data with DUKPT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_P2PEInjectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'KeyInjectionRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.KeyInjectionRequest,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.P2PEInjectionRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.P2PEInjectionResponse.SerializeToString,
            ),
            'AuthenticateDukpt': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateDukpt,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.AuthenticateDukptRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.AuthenticateDukptResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.enigma.service.P2PEInjectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class P2PEInjectionService(object):
    """*
    This is currently only used for A10.
    """

    @staticmethod
    def KeyInjectionRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.P2PEInjectionService/KeyInjectionRequest',
            squareup_dot_enigma_dot_service__pb2.P2PEInjectionRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.P2PEInjectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthenticateDukpt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.P2PEInjectionService/AuthenticateDukpt',
            squareup_dot_enigma_dot_service__pb2.AuthenticateDukptRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.AuthenticateDukptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FirmwareEncryptionServiceStub(object):
    """*
    Migrated from REST to RPC (REST "FirmwareAssetEncryptionRequest").

    Called by Tarkin for R6 / R12 updates.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EncryptFirmwareAsset = channel.unary_unary(
                '/squareup.enigma.service.FirmwareEncryptionService/EncryptFirmwareAsset',
                request_serializer=squareup_dot_enigma_dot_service__pb2.EncryptFirmwareAssetRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.EncryptFirmwareAssetResponse.FromString,
                )


class FirmwareEncryptionServiceServicer(object):
    """*
    Migrated from REST to RPC (REST "FirmwareAssetEncryptionRequest").

    Called by Tarkin for R6 / R12 updates.
    """

    def EncryptFirmwareAsset(self, request, context):
        """*
        Takes a request, encrypts the asset according to the parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FirmwareEncryptionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EncryptFirmwareAsset': grpc.unary_unary_rpc_method_handler(
                    servicer.EncryptFirmwareAsset,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.EncryptFirmwareAssetRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.EncryptFirmwareAssetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.enigma.service.FirmwareEncryptionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FirmwareEncryptionService(object):
    """*
    Migrated from REST to RPC (REST "FirmwareAssetEncryptionRequest").

    Called by Tarkin for R6 / R12 updates.
    """

    @staticmethod
    def EncryptFirmwareAsset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.FirmwareEncryptionService/EncryptFirmwareAsset',
            squareup_dot_enigma_dot_service__pb2.EncryptFirmwareAssetRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.EncryptFirmwareAssetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UPEKTranslationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TranslateUPEK = channel.unary_unary(
                '/squareup.enigma.service.UPEKTranslationService/TranslateUPEK',
                request_serializer=squareup_dot_enigma_dot_service__pb2.TranslateUPEKRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.TranslateUPEKResponse.FromString,
                )


class UPEKTranslationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TranslateUPEK(self, request, context):
        """*
        Takes a globally wrapped UPEK and wraps in per device key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UPEKTranslationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TranslateUPEK': grpc.unary_unary_rpc_method_handler(
                    servicer.TranslateUPEK,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.TranslateUPEKRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.TranslateUPEKResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.enigma.service.UPEKTranslationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UPEKTranslationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TranslateUPEK(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.UPEKTranslationService/TranslateUPEK',
            squareup_dot_enigma_dot_service__pb2.TranslateUPEKRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.TranslateUPEKResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReaderBlacklistingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BlacklistReader = channel.unary_unary(
                '/squareup.enigma.service.ReaderBlacklistingService/BlacklistReader',
                request_serializer=squareup_dot_enigma_dot_service__pb2.BlacklistReaderRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.BlacklistReaderResponse.FromString,
                )
        self.QueryBlacklist = channel.unary_unary(
                '/squareup.enigma.service.ReaderBlacklistingService/QueryBlacklist',
                request_serializer=squareup_dot_enigma_dot_service__pb2.QueryBlacklistRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.QueryBlacklistResponse.FromString,
                )
        self.UnBlacklistReader = channel.unary_unary(
                '/squareup.enigma.service.ReaderBlacklistingService/UnBlacklistReader',
                request_serializer=squareup_dot_enigma_dot_service__pb2.UnBlacklistReaderRequest.SerializeToString,
                response_deserializer=squareup_dot_enigma_dot_service__pb2.UnBlacklistReaderResponse.FromString,
                )


class ReaderBlacklistingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BlacklistReader(self, request, context):
        """* Blacklist a given reader 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryBlacklist(self, request, context):
        """* Check for Blacklist status of Hardware ID 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnBlacklistReader(self, request, context):
        """* Un-Blacklist a given reader 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReaderBlacklistingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BlacklistReader': grpc.unary_unary_rpc_method_handler(
                    servicer.BlacklistReader,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.BlacklistReaderRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.BlacklistReaderResponse.SerializeToString,
            ),
            'QueryBlacklist': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryBlacklist,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.QueryBlacklistRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.QueryBlacklistResponse.SerializeToString,
            ),
            'UnBlacklistReader': grpc.unary_unary_rpc_method_handler(
                    servicer.UnBlacklistReader,
                    request_deserializer=squareup_dot_enigma_dot_service__pb2.UnBlacklistReaderRequest.FromString,
                    response_serializer=squareup_dot_enigma_dot_service__pb2.UnBlacklistReaderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.enigma.service.ReaderBlacklistingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReaderBlacklistingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BlacklistReader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.ReaderBlacklistingService/BlacklistReader',
            squareup_dot_enigma_dot_service__pb2.BlacklistReaderRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.BlacklistReaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryBlacklist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.ReaderBlacklistingService/QueryBlacklist',
            squareup_dot_enigma_dot_service__pb2.QueryBlacklistRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.QueryBlacklistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnBlacklistReader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.enigma.service.ReaderBlacklistingService/UnBlacklistReader',
            squareup_dot_enigma_dot_service__pb2.UnBlacklistReaderRequest.SerializeToString,
            squareup_dot_enigma_dot_service__pb2.UnBlacklistReaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

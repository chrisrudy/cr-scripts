# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.stardate import service_pb2 as squareup_dot_stardate_dot_service__pb2


class StardateServiceStub(object):
    """Starlog data is ingested into Stardate, then evaluations are run against it.

    Beginning a new ingest will wipe all existing data.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Begin = channel.unary_unary(
                '/squareup.stardate.StardateService/Begin',
                request_serializer=squareup_dot_stardate_dot_service__pb2.BeginRequest.SerializeToString,
                response_deserializer=squareup_dot_stardate_dot_service__pb2.BeginResponse.FromString,
                )
        self.Insert = channel.unary_unary(
                '/squareup.stardate.StardateService/Insert',
                request_serializer=squareup_dot_stardate_dot_service__pb2.InsertRequest.SerializeToString,
                response_deserializer=squareup_dot_stardate_dot_service__pb2.InsertResponse.FromString,
                )
        self.Commit = channel.unary_unary(
                '/squareup.stardate.StardateService/Commit',
                request_serializer=squareup_dot_stardate_dot_service__pb2.CommitRequest.SerializeToString,
                response_deserializer=squareup_dot_stardate_dot_service__pb2.StatusResponse.FromString,
                )
        self.Status = channel.unary_unary(
                '/squareup.stardate.StardateService/Status',
                request_serializer=squareup_dot_stardate_dot_service__pb2.StatusRequest.SerializeToString,
                response_deserializer=squareup_dot_stardate_dot_service__pb2.StatusResponse.FromString,
                )
        self.Query = channel.unary_unary(
                '/squareup.stardate.StardateService/Query',
                request_serializer=squareup_dot_stardate_dot_service__pb2.QueryRequest.SerializeToString,
                response_deserializer=squareup_dot_stardate_dot_service__pb2.ResultSet.FromString,
                )
        self.BatchQuery = channel.unary_unary(
                '/squareup.stardate.StardateService/BatchQuery',
                request_serializer=squareup_dot_stardate_dot_service__pb2.BatchQueryRequest.SerializeToString,
                response_deserializer=squareup_dot_stardate_dot_service__pb2.BatchQueryResponse.FromString,
                )


class StardateServiceServicer(object):
    """Starlog data is ingested into Stardate, then evaluations are run against it.

    Beginning a new ingest will wipe all existing data.
    """

    def Begin(self, request, context):
        """Begin a new ingest.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insert(self, request, context):
        """Insert data into the ingest.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Commit starts committing the ingest for final usage.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Retrieve status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Query the service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StardateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Begin': grpc.unary_unary_rpc_method_handler(
                    servicer.Begin,
                    request_deserializer=squareup_dot_stardate_dot_service__pb2.BeginRequest.FromString,
                    response_serializer=squareup_dot_stardate_dot_service__pb2.BeginResponse.SerializeToString,
            ),
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=squareup_dot_stardate_dot_service__pb2.InsertRequest.FromString,
                    response_serializer=squareup_dot_stardate_dot_service__pb2.InsertResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=squareup_dot_stardate_dot_service__pb2.CommitRequest.FromString,
                    response_serializer=squareup_dot_stardate_dot_service__pb2.StatusResponse.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=squareup_dot_stardate_dot_service__pb2.StatusRequest.FromString,
                    response_serializer=squareup_dot_stardate_dot_service__pb2.StatusResponse.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=squareup_dot_stardate_dot_service__pb2.QueryRequest.FromString,
                    response_serializer=squareup_dot_stardate_dot_service__pb2.ResultSet.SerializeToString,
            ),
            'BatchQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchQuery,
                    request_deserializer=squareup_dot_stardate_dot_service__pb2.BatchQueryRequest.FromString,
                    response_serializer=squareup_dot_stardate_dot_service__pb2.BatchQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.stardate.StardateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StardateService(object):
    """Starlog data is ingested into Stardate, then evaluations are run against it.

    Beginning a new ingest will wipe all existing data.
    """

    @staticmethod
    def Begin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.stardate.StardateService/Begin',
            squareup_dot_stardate_dot_service__pb2.BeginRequest.SerializeToString,
            squareup_dot_stardate_dot_service__pb2.BeginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.stardate.StardateService/Insert',
            squareup_dot_stardate_dot_service__pb2.InsertRequest.SerializeToString,
            squareup_dot_stardate_dot_service__pb2.InsertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.stardate.StardateService/Commit',
            squareup_dot_stardate_dot_service__pb2.CommitRequest.SerializeToString,
            squareup_dot_stardate_dot_service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.stardate.StardateService/Status',
            squareup_dot_stardate_dot_service__pb2.StatusRequest.SerializeToString,
            squareup_dot_stardate_dot_service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.stardate.StardateService/Query',
            squareup_dot_stardate_dot_service__pb2.QueryRequest.SerializeToString,
            squareup_dot_stardate_dot_service__pb2.ResultSet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.stardate.StardateService/BatchQuery',
            squareup_dot_stardate_dot_service__pb2.BatchQueryRequest.SerializeToString,
            squareup_dot_stardate_dot_service__pb2.BatchQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

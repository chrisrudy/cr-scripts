# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

DocumentTypeValue = typing___NewType('DocumentTypeValue', builtin___int)
type___DocumentTypeValue = DocumentTypeValue
DocumentType: _DocumentType
class _DocumentType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[DocumentTypeValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    DO_NOT_USE_DOCUMENT_TYPE = typing___cast(DocumentTypeValue, 0)
    PASSPORT = typing___cast(DocumentTypeValue, 1)
    DRIVERS_LICENSE = typing___cast(DocumentTypeValue, 2)
    ID_CARD = typing___cast(DocumentTypeValue, 3)
    RESIDENCE_PERMIT = typing___cast(DocumentTypeValue, 4)
DO_NOT_USE_DOCUMENT_TYPE = typing___cast(DocumentTypeValue, 0)
PASSPORT = typing___cast(DocumentTypeValue, 1)
DRIVERS_LICENSE = typing___cast(DocumentTypeValue, 2)
ID_CARD = typing___cast(DocumentTypeValue, 3)
RESIDENCE_PERMIT = typing___cast(DocumentTypeValue, 4)
type___DocumentType = DocumentType

class Document(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    token: typing___Text = ...

    def __init__(self,
        *,
        token : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"token",b"token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"token",b"token"]) -> None: ...
type___Document = Document

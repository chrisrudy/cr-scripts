# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.common import messages_pb2 as squareup_dot_common_dot_messages__pb2
from sq_protos_py.squareup.engbrain import checklist_pb2 as squareup_dot_engbrain_dot_checklist__pb2


class ChkLstServiceStub(object):
    """Events / RPC (in haskell-ish notation)
    --------------------------------------

    Basic operations:
    create :: () -> Template (constructs a new template)
    instantiate :: Template -> Instance (creates an instance from a template)
    clone :: TemplateToken -> Template (changes ownership)

    Mutations:
    append :: [t \in Inst || Templ] => t -> Entry -> t (adds a new entry to an instance or template)
    insert :: [t \in Inst || Templ] => t -> int64 -> Entry -> t (^^ but at a particular index)
    remove :: [t \in Inst || Templ] => t -> EntryToken -> t (inverse of ^^)

    Queries:
    templates :: TemplateQuery -> [Template]
    instances :: InstanceQuery -> [Instance]

    Interactions:
    check :: InstanceToken -> Instance (shows a certain checklist

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/squareup.engbrain.service.ChkLstService/List',
                request_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
                response_deserializer=squareup_dot_engbrain_dot_checklist__pb2.ChkLstTemplates.FromString,
                )


class ChkLstServiceServicer(object):
    """Events / RPC (in haskell-ish notation)
    --------------------------------------

    Basic operations:
    create :: () -> Template (constructs a new template)
    instantiate :: Template -> Instance (creates an instance from a template)
    clone :: TemplateToken -> Template (changes ownership)

    Mutations:
    append :: [t \in Inst || Templ] => t -> Entry -> t (adds a new entry to an instance or template)
    insert :: [t \in Inst || Templ] => t -> int64 -> Entry -> t (^^ but at a particular index)
    remove :: [t \in Inst || Templ] => t -> EntryToken -> t (inverse of ^^)

    Queries:
    templates :: TemplateQuery -> [Template]
    instances :: InstanceQuery -> [Instance]

    Interactions:
    check :: InstanceToken -> Instance (shows a certain checklist

    """

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChkLstServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                    response_serializer=squareup_dot_engbrain_dot_checklist__pb2.ChkLstTemplates.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.engbrain.service.ChkLstService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChkLstService(object):
    """Events / RPC (in haskell-ish notation)
    --------------------------------------

    Basic operations:
    create :: () -> Template (constructs a new template)
    instantiate :: Template -> Instance (creates an instance from a template)
    clone :: TemplateToken -> Template (changes ownership)

    Mutations:
    append :: [t \in Inst || Templ] => t -> Entry -> t (adds a new entry to an instance or template)
    insert :: [t \in Inst || Templ] => t -> int64 -> Entry -> t (^^ but at a particular index)
    remove :: [t \in Inst || Templ] => t -> EntryToken -> t (inverse of ^^)

    Queries:
    templates :: TemplateQuery -> [Template]
    instances :: InstanceQuery -> [Instance]

    Interactions:
    check :: InstanceToken -> Instance (shows a certain checklist

    """

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.engbrain.service.ChkLstService/List',
            squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            squareup_dot_engbrain_dot_checklist__pb2.ChkLstTemplates.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

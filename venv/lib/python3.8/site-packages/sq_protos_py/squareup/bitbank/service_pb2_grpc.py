# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.bitbank import service_pb2 as squareup_dot_bitbank_dot_service__pb2


class BitbankServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateNewTransaction = channel.unary_unary(
                '/squareup.bitbank.service.BitbankService/CreateNewTransaction',
                request_serializer=squareup_dot_bitbank_dot_service__pb2.CreateNewTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_bitbank_dot_service__pb2.CreateNewTransactionResponse.FromString,
                )
        self.CreateNewWalletAddress = channel.unary_unary(
                '/squareup.bitbank.service.BitbankService/CreateNewWalletAddress',
                request_serializer=squareup_dot_bitbank_dot_service__pb2.CreateNewWalletAddressRequest.SerializeToString,
                response_deserializer=squareup_dot_bitbank_dot_service__pb2.CreateNewWalletAddressResponse.FromString,
                )
        self.GetSquareWalletTotalRpc = channel.unary_unary(
                '/squareup.bitbank.service.BitbankService/GetSquareWalletTotalRpc',
                request_serializer=squareup_dot_bitbank_dot_service__pb2.GetSquareWalletTotalRequest.SerializeToString,
                response_deserializer=squareup_dot_bitbank_dot_service__pb2.GetSquareWalletTotalResponse.FromString,
                )
        self.InitiateBitcoinPayment = channel.unary_unary(
                '/squareup.bitbank.service.BitbankService/InitiateBitcoinPayment',
                request_serializer=squareup_dot_bitbank_dot_service__pb2.InitiateBitcoinPaymentRequest.SerializeToString,
                response_deserializer=squareup_dot_bitbank_dot_service__pb2.InitiateBitcoinPaymentResponse.FromString,
                )
        self.AddColdWallet = channel.unary_unary(
                '/squareup.bitbank.service.BitbankService/AddColdWallet',
                request_serializer=squareup_dot_bitbank_dot_service__pb2.AddColdWalletRequest.SerializeToString,
                response_deserializer=squareup_dot_bitbank_dot_service__pb2.AddColdWalletResponse.FromString,
                )
        self.GetGatewayWalletPubKey = channel.unary_unary(
                '/squareup.bitbank.service.BitbankService/GetGatewayWalletPubKey',
                request_serializer=squareup_dot_bitbank_dot_service__pb2.GetGatewayWalletPubKeyRequest.SerializeToString,
                response_deserializer=squareup_dot_bitbank_dot_service__pb2.GetGatewayWalletPubKeyResponse.FromString,
                )
        self.SetUtxoSpendable = channel.unary_unary(
                '/squareup.bitbank.service.BitbankService/SetUtxoSpendable',
                request_serializer=squareup_dot_bitbank_dot_service__pb2.SetUtxoSpendableRequest.SerializeToString,
                response_deserializer=squareup_dot_bitbank_dot_service__pb2.SetUtxoSpendableResponse.FromString,
                )


class BitbankServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateNewTransaction(self, request, context):
        """Creates a new cold storage transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNewWalletAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSquareWalletTotalRpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitiateBitcoinPayment(self, request, context):
        """Initiates a new Bitcoin Withdrawal of the specified WithdrawalType.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddColdWallet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGatewayWalletPubKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUtxoSpendable(self, request, context):
        """Changes the spend_state of a UTXO to SPENDABLE. This "unpins" a customer deposit.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BitbankServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateNewTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNewTransaction,
                    request_deserializer=squareup_dot_bitbank_dot_service__pb2.CreateNewTransactionRequest.FromString,
                    response_serializer=squareup_dot_bitbank_dot_service__pb2.CreateNewTransactionResponse.SerializeToString,
            ),
            'CreateNewWalletAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNewWalletAddress,
                    request_deserializer=squareup_dot_bitbank_dot_service__pb2.CreateNewWalletAddressRequest.FromString,
                    response_serializer=squareup_dot_bitbank_dot_service__pb2.CreateNewWalletAddressResponse.SerializeToString,
            ),
            'GetSquareWalletTotalRpc': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSquareWalletTotalRpc,
                    request_deserializer=squareup_dot_bitbank_dot_service__pb2.GetSquareWalletTotalRequest.FromString,
                    response_serializer=squareup_dot_bitbank_dot_service__pb2.GetSquareWalletTotalResponse.SerializeToString,
            ),
            'InitiateBitcoinPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiateBitcoinPayment,
                    request_deserializer=squareup_dot_bitbank_dot_service__pb2.InitiateBitcoinPaymentRequest.FromString,
                    response_serializer=squareup_dot_bitbank_dot_service__pb2.InitiateBitcoinPaymentResponse.SerializeToString,
            ),
            'AddColdWallet': grpc.unary_unary_rpc_method_handler(
                    servicer.AddColdWallet,
                    request_deserializer=squareup_dot_bitbank_dot_service__pb2.AddColdWalletRequest.FromString,
                    response_serializer=squareup_dot_bitbank_dot_service__pb2.AddColdWalletResponse.SerializeToString,
            ),
            'GetGatewayWalletPubKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGatewayWalletPubKey,
                    request_deserializer=squareup_dot_bitbank_dot_service__pb2.GetGatewayWalletPubKeyRequest.FromString,
                    response_serializer=squareup_dot_bitbank_dot_service__pb2.GetGatewayWalletPubKeyResponse.SerializeToString,
            ),
            'SetUtxoSpendable': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUtxoSpendable,
                    request_deserializer=squareup_dot_bitbank_dot_service__pb2.SetUtxoSpendableRequest.FromString,
                    response_serializer=squareup_dot_bitbank_dot_service__pb2.SetUtxoSpendableResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.bitbank.service.BitbankService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BitbankService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateNewTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitbank.service.BitbankService/CreateNewTransaction',
            squareup_dot_bitbank_dot_service__pb2.CreateNewTransactionRequest.SerializeToString,
            squareup_dot_bitbank_dot_service__pb2.CreateNewTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateNewWalletAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitbank.service.BitbankService/CreateNewWalletAddress',
            squareup_dot_bitbank_dot_service__pb2.CreateNewWalletAddressRequest.SerializeToString,
            squareup_dot_bitbank_dot_service__pb2.CreateNewWalletAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSquareWalletTotalRpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitbank.service.BitbankService/GetSquareWalletTotalRpc',
            squareup_dot_bitbank_dot_service__pb2.GetSquareWalletTotalRequest.SerializeToString,
            squareup_dot_bitbank_dot_service__pb2.GetSquareWalletTotalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitiateBitcoinPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitbank.service.BitbankService/InitiateBitcoinPayment',
            squareup_dot_bitbank_dot_service__pb2.InitiateBitcoinPaymentRequest.SerializeToString,
            squareup_dot_bitbank_dot_service__pb2.InitiateBitcoinPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddColdWallet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitbank.service.BitbankService/AddColdWallet',
            squareup_dot_bitbank_dot_service__pb2.AddColdWalletRequest.SerializeToString,
            squareup_dot_bitbank_dot_service__pb2.AddColdWalletResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGatewayWalletPubKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitbank.service.BitbankService/GetGatewayWalletPubKey',
            squareup_dot_bitbank_dot_service__pb2.GetGatewayWalletPubKeyRequest.SerializeToString,
            squareup_dot_bitbank_dot_service__pb2.GetGatewayWalletPubKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetUtxoSpendable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitbank.service.BitbankService/SetUtxoSpendable',
            squareup_dot_bitbank_dot_service__pb2.SetUtxoSpendableRequest.SerializeToString,
            squareup_dot_bitbank_dot_service__pb2.SetUtxoSpendableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BitbankAdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ImportWallet = channel.unary_unary(
                '/squareup.bitbank.service.BitbankAdminService/ImportWallet',
                request_serializer=squareup_dot_bitbank_dot_service__pb2.ImportWalletRequest.SerializeToString,
                response_deserializer=squareup_dot_bitbank_dot_service__pb2.ImportWalletResponse.FromString,
                )


class BitbankAdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ImportWallet(self, request, context):
        """Creates a new SUBZERO wallet in Bitoshi with the source wallet's keychain
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BitbankAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ImportWallet': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportWallet,
                    request_deserializer=squareup_dot_bitbank_dot_service__pb2.ImportWalletRequest.FromString,
                    response_serializer=squareup_dot_bitbank_dot_service__pb2.ImportWalletResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.bitbank.service.BitbankAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BitbankAdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ImportWallet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitbank.service.BitbankAdminService/ImportWallet',
            squareup_dot_bitbank_dot_service__pb2.ImportWalletRequest.SerializeToString,
            squareup_dot_bitbank_dot_service__pb2.ImportWalletResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

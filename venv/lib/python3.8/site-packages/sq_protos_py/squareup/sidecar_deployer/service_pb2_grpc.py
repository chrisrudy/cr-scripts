# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.sidecar_deployer import service_pb2 as squareup_dot_sidecar__deployer_dot_service__pb2


class SidecarDeployerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BlessedVersions = channel.unary_unary(
                '/squareup.sidecar_deployer.service.SidecarDeployerService/BlessedVersions',
                request_serializer=squareup_dot_sidecar__deployer_dot_service__pb2.BlessedVersionsRequest.SerializeToString,
                response_deserializer=squareup_dot_sidecar__deployer_dot_service__pb2.BlessedVersionsResponse.FromString,
                )
        self.GetMinimumTCLIVersion = channel.unary_unary(
                '/squareup.sidecar_deployer.service.SidecarDeployerService/GetMinimumTCLIVersion',
                request_serializer=squareup_dot_sidecar__deployer_dot_service__pb2.GetMinimumTCLIVersionRequest.SerializeToString,
                response_deserializer=squareup_dot_sidecar__deployer_dot_service__pb2.GetMinimumTCLIVersionResponse.FromString,
                )


class SidecarDeployerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BlessedVersions(self, request, context):
        """*
        Returns the image shas used to decide which sidecar version should be used if autodeployed or
        deployed for the first time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMinimumTCLIVersion(self, request, context):
        """* Returns the current required tcli version number. The tcli tool should
        instruct users to upgrade if the current version is not at least as new as
        the one returned. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SidecarDeployerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BlessedVersions': grpc.unary_unary_rpc_method_handler(
                    servicer.BlessedVersions,
                    request_deserializer=squareup_dot_sidecar__deployer_dot_service__pb2.BlessedVersionsRequest.FromString,
                    response_serializer=squareup_dot_sidecar__deployer_dot_service__pb2.BlessedVersionsResponse.SerializeToString,
            ),
            'GetMinimumTCLIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMinimumTCLIVersion,
                    request_deserializer=squareup_dot_sidecar__deployer_dot_service__pb2.GetMinimumTCLIVersionRequest.FromString,
                    response_serializer=squareup_dot_sidecar__deployer_dot_service__pb2.GetMinimumTCLIVersionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.sidecar_deployer.service.SidecarDeployerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SidecarDeployerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BlessedVersions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sidecar_deployer.service.SidecarDeployerService/BlessedVersions',
            squareup_dot_sidecar__deployer_dot_service__pb2.BlessedVersionsRequest.SerializeToString,
            squareup_dot_sidecar__deployer_dot_service__pb2.BlessedVersionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMinimumTCLIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sidecar_deployer.service.SidecarDeployerService/GetMinimumTCLIVersion',
            squareup_dot_sidecar__deployer_dot_service__pb2.GetMinimumTCLIVersionRequest.SerializeToString,
            squareup_dot_sidecar__deployer_dot_service__pb2.GetMinimumTCLIVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.pdfForge import service_pb2 as squareup_dot_pdfForge_dot_service__pb2


class PdfForgeServiceStub(object):
    """
    PDF rendering for Rails apps has been historically difficult. It requires workarounds to be
    bundled with the app. In the best case, we had a PDF slightly skewed SQ Market font. In the worst
    case, our customers saw black boxes on their PDFs instead of letters.

    This service tries to abstract out PDF rendering dependencies. Test your PDF at go/pdf-forge.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RenderHtmlToPdf = channel.unary_unary(
                '/squareup.pdfForge.service.PdfForgeService/RenderHtmlToPdf',
                request_serializer=squareup_dot_pdfForge_dot_service__pb2.RenderHtmlToPdfRequest.SerializeToString,
                response_deserializer=squareup_dot_pdfForge_dot_service__pb2.RenderHtmlToPdfResponse.FromString,
                )


class PdfForgeServiceServicer(object):
    """
    PDF rendering for Rails apps has been historically difficult. It requires workarounds to be
    bundled with the app. In the best case, we had a PDF slightly skewed SQ Market font. In the worst
    case, our customers saw black boxes on their PDFs instead of letters.

    This service tries to abstract out PDF rendering dependencies. Test your PDF at go/pdf-forge.
    """

    def RenderHtmlToPdf(self, request, context):
        """Synchronous endpoint. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PdfForgeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RenderHtmlToPdf': grpc.unary_unary_rpc_method_handler(
                    servicer.RenderHtmlToPdf,
                    request_deserializer=squareup_dot_pdfForge_dot_service__pb2.RenderHtmlToPdfRequest.FromString,
                    response_serializer=squareup_dot_pdfForge_dot_service__pb2.RenderHtmlToPdfResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.pdfForge.service.PdfForgeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PdfForgeService(object):
    """
    PDF rendering for Rails apps has been historically difficult. It requires workarounds to be
    bundled with the app. In the best case, we had a PDF slightly skewed SQ Market font. In the worst
    case, our customers saw black boxes on their PDFs instead of letters.

    This service tries to abstract out PDF rendering dependencies. Test your PDF at go/pdf-forge.
    """

    @staticmethod
    def RenderHtmlToPdf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.pdfForge.service.PdfForgeService/RenderHtmlToPdf',
            squareup_dot_pdfForge_dot_service__pb2.RenderHtmlToPdfRequest.SerializeToString,
            squareup_dot_pdfForge_dot_service__pb2.RenderHtmlToPdfResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.ratelimiter.api import service_pb2 as squareup_dot_ratelimiter_dot_api_dot_service__pb2


class BlacklistServiceStub(object):
    """* Yes, there's already some web service endpoints for this. But the proto version is more
    scriptable and better for interacting with other services.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddBlacklistToken = channel.unary_unary(
                '/squareup.ratelimiter.api.BlacklistService/AddBlacklistToken',
                request_serializer=squareup_dot_ratelimiter_dot_api_dot_service__pb2.AddBlacklistTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_ratelimiter_dot_api_dot_service__pb2.AddBlacklistTokenResponse.FromString,
                )


class BlacklistServiceServicer(object):
    """* Yes, there's already some web service endpoints for this. But the proto version is more
    scriptable and better for interacting with other services.
    """

    def AddBlacklistToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlacklistServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddBlacklistToken': grpc.unary_unary_rpc_method_handler(
                    servicer.AddBlacklistToken,
                    request_deserializer=squareup_dot_ratelimiter_dot_api_dot_service__pb2.AddBlacklistTokenRequest.FromString,
                    response_serializer=squareup_dot_ratelimiter_dot_api_dot_service__pb2.AddBlacklistTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.ratelimiter.api.BlacklistService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BlacklistService(object):
    """* Yes, there's already some web service endpoints for this. But the proto version is more
    scriptable and better for interacting with other services.
    """

    @staticmethod
    def AddBlacklistToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ratelimiter.api.BlacklistService/AddBlacklistToken',
            squareup_dot_ratelimiter_dot_api_dot_service__pb2.AddBlacklistTokenRequest.SerializeToString,
            squareup_dot_ratelimiter_dot_api_dot_service__pb2.AddBlacklistTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

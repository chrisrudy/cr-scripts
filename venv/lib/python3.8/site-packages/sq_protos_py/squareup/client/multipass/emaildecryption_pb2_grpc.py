# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.client.multipass import emaildecryption_pb2 as squareup_dot_client_dot_multipass_dot_emaildecryption__pb2


class EmailDecryptionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DecryptEmailFromToken = channel.unary_unary(
                '/squareup.client.multipass.EmailDecryptionService/DecryptEmailFromToken',
                request_serializer=squareup_dot_client_dot_multipass_dot_emaildecryption__pb2.DecryptEmailRequest.SerializeToString,
                response_deserializer=squareup_dot_client_dot_multipass_dot_emaildecryption__pb2.DecryptEmailResponse.FromString,
                )


class EmailDecryptionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DecryptEmailFromToken(self, request, context):
        """*
        Decrypts a string from encrypted email in the request. Intended for use by
        client that want to decrypt encrypted email from 3rd party. For invalid input that cannot
        be decrypted, returns nothing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmailDecryptionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DecryptEmailFromToken': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptEmailFromToken,
                    request_deserializer=squareup_dot_client_dot_multipass_dot_emaildecryption__pb2.DecryptEmailRequest.FromString,
                    response_serializer=squareup_dot_client_dot_multipass_dot_emaildecryption__pb2.DecryptEmailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.client.multipass.EmailDecryptionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmailDecryptionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DecryptEmailFromToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.client.multipass.EmailDecryptionService/DecryptEmailFromToken',
            squareup_dot_client_dot_multipass_dot_emaildecryption__pb2.DecryptEmailRequest.SerializeToString,
            squareup_dot_client_dot_multipass_dot_emaildecryption__pb2.DecryptEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

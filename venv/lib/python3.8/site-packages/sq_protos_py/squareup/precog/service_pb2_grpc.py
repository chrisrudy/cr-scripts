# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.precog import common_pb2 as squareup_dot_precog_dot_common__pb2


class PrecogInternalServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSignalsByAnonymousToken = channel.unary_unary(
                '/squareup.precog.api.PrecogInternalService/GetSignalsByAnonymousToken',
                request_serializer=squareup_dot_precog_dot_common__pb2.GetSignalsByAnonymousTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_precog_dot_common__pb2.GetSignalsByAnonymousTokenResponse.FromString,
                )
        self.GetSignalsByMerchantToken = channel.unary_unary(
                '/squareup.precog.api.PrecogInternalService/GetSignalsByMerchantToken',
                request_serializer=squareup_dot_precog_dot_common__pb2.GetSignalsByMerchantTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_precog_dot_common__pb2.GetSignalsByMerchantTokenResponse.FromString,
                )
        self.GetEventsByAnonymousToken = channel.unary_unary(
                '/squareup.precog.api.PrecogInternalService/GetEventsByAnonymousToken',
                request_serializer=squareup_dot_precog_dot_common__pb2.GetEventsByAnonymousTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_precog_dot_common__pb2.GetEventsByAnonymousTokenResponse.FromString,
                )
        self.GetEventsByMerchantToken = channel.unary_unary(
                '/squareup.precog.api.PrecogInternalService/GetEventsByMerchantToken',
                request_serializer=squareup_dot_precog_dot_common__pb2.GetEventsByMerchantTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_precog_dot_common__pb2.GetEventsByMerchantTokenResponse.FromString,
                )
        self.PersistEvent = channel.unary_unary(
                '/squareup.precog.api.PrecogInternalService/PersistEvent',
                request_serializer=squareup_dot_precog_dot_common__pb2.PersistEventRequest.SerializeToString,
                response_deserializer=squareup_dot_precog_dot_common__pb2.PersistEventResponse.FromString,
                )


class PrecogInternalServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSignalsByAnonymousToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignalsByMerchantToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventsByAnonymousToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventsByMerchantToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PersistEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrecogInternalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSignalsByAnonymousToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignalsByAnonymousToken,
                    request_deserializer=squareup_dot_precog_dot_common__pb2.GetSignalsByAnonymousTokenRequest.FromString,
                    response_serializer=squareup_dot_precog_dot_common__pb2.GetSignalsByAnonymousTokenResponse.SerializeToString,
            ),
            'GetSignalsByMerchantToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignalsByMerchantToken,
                    request_deserializer=squareup_dot_precog_dot_common__pb2.GetSignalsByMerchantTokenRequest.FromString,
                    response_serializer=squareup_dot_precog_dot_common__pb2.GetSignalsByMerchantTokenResponse.SerializeToString,
            ),
            'GetEventsByAnonymousToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEventsByAnonymousToken,
                    request_deserializer=squareup_dot_precog_dot_common__pb2.GetEventsByAnonymousTokenRequest.FromString,
                    response_serializer=squareup_dot_precog_dot_common__pb2.GetEventsByAnonymousTokenResponse.SerializeToString,
            ),
            'GetEventsByMerchantToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEventsByMerchantToken,
                    request_deserializer=squareup_dot_precog_dot_common__pb2.GetEventsByMerchantTokenRequest.FromString,
                    response_serializer=squareup_dot_precog_dot_common__pb2.GetEventsByMerchantTokenResponse.SerializeToString,
            ),
            'PersistEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.PersistEvent,
                    request_deserializer=squareup_dot_precog_dot_common__pb2.PersistEventRequest.FromString,
                    response_serializer=squareup_dot_precog_dot_common__pb2.PersistEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.precog.api.PrecogInternalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PrecogInternalService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSignalsByAnonymousToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.precog.api.PrecogInternalService/GetSignalsByAnonymousToken',
            squareup_dot_precog_dot_common__pb2.GetSignalsByAnonymousTokenRequest.SerializeToString,
            squareup_dot_precog_dot_common__pb2.GetSignalsByAnonymousTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSignalsByMerchantToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.precog.api.PrecogInternalService/GetSignalsByMerchantToken',
            squareup_dot_precog_dot_common__pb2.GetSignalsByMerchantTokenRequest.SerializeToString,
            squareup_dot_precog_dot_common__pb2.GetSignalsByMerchantTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEventsByAnonymousToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.precog.api.PrecogInternalService/GetEventsByAnonymousToken',
            squareup_dot_precog_dot_common__pb2.GetEventsByAnonymousTokenRequest.SerializeToString,
            squareup_dot_precog_dot_common__pb2.GetEventsByAnonymousTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEventsByMerchantToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.precog.api.PrecogInternalService/GetEventsByMerchantToken',
            squareup_dot_precog_dot_common__pb2.GetEventsByMerchantTokenRequest.SerializeToString,
            squareup_dot_precog_dot_common__pb2.GetEventsByMerchantTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PersistEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.precog.api.PrecogInternalService/PersistEvent',
            squareup_dot_precog_dot_common__pb2.PersistEventRequest.SerializeToString,
            squareup_dot_precog_dot_common__pb2.PersistEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

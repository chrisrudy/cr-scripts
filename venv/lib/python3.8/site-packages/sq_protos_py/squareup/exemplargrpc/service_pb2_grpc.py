# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.exemplargrpc import service_pb2 as squareup_dot_exemplargrpc_dot_service__pb2


class ExemplarGrpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHiToExemplar = channel.unary_unary(
                '/squareup.exemplargrpc.service.ExemplarGrpcService/SayHiToExemplar',
                request_serializer=squareup_dot_exemplargrpc_dot_service__pb2.SayHiToExemplarRequest.SerializeToString,
                response_deserializer=squareup_dot_exemplargrpc_dot_service__pb2.SayHiToExemplarResponse.FromString,
                )
        self.ChitChat = channel.stream_stream(
                '/squareup.exemplargrpc.service.ExemplarGrpcService/ChitChat',
                request_serializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatRequest.SerializeToString,
                response_deserializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatResponse.FromString,
                )
        self.TalkAtServer = channel.stream_unary(
                '/squareup.exemplargrpc.service.ExemplarGrpcService/TalkAtServer',
                request_serializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatRequest.SerializeToString,
                response_deserializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatResponse.FromString,
                )
        self.ListenToServer = channel.unary_stream(
                '/squareup.exemplargrpc.service.ExemplarGrpcService/ListenToServer',
                request_serializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatRequest.SerializeToString,
                response_deserializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatResponse.FromString,
                )


class ExemplarGrpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SayHiToExemplar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChitChat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TalkAtServer(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListenToServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExemplarGrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHiToExemplar': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHiToExemplar,
                    request_deserializer=squareup_dot_exemplargrpc_dot_service__pb2.SayHiToExemplarRequest.FromString,
                    response_serializer=squareup_dot_exemplargrpc_dot_service__pb2.SayHiToExemplarResponse.SerializeToString,
            ),
            'ChitChat': grpc.stream_stream_rpc_method_handler(
                    servicer.ChitChat,
                    request_deserializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatRequest.FromString,
                    response_serializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatResponse.SerializeToString,
            ),
            'TalkAtServer': grpc.stream_unary_rpc_method_handler(
                    servicer.TalkAtServer,
                    request_deserializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatRequest.FromString,
                    response_serializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatResponse.SerializeToString,
            ),
            'ListenToServer': grpc.unary_stream_rpc_method_handler(
                    servicer.ListenToServer,
                    request_deserializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatRequest.FromString,
                    response_serializer=squareup_dot_exemplargrpc_dot_service__pb2.ChitChatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.exemplargrpc.service.ExemplarGrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExemplarGrpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SayHiToExemplar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.exemplargrpc.service.ExemplarGrpcService/SayHiToExemplar',
            squareup_dot_exemplargrpc_dot_service__pb2.SayHiToExemplarRequest.SerializeToString,
            squareup_dot_exemplargrpc_dot_service__pb2.SayHiToExemplarResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChitChat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/squareup.exemplargrpc.service.ExemplarGrpcService/ChitChat',
            squareup_dot_exemplargrpc_dot_service__pb2.ChitChatRequest.SerializeToString,
            squareup_dot_exemplargrpc_dot_service__pb2.ChitChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TalkAtServer(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/squareup.exemplargrpc.service.ExemplarGrpcService/TalkAtServer',
            squareup_dot_exemplargrpc_dot_service__pb2.ChitChatRequest.SerializeToString,
            squareup_dot_exemplargrpc_dot_service__pb2.ChitChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListenToServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/squareup.exemplargrpc.service.ExemplarGrpcService/ListenToServer',
            squareup_dot_exemplargrpc_dot_service__pb2.ChitChatRequest.SerializeToString,
            squareup_dot_exemplargrpc_dot_service__pb2.ChitChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer as google___protobuf___internal___containers___RepeatedScalarFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.beemo.translation_types_pb2 import (
    NameOrTranslationType as squareup___beemo___translation_types_pb2___NameOrTranslationType,
)

from sq_protos_py.squareup.beemo.v2.models.payment_pb2 import (
    FullRefund as squareup___beemo___v2___models___payment_pb2___FullRefund,
    ProcessingFeeAmounts as squareup___beemo___v2___models___payment_pb2___ProcessingFeeAmounts,
    Refund as squareup___beemo___v2___models___payment_pb2___Refund,
    Tender as squareup___beemo___v2___models___payment_pb2___Tender,
)

from sq_protos_py.squareup.beemo.v2.models.refund_v3_pb2 import (
    BeemoRefundV3 as squareup___beemo___v2___models___refund_v3_pb2___BeemoRefundV3,
)

from sq_protos_py.squareup.beemo.v2.models.users_pb2 import (
    CreatorDetails as squareup___beemo___v2___models___users_pb2___CreatorDetails,
    Device as squareup___beemo___v2___models___users_pb2___Device,
    Employee as squareup___beemo___v2___models___users_pb2___Employee,
    Merchant as squareup___beemo___v2___models___users_pb2___Merchant,
)

from sq_protos_py.squareup.beemo.v3.bill_pb2 import (
    EventTypeValue as squareup___beemo___v3___bill_pb2___EventTypeValue,
)

from sq_protos_py.squareup.beemo.v3.reporting_params_pb2 import (
    ActivityTypeValue as squareup___beemo___v3___reporting_params_pb2___ActivityTypeValue,
)

from sq_protos_py.squareup.bills.cart_pb2 import (
    Cart as squareup___bills___cart_pb2___Cart,
    Itemization as squareup___bills___cart_pb2___Itemization,
    ModifierOptionLineItem as squareup___bills___cart_pb2___ModifierOptionLineItem,
)

from sq_protos_py.squareup.bills.square_product_attributes_pb2 import (
    CommonPointOfSaleAttributes as squareup___bills___square_product_attributes_pb2___CommonPointOfSaleAttributes,
)

from sq_protos_py.squareup.common.colors_pb2 import (
    RGBAColor as squareup___common___colors_pb2___RGBAColor,
)

from sq_protos_py.squareup.common.currency_pb2 import (
    Money as squareup___common___currency_pb2___Money,
)

from sq_protos_py.squareup.common.payment_pb2 import (
    SquareProductValue as squareup___common___payment_pb2___SquareProductValue,
)

from sq_protos_py.squareup.common.time_pb2 import (
    DateTime as squareup___common___time_pb2___DateTime,
)

from sq_protos_py.squareup.items.items_pb2 import (
    Discount as squareup___items___items_pb2___Discount,
    Fee as squareup___items___items_pb2___Fee,
    Surcharge as squareup___items___items_pb2___Surcharge,
    TicketGroup as squareup___items___items_pb2___TicketGroup,
    TicketTemplate as squareup___items___items_pb2___TicketTemplate,
)

from sq_protos_py.squareup.omg.model.orders_pb2 import (
    Order as squareup___omg___model___orders_pb2___Order,
)

from typing import (
    Iterable as typing___Iterable,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Adjustment(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    AdjustmentTypeValue = typing___NewType('AdjustmentTypeValue', builtin___int)
    type___AdjustmentTypeValue = AdjustmentTypeValue
    AdjustmentType: _AdjustmentType
    class _AdjustmentType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Adjustment.AdjustmentTypeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        TAX = typing___cast(Adjustment.AdjustmentTypeValue, 0)
        UNITEMIZED_TAX = typing___cast(Adjustment.AdjustmentTypeValue, 1)
        INCLUSIVE_TAX = typing___cast(Adjustment.AdjustmentTypeValue, 2)
        DISCOUNT = typing___cast(Adjustment.AdjustmentTypeValue, 3)
        REWARD = typing___cast(Adjustment.AdjustmentTypeValue, 4)
        COUPON = typing___cast(Adjustment.AdjustmentTypeValue, 5)
        ITEM_MODIFIER = typing___cast(Adjustment.AdjustmentTypeValue, 6)
        COMP = typing___cast(Adjustment.AdjustmentTypeValue, 7)
        SURCHARGE = typing___cast(Adjustment.AdjustmentTypeValue, 8)
    TAX = typing___cast(Adjustment.AdjustmentTypeValue, 0)
    UNITEMIZED_TAX = typing___cast(Adjustment.AdjustmentTypeValue, 1)
    INCLUSIVE_TAX = typing___cast(Adjustment.AdjustmentTypeValue, 2)
    DISCOUNT = typing___cast(Adjustment.AdjustmentTypeValue, 3)
    REWARD = typing___cast(Adjustment.AdjustmentTypeValue, 4)
    COUPON = typing___cast(Adjustment.AdjustmentTypeValue, 5)
    ITEM_MODIFIER = typing___cast(Adjustment.AdjustmentTypeValue, 6)
    COMP = typing___cast(Adjustment.AdjustmentTypeValue, 7)
    SURCHARGE = typing___cast(Adjustment.AdjustmentTypeValue, 8)
    type___AdjustmentType = AdjustmentType

    ApplicationScopeValue = typing___NewType('ApplicationScopeValue', builtin___int)
    type___ApplicationScopeValue = ApplicationScopeValue
    ApplicationScope: _ApplicationScope
    class _ApplicationScope(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Adjustment.ApplicationScopeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(Adjustment.ApplicationScopeValue, 0)
        ITEMIZATION_LEVEL = typing___cast(Adjustment.ApplicationScopeValue, 1)
        CART_LEVEL = typing___cast(Adjustment.ApplicationScopeValue, 2)
    UNKNOWN = typing___cast(Adjustment.ApplicationScopeValue, 0)
    ITEMIZATION_LEVEL = typing___cast(Adjustment.ApplicationScopeValue, 1)
    CART_LEVEL = typing___cast(Adjustment.ApplicationScopeValue, 2)
    type___ApplicationScope = ApplicationScope

    class ModifierList(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        SelectionTypeValue = typing___NewType('SelectionTypeValue', builtin___int)
        type___SelectionTypeValue = SelectionTypeValue
        SelectionType: _SelectionType
        class _SelectionType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Adjustment.ModifierList.SelectionTypeValue]):
            DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
            SINGLE = typing___cast(Adjustment.ModifierList.SelectionTypeValue, 0)
            MULTIPLE = typing___cast(Adjustment.ModifierList.SelectionTypeValue, 1)
        SINGLE = typing___cast(Adjustment.ModifierList.SelectionTypeValue, 0)
        MULTIPLE = typing___cast(Adjustment.ModifierList.SelectionTypeValue, 1)
        type___SelectionType = SelectionType

        id: typing___Text = ...
        name: typing___Text = ...
        selection_type: type___Adjustment.ModifierList.SelectionTypeValue = ...

        def __init__(self,
            *,
            id : typing___Optional[typing___Text] = None,
            name : typing___Optional[typing___Text] = None,
            selection_type : typing___Optional[type___Adjustment.ModifierList.SelectionTypeValue] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"id",b"id",u"name",b"name",u"selection_type",b"selection_type"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"id",b"id",u"name",b"name",u"selection_type",b"selection_type"]) -> None: ...
    type___ModifierList = ModifierList

    type: type___Adjustment.AdjustmentTypeValue = ...
    rate: builtin___float = ...
    inclusion_type: squareup___items___items_pb2___Fee.InclusionTypeValue = ...
    adjustment_group: typing___Text = ...
    coupon_token: typing___Text = ...
    tax_label_order: builtin___int = ...
    surcharge_type: squareup___items___items_pb2___Surcharge.TypeValue = ...
    discount_quantity: typing___Text = ...
    coupon_tokens: google___protobuf___internal___containers___RepeatedScalarFieldContainer[typing___Text] = ...
    modify_tax_basis: squareup___items___items_pb2___Discount.ModifyTaxBasisValue = ...
    application_scope: type___Adjustment.ApplicationScopeValue = ...

    @property
    def name_or_translation_type(self) -> squareup___beemo___translation_types_pb2___NameOrTranslationType: ...

    @property
    def applied_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def modifier_list(self) -> type___Adjustment.ModifierList: ...

    @property
    def applied_to_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def after_application_total_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def modifier_quantities(self) -> squareup___bills___cart_pb2___ModifierOptionLineItem.FeatureDetails.Quantities: ...

    @property
    def conversational_modes(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[squareup___bills___cart_pb2___ModifierOptionLineItem.FeatureDetails.ConversationalMode]: ...

    @property
    def tax(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

    def __init__(self,
        *,
        type : typing___Optional[type___Adjustment.AdjustmentTypeValue] = None,
        name_or_translation_type : typing___Optional[squareup___beemo___translation_types_pb2___NameOrTranslationType] = None,
        applied_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        rate : typing___Optional[builtin___float] = None,
        inclusion_type : typing___Optional[squareup___items___items_pb2___Fee.InclusionTypeValue] = None,
        adjustment_group : typing___Optional[typing___Text] = None,
        coupon_token : typing___Optional[typing___Text] = None,
        modifier_list : typing___Optional[type___Adjustment.ModifierList] = None,
        applied_to_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        after_application_total_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        tax_label_order : typing___Optional[builtin___int] = None,
        modifier_quantities : typing___Optional[squareup___bills___cart_pb2___ModifierOptionLineItem.FeatureDetails.Quantities] = None,
        conversational_modes : typing___Optional[typing___Iterable[squareup___bills___cart_pb2___ModifierOptionLineItem.FeatureDetails.ConversationalMode]] = None,
        surcharge_type : typing___Optional[squareup___items___items_pb2___Surcharge.TypeValue] = None,
        tax : typing___Optional[typing___Iterable[type___Adjustment]] = None,
        discount_quantity : typing___Optional[typing___Text] = None,
        coupon_tokens : typing___Optional[typing___Iterable[typing___Text]] = None,
        modify_tax_basis : typing___Optional[squareup___items___items_pb2___Discount.ModifyTaxBasisValue] = None,
        application_scope : typing___Optional[type___Adjustment.ApplicationScopeValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"adjustment_group",b"adjustment_group",u"after_application_total_money",b"after_application_total_money",u"application_scope",b"application_scope",u"applied_money",b"applied_money",u"applied_to_money",b"applied_to_money",u"coupon_token",b"coupon_token",u"discount_quantity",b"discount_quantity",u"inclusion_type",b"inclusion_type",u"modifier_list",b"modifier_list",u"modifier_quantities",b"modifier_quantities",u"modify_tax_basis",b"modify_tax_basis",u"name_or_translation_type",b"name_or_translation_type",u"rate",b"rate",u"surcharge_type",b"surcharge_type",u"tax_label_order",b"tax_label_order",u"type",b"type"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"adjustment_group",b"adjustment_group",u"after_application_total_money",b"after_application_total_money",u"application_scope",b"application_scope",u"applied_money",b"applied_money",u"applied_to_money",b"applied_to_money",u"conversational_modes",b"conversational_modes",u"coupon_token",b"coupon_token",u"coupon_tokens",b"coupon_tokens",u"discount_quantity",b"discount_quantity",u"inclusion_type",b"inclusion_type",u"modifier_list",b"modifier_list",u"modifier_quantities",b"modifier_quantities",u"modify_tax_basis",b"modify_tax_basis",u"name_or_translation_type",b"name_or_translation_type",u"rate",b"rate",u"surcharge_type",b"surcharge_type",u"tax",b"tax",u"tax_label_order",b"tax_label_order",u"type",b"type"]) -> None: ...
type___Adjustment = Adjustment

class ItemDetail(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    category_name: typing___Text = ...
    sku: typing___Text = ...
    image_url: typing___Text = ...
    item_id: typing___Text = ...
    item_variation_id: typing___Text = ...
    image_id: typing___Text = ...
    abbreviation: typing___Text = ...
    gtin: typing___Text = ...

    @property
    def icon_color(self) -> squareup___common___colors_pb2___RGBAColor: ...

    def __init__(self,
        *,
        category_name : typing___Optional[typing___Text] = None,
        sku : typing___Optional[typing___Text] = None,
        image_url : typing___Optional[typing___Text] = None,
        icon_color : typing___Optional[squareup___common___colors_pb2___RGBAColor] = None,
        item_id : typing___Optional[typing___Text] = None,
        item_variation_id : typing___Optional[typing___Text] = None,
        image_id : typing___Optional[typing___Text] = None,
        abbreviation : typing___Optional[typing___Text] = None,
        gtin : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"abbreviation",b"abbreviation",u"category_name",b"category_name",u"gtin",b"gtin",u"icon_color",b"icon_color",u"image_id",b"image_id",u"image_url",b"image_url",u"item_id",b"item_id",u"item_variation_id",b"item_variation_id",u"sku",b"sku"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"abbreviation",b"abbreviation",u"category_name",b"category_name",u"gtin",b"gtin",u"icon_color",b"icon_color",u"image_id",b"image_id",u"image_url",b"image_url",u"item_id",b"item_id",u"item_variation_id",b"item_variation_id",u"sku",b"sku"]) -> None: ...
type___ItemDetail = ItemDetail

class DiningOption(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    DiningOptionTypeValue = typing___NewType('DiningOptionTypeValue', builtin___int)
    type___DiningOptionTypeValue = DiningOptionTypeValue
    DiningOptionType: _DiningOptionType
    class _DiningOptionType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[DiningOption.DiningOptionTypeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        DEFAULT = typing___cast(DiningOption.DiningOptionTypeValue, 1)
        SELECTED = typing___cast(DiningOption.DiningOptionTypeValue, 2)
    DEFAULT = typing___cast(DiningOption.DiningOptionTypeValue, 1)
    SELECTED = typing___cast(DiningOption.DiningOptionTypeValue, 2)
    type___DiningOptionType = DiningOptionType

    id: typing___Text = ...
    name: typing___Text = ...
    ordinal: builtin___int = ...
    type: type___DiningOption.DiningOptionTypeValue = ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        name : typing___Optional[typing___Text] = None,
        ordinal : typing___Optional[builtin___int] = None,
        type : typing___Optional[type___DiningOption.DiningOptionTypeValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"id",b"id",u"name",b"name",u"ordinal",b"ordinal",u"type",b"type"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"id",b"id",u"name",b"name",u"ordinal",b"ordinal",u"type",b"type"]) -> None: ...
type___DiningOption = DiningOption

class Itemization(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class GiftCardDetails(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        hashed_gift_card_token: typing___Text = ...
        activity_type: squareup___bills___cart_pb2___Itemization.Configuration.SelectedOptions.ItemVariationDetails.GiftCardDetails.ActivityTypeValue = ...
        gift_card_token: typing___Text = ...
        pan_suffix: typing___Text = ...

        def __init__(self,
            *,
            hashed_gift_card_token : typing___Optional[typing___Text] = None,
            activity_type : typing___Optional[squareup___bills___cart_pb2___Itemization.Configuration.SelectedOptions.ItemVariationDetails.GiftCardDetails.ActivityTypeValue] = None,
            gift_card_token : typing___Optional[typing___Text] = None,
            pan_suffix : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"activity_type",b"activity_type",u"gift_card_token",b"gift_card_token",u"hashed_gift_card_token",b"hashed_gift_card_token",u"pan_suffix",b"pan_suffix"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"activity_type",b"activity_type",u"gift_card_token",b"gift_card_token",u"hashed_gift_card_token",b"hashed_gift_card_token",u"pan_suffix",b"pan_suffix"]) -> None: ...
    type___GiftCardDetails = GiftCardDetails

    class CostOfGoodsAmounts(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        item_variation_cogs_quantity: typing___Text = ...

        @property
        def item_variation_total_cost_money(self) -> squareup___common___currency_pb2___Money: ...

        def __init__(self,
            *,
            item_variation_total_cost_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
            item_variation_cogs_quantity : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"item_variation_cogs_quantity",b"item_variation_cogs_quantity",u"item_variation_total_cost_money",b"item_variation_total_cost_money"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"item_variation_cogs_quantity",b"item_variation_cogs_quantity",u"item_variation_total_cost_money",b"item_variation_total_cost_money"]) -> None: ...
    type___CostOfGoodsAmounts = CostOfGoodsAmounts

    class FeatureDetails(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def seating(self) -> squareup___bills___cart_pb2___Itemization.FeatureDetails.Seating: ...

        def __init__(self,
            *,
            seating : typing___Optional[squareup___bills___cart_pb2___Itemization.FeatureDetails.Seating] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"seating",b"seating"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"seating",b"seating"]) -> None: ...
    type___FeatureDetails = FeatureDetails

    class Menu(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        name: typing___Text = ...
        cogs_object_id: typing___Text = ...

        def __init__(self,
            *,
            name : typing___Optional[typing___Text] = None,
            cogs_object_id : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"cogs_object_id",b"cogs_object_id",u"name",b"name"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"cogs_object_id",b"cogs_object_id",u"name",b"name"]) -> None: ...
    type___Menu = Menu

    class EmployeeAttribution(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def employee(self) -> squareup___beemo___v2___models___users_pb2___Employee: ...

        def __init__(self,
            *,
            employee : typing___Optional[squareup___beemo___v2___models___users_pb2___Employee] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"employee",b"employee"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"employee",b"employee"]) -> None: ...
    type___EmployeeAttribution = EmployeeAttribution

    quantity: builtin___float = ...
    item_variation_name: typing___Text = ...
    itemization_notes: typing___Text = ...
    description: typing___Text = ...
    display_quantity: typing___Text = ...

    @property
    def name_or_translation_type(self) -> squareup___beemo___translation_types_pb2___NameOrTranslationType: ...

    @property
    def total_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def single_quantity_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def multiple_quantity_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def product_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def gross_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def discount_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def refunded_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def net_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def australian_gross_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def gift_card_net_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def item_detail(self) -> type___ItemDetail: ...

    @property
    def discount(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

    @property
    def tax(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

    @property
    def item_modifier(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

    @property
    def gift_card_details(self) -> type___Itemization.GiftCardDetails: ...

    @property
    def dining_option(self) -> type___DiningOption: ...

    @property
    def event(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[squareup___bills___cart_pb2___Itemization.Event]: ...

    @property
    def fifo_cost_of_goods_sold_amounts(self) -> type___Itemization.CostOfGoodsAmounts: ...

    @property
    def lifo_cost_of_goods_sold_amounts(self) -> type___Itemization.CostOfGoodsAmounts: ...

    @property
    def average_cost_of_goods_sold_amounts(self) -> type___Itemization.CostOfGoodsAmounts: ...

    @property
    def feature_details(self) -> type___Itemization.FeatureDetails: ...

    @property
    def menu(self) -> type___Itemization.Menu: ...

    @property
    def quantity_unit(self) -> squareup___omg___model___orders_pb2___Order.QuantityUnit: ...

    @property
    def commission_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def employee_attributions(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Itemization.EmployeeAttribution]: ...

    def __init__(self,
        *,
        name_or_translation_type : typing___Optional[squareup___beemo___translation_types_pb2___NameOrTranslationType] = None,
        quantity : typing___Optional[builtin___float] = None,
        total_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        single_quantity_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        multiple_quantity_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        product_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        gross_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        discount_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        refunded_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        net_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        australian_gross_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        gift_card_net_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        item_variation_name : typing___Optional[typing___Text] = None,
        item_detail : typing___Optional[type___ItemDetail] = None,
        itemization_notes : typing___Optional[typing___Text] = None,
        description : typing___Optional[typing___Text] = None,
        discount : typing___Optional[typing___Iterable[type___Adjustment]] = None,
        tax : typing___Optional[typing___Iterable[type___Adjustment]] = None,
        item_modifier : typing___Optional[typing___Iterable[type___Adjustment]] = None,
        gift_card_details : typing___Optional[type___Itemization.GiftCardDetails] = None,
        dining_option : typing___Optional[type___DiningOption] = None,
        event : typing___Optional[typing___Iterable[squareup___bills___cart_pb2___Itemization.Event]] = None,
        fifo_cost_of_goods_sold_amounts : typing___Optional[type___Itemization.CostOfGoodsAmounts] = None,
        lifo_cost_of_goods_sold_amounts : typing___Optional[type___Itemization.CostOfGoodsAmounts] = None,
        average_cost_of_goods_sold_amounts : typing___Optional[type___Itemization.CostOfGoodsAmounts] = None,
        feature_details : typing___Optional[type___Itemization.FeatureDetails] = None,
        menu : typing___Optional[type___Itemization.Menu] = None,
        quantity_unit : typing___Optional[squareup___omg___model___orders_pb2___Order.QuantityUnit] = None,
        display_quantity : typing___Optional[typing___Text] = None,
        commission_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        employee_attributions : typing___Optional[typing___Iterable[type___Itemization.EmployeeAttribution]] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"australian_gross_sales_money",b"australian_gross_sales_money",u"average_cost_of_goods_sold_amounts",b"average_cost_of_goods_sold_amounts",u"commission_money",b"commission_money",u"description",b"description",u"dining_option",b"dining_option",u"discount_money",b"discount_money",u"display_quantity",b"display_quantity",u"feature_details",b"feature_details",u"fifo_cost_of_goods_sold_amounts",b"fifo_cost_of_goods_sold_amounts",u"gift_card_details",b"gift_card_details",u"gift_card_net_sales_money",b"gift_card_net_sales_money",u"gross_sales_money",b"gross_sales_money",u"item_detail",b"item_detail",u"item_variation_name",b"item_variation_name",u"itemization_notes",b"itemization_notes",u"lifo_cost_of_goods_sold_amounts",b"lifo_cost_of_goods_sold_amounts",u"menu",b"menu",u"multiple_quantity_money",b"multiple_quantity_money",u"name_or_translation_type",b"name_or_translation_type",u"net_sales_money",b"net_sales_money",u"product_sales_money",b"product_sales_money",u"quantity",b"quantity",u"quantity_unit",b"quantity_unit",u"refunded_money",b"refunded_money",u"single_quantity_money",b"single_quantity_money",u"total_money",b"total_money"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"australian_gross_sales_money",b"australian_gross_sales_money",u"average_cost_of_goods_sold_amounts",b"average_cost_of_goods_sold_amounts",u"commission_money",b"commission_money",u"description",b"description",u"dining_option",b"dining_option",u"discount",b"discount",u"discount_money",b"discount_money",u"display_quantity",b"display_quantity",u"employee_attributions",b"employee_attributions",u"event",b"event",u"feature_details",b"feature_details",u"fifo_cost_of_goods_sold_amounts",b"fifo_cost_of_goods_sold_amounts",u"gift_card_details",b"gift_card_details",u"gift_card_net_sales_money",b"gift_card_net_sales_money",u"gross_sales_money",b"gross_sales_money",u"item_detail",b"item_detail",u"item_modifier",b"item_modifier",u"item_variation_name",b"item_variation_name",u"itemization_notes",b"itemization_notes",u"lifo_cost_of_goods_sold_amounts",b"lifo_cost_of_goods_sold_amounts",u"menu",b"menu",u"multiple_quantity_money",b"multiple_quantity_money",u"name_or_translation_type",b"name_or_translation_type",u"net_sales_money",b"net_sales_money",u"product_sales_money",b"product_sales_money",u"quantity",b"quantity",u"quantity_unit",b"quantity_unit",u"refunded_money",b"refunded_money",u"single_quantity_money",b"single_quantity_money",u"tax",b"tax",u"total_money",b"total_money"]) -> None: ...
type___Itemization = Itemization

class ReturnItemization(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    source_itemization_token: typing___Text = ...

    @property
    def itemization(self) -> type___Itemization: ...

    def __init__(self,
        *,
        itemization : typing___Optional[type___Itemization] = None,
        source_itemization_token : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"itemization",b"itemization",u"source_itemization_token",b"source_itemization_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"itemization",b"itemization",u"source_itemization_token",b"source_itemization_token"]) -> None: ...
type___ReturnItemization = ReturnItemization

class FeatureDetails(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class OpenTicket(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class PredefinedTicket(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

            @property
            def ticket_group(self) -> squareup___items___items_pb2___TicketGroup: ...

            @property
            def ticket_template(self) -> squareup___items___items_pb2___TicketTemplate: ...

            def __init__(self,
                *,
                ticket_group : typing___Optional[squareup___items___items_pb2___TicketGroup] = None,
                ticket_template : typing___Optional[squareup___items___items_pb2___TicketTemplate] = None,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions___Literal[u"ticket_group",b"ticket_group",u"ticket_template",b"ticket_template"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"ticket_group",b"ticket_group",u"ticket_template",b"ticket_template"]) -> None: ...
        type___PredefinedTicket = PredefinedTicket

        name: typing___Text = ...

        @property
        def ticket_owner(self) -> squareup___beemo___v2___models___users_pb2___CreatorDetails: ...

        @property
        def predefined_ticket(self) -> type___FeatureDetails.OpenTicket.PredefinedTicket: ...

        def __init__(self,
            *,
            ticket_owner : typing___Optional[squareup___beemo___v2___models___users_pb2___CreatorDetails] = None,
            name : typing___Optional[typing___Text] = None,
            predefined_ticket : typing___Optional[type___FeatureDetails.OpenTicket.PredefinedTicket] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"name",b"name",u"predefined_ticket",b"predefined_ticket",u"ticket_owner",b"ticket_owner"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"name",b"name",u"predefined_ticket",b"predefined_ticket",u"ticket_owner",b"ticket_owner"]) -> None: ...
    type___OpenTicket = OpenTicket


    @property
    def open_ticket(self) -> type___FeatureDetails.OpenTicket: ...

    @property
    def seating(self) -> squareup___bills___cart_pb2___Cart.FeatureDetails.Seating: ...

    @property
    def appointments_details(self) -> squareup___bills___cart_pb2___Cart.FeatureDetails.AppointmentsDetails: ...

    @property
    def lifecycle_event_transfer_employee(self) -> squareup___beemo___v2___models___users_pb2___CreatorDetails: ...

    @property
    def invoice(self) -> squareup___bills___cart_pb2___Cart.FeatureDetails.Invoice: ...

    def __init__(self,
        *,
        open_ticket : typing___Optional[type___FeatureDetails.OpenTicket] = None,
        seating : typing___Optional[squareup___bills___cart_pb2___Cart.FeatureDetails.Seating] = None,
        appointments_details : typing___Optional[squareup___bills___cart_pb2___Cart.FeatureDetails.AppointmentsDetails] = None,
        lifecycle_event_transfer_employee : typing___Optional[squareup___beemo___v2___models___users_pb2___CreatorDetails] = None,
        invoice : typing___Optional[squareup___bills___cart_pb2___Cart.FeatureDetails.Invoice] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"appointments_details",b"appointments_details",u"invoice",b"invoice",u"lifecycle_event_transfer_employee",b"lifecycle_event_transfer_employee",u"open_ticket",b"open_ticket",u"seating",b"seating"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"appointments_details",b"appointments_details",u"invoice",b"invoice",u"lifecycle_event_transfer_employee",b"lifecycle_event_transfer_employee",u"open_ticket",b"open_ticket",u"seating",b"seating"]) -> None: ...
type___FeatureDetails = FeatureDetails

class TipLineItem(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    tender_server_token: typing___Text = ...

    @property
    def applied_money(self) -> squareup___common___currency_pb2___Money: ...

    def __init__(self,
        *,
        applied_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        tender_server_token : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"applied_money",b"applied_money",u"tender_server_token",b"tender_server_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"applied_money",b"applied_money",u"tender_server_token",b"tender_server_token"]) -> None: ...
type___TipLineItem = TipLineItem

class BeemoCart(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class ReturnLineItem(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        ReturnLineItemTypeValue = typing___NewType('ReturnLineItemTypeValue', builtin___int)
        type___ReturnLineItemTypeValue = ReturnLineItemTypeValue
        ReturnLineItemType: _ReturnLineItemType
        class _ReturnLineItemType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[BeemoCart.ReturnLineItem.ReturnLineItemTypeValue]):
            DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
            AMOUNT_BASED = typing___cast(BeemoCart.ReturnLineItem.ReturnLineItemTypeValue, 0)
            ITEMIZED = typing___cast(BeemoCart.ReturnLineItem.ReturnLineItemTypeValue, 1)
        AMOUNT_BASED = typing___cast(BeemoCart.ReturnLineItem.ReturnLineItemTypeValue, 0)
        ITEMIZED = typing___cast(BeemoCart.ReturnLineItem.ReturnLineItemTypeValue, 1)
        type___ReturnLineItemType = ReturnLineItemType

        class ReturnTipLineItem(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

            @property
            def tip_line_item(self) -> type___TipLineItem: ...

            def __init__(self,
                *,
                tip_line_item : typing___Optional[type___TipLineItem] = None,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions___Literal[u"tip_line_item",b"tip_line_item"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"tip_line_item",b"tip_line_item"]) -> None: ...
        type___ReturnTipLineItem = ReturnTipLineItem

        return_line_item_type: type___BeemoCart.ReturnLineItem.ReturnLineItemTypeValue = ...

        @property
        def return_tip_line_item(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___BeemoCart.ReturnLineItem.ReturnTipLineItem]: ...

        @property
        def return_swedish_rounding_money(self) -> squareup___common___currency_pb2___Money: ...

        @property
        def return_itemization(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___ReturnItemization]: ...

        @property
        def return_surcharge(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

        @property
        def return_tax(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

        @property
        def return_discount(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

        def __init__(self,
            *,
            return_tip_line_item : typing___Optional[typing___Iterable[type___BeemoCart.ReturnLineItem.ReturnTipLineItem]] = None,
            return_swedish_rounding_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
            return_itemization : typing___Optional[typing___Iterable[type___ReturnItemization]] = None,
            return_line_item_type : typing___Optional[type___BeemoCart.ReturnLineItem.ReturnLineItemTypeValue] = None,
            return_surcharge : typing___Optional[typing___Iterable[type___Adjustment]] = None,
            return_tax : typing___Optional[typing___Iterable[type___Adjustment]] = None,
            return_discount : typing___Optional[typing___Iterable[type___Adjustment]] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"return_line_item_type",b"return_line_item_type",u"return_swedish_rounding_money",b"return_swedish_rounding_money"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"return_discount",b"return_discount",u"return_itemization",b"return_itemization",u"return_line_item_type",b"return_line_item_type",u"return_surcharge",b"return_surcharge",u"return_swedish_rounding_money",b"return_swedish_rounding_money",u"return_tax",b"return_tax",u"return_tip_line_item",b"return_tip_line_item"]) -> None: ...
    type___ReturnLineItem = ReturnLineItem


    @property
    def return_line_item(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___BeemoCart.ReturnLineItem]: ...

    @property
    def return_amounts(self) -> type___Amounts: ...

    def __init__(self,
        *,
        return_line_item : typing___Optional[typing___Iterable[type___BeemoCart.ReturnLineItem]] = None,
        return_amounts : typing___Optional[type___Amounts] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"return_amounts",b"return_amounts"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"return_amounts",b"return_amounts",u"return_line_item",b"return_line_item"]) -> None: ...
type___BeemoCart = BeemoCart

class Amounts(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def product_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def gross_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def discount_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def net_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def inclusive_tax_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def additive_tax_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def tax_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def tip_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def total_collected_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def processing_fee_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def net_total_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def total_deposited_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def swedish_rounding_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def surcharge_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def surcharge_inclusive_tax_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def gift_card_net_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def processing_fee_amounts(self) -> squareup___beemo___v2___models___payment_pb2___ProcessingFeeAmounts: ...

    def __init__(self,
        *,
        product_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        gross_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        discount_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        net_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        inclusive_tax_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        additive_tax_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        tax_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        tip_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        total_collected_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        processing_fee_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        net_total_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        total_deposited_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        swedish_rounding_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        surcharge_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        surcharge_inclusive_tax_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        gift_card_net_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        processing_fee_amounts : typing___Optional[squareup___beemo___v2___models___payment_pb2___ProcessingFeeAmounts] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"additive_tax_money",b"additive_tax_money",u"discount_money",b"discount_money",u"gift_card_net_sales_money",b"gift_card_net_sales_money",u"gross_sales_money",b"gross_sales_money",u"inclusive_tax_money",b"inclusive_tax_money",u"net_sales_money",b"net_sales_money",u"net_total_money",b"net_total_money",u"processing_fee_amounts",b"processing_fee_amounts",u"processing_fee_money",b"processing_fee_money",u"product_sales_money",b"product_sales_money",u"surcharge_inclusive_tax_money",b"surcharge_inclusive_tax_money",u"surcharge_money",b"surcharge_money",u"swedish_rounding_money",b"swedish_rounding_money",u"tax_money",b"tax_money",u"tip_money",b"tip_money",u"total_collected_money",b"total_collected_money",u"total_deposited_money",b"total_deposited_money"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"additive_tax_money",b"additive_tax_money",u"discount_money",b"discount_money",u"gift_card_net_sales_money",b"gift_card_net_sales_money",u"gross_sales_money",b"gross_sales_money",u"inclusive_tax_money",b"inclusive_tax_money",u"net_sales_money",b"net_sales_money",u"net_total_money",b"net_total_money",u"processing_fee_amounts",b"processing_fee_amounts",u"processing_fee_money",b"processing_fee_money",u"product_sales_money",b"product_sales_money",u"surcharge_inclusive_tax_money",b"surcharge_inclusive_tax_money",u"surcharge_money",b"surcharge_money",u"swedish_rounding_money",b"swedish_rounding_money",u"tax_money",b"tax_money",u"tip_money",b"tip_money",u"total_collected_money",b"total_collected_money",u"total_deposited_money",b"total_deposited_money"]) -> None: ...
type___Amounts = Amounts

class Transaction(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class EmployeeAttributionDetails(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def employee(self) -> squareup___beemo___v2___models___users_pb2___Employee: ...

        @property
        def tip_money(self) -> squareup___common___currency_pb2___Money: ...

        @property
        def auto_gratuity_money(self) -> squareup___common___currency_pb2___Money: ...

        @property
        def total_commission_money(self) -> squareup___common___currency_pb2___Money: ...

        def __init__(self,
            *,
            employee : typing___Optional[squareup___beemo___v2___models___users_pb2___Employee] = None,
            tip_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
            auto_gratuity_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
            total_commission_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"auto_gratuity_money",b"auto_gratuity_money",u"employee",b"employee",u"tip_money",b"tip_money",u"total_commission_money",b"total_commission_money"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"auto_gratuity_money",b"auto_gratuity_money",u"employee",b"employee",u"tip_money",b"tip_money",u"total_commission_money",b"total_commission_money"]) -> None: ...
    type___EmployeeAttributionDetails = EmployeeAttributionDetails

    merchant_token: typing___Text = ...
    bill_token: typing___Text = ...
    bill_event_token: typing___Text = ...
    event_type: squareup___beemo___v3___bill_pb2___EventTypeValue = ...
    activity_type: squareup___beemo___v3___reporting_params_pb2___ActivityTypeValue = ...
    bill_note: typing___Text = ...
    square_product: squareup___common___payment_pb2___SquareProductValue = ...
    payment_token: typing___Text = ...
    order_reference_id: typing___Text = ...
    order_short_reference_id: typing___Text = ...
    external_api_reference_id: typing___Text = ...

    @property
    def completed_at(self) -> squareup___common___time_pb2___DateTime: ...

    @property
    def subunit_merchant(self) -> squareup___beemo___v2___models___users_pb2___Merchant: ...

    @property
    def tender(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[squareup___beemo___v2___models___payment_pb2___Tender]: ...

    @property
    def refund(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[squareup___beemo___v2___models___payment_pb2___Refund]: ...

    @property
    def refund_v3(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[squareup___beemo___v2___models___refund_v3_pb2___BeemoRefundV3]: ...

    @property
    def itemization(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Itemization]: ...

    @property
    def void_itemization(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Itemization]: ...

    @property
    def inclusive_tax(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

    @property
    def additive_tax(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

    @property
    def discounts(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

    @property
    def surcharges(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Adjustment]: ...

    @property
    def return_cart(self) -> type___BeemoCart: ...

    @property
    def product_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def gross_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def discount_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def net_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def inclusive_tax_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def additive_tax_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def tax_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def tip_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def total_collected_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def processing_fee_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def net_total_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def total_deposited_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def refunded_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def swedish_rounding_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def surcharge_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def surcharge_inclusive_tax_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def gift_card_net_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def processing_fee_amounts(self) -> squareup___beemo___v2___models___payment_pb2___ProcessingFeeAmounts: ...

    @property
    def default_dining_option(self) -> type___DiningOption: ...

    @property
    def virtual_register_details(self) -> squareup___bills___square_product_attributes_pb2___CommonPointOfSaleAttributes.VirtualRegister: ...

    @property
    def feature_details(self) -> type___FeatureDetails: ...

    @property
    def total_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def creator(self) -> squareup___beemo___v2___models___users_pb2___Merchant: ...

    @property
    def device(self) -> squareup___beemo___v2___models___users_pb2___Device: ...

    @property
    def full_refund(self) -> squareup___beemo___v2___models___payment_pb2___FullRefund: ...

    @property
    def australian_gross_sales_money(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def net_amounts(self) -> type___Amounts: ...

    @property
    def fulfillment(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[squareup___omg___model___orders_pb2___Order.Fulfillment]: ...

    @property
    def order_source(self) -> squareup___omg___model___orders_pb2___Order.Source: ...

    @property
    def sale_amounts_employee_attribution(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Transaction.EmployeeAttributionDetails]: ...

    @property
    def return_amounts_employee_attribution(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Transaction.EmployeeAttributionDetails]: ...

    def __init__(self,
        *,
        merchant_token : typing___Optional[typing___Text] = None,
        bill_token : typing___Optional[typing___Text] = None,
        bill_event_token : typing___Optional[typing___Text] = None,
        completed_at : typing___Optional[squareup___common___time_pb2___DateTime] = None,
        event_type : typing___Optional[squareup___beemo___v3___bill_pb2___EventTypeValue] = None,
        activity_type : typing___Optional[squareup___beemo___v3___reporting_params_pb2___ActivityTypeValue] = None,
        subunit_merchant : typing___Optional[squareup___beemo___v2___models___users_pb2___Merchant] = None,
        tender : typing___Optional[typing___Iterable[squareup___beemo___v2___models___payment_pb2___Tender]] = None,
        refund : typing___Optional[typing___Iterable[squareup___beemo___v2___models___payment_pb2___Refund]] = None,
        refund_v3 : typing___Optional[typing___Iterable[squareup___beemo___v2___models___refund_v3_pb2___BeemoRefundV3]] = None,
        itemization : typing___Optional[typing___Iterable[type___Itemization]] = None,
        void_itemization : typing___Optional[typing___Iterable[type___Itemization]] = None,
        inclusive_tax : typing___Optional[typing___Iterable[type___Adjustment]] = None,
        additive_tax : typing___Optional[typing___Iterable[type___Adjustment]] = None,
        discounts : typing___Optional[typing___Iterable[type___Adjustment]] = None,
        surcharges : typing___Optional[typing___Iterable[type___Adjustment]] = None,
        return_cart : typing___Optional[type___BeemoCart] = None,
        product_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        gross_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        discount_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        net_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        inclusive_tax_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        additive_tax_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        tax_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        tip_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        total_collected_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        processing_fee_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        net_total_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        total_deposited_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        refunded_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        swedish_rounding_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        surcharge_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        surcharge_inclusive_tax_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        gift_card_net_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        processing_fee_amounts : typing___Optional[squareup___beemo___v2___models___payment_pb2___ProcessingFeeAmounts] = None,
        bill_note : typing___Optional[typing___Text] = None,
        default_dining_option : typing___Optional[type___DiningOption] = None,
        virtual_register_details : typing___Optional[squareup___bills___square_product_attributes_pb2___CommonPointOfSaleAttributes.VirtualRegister] = None,
        feature_details : typing___Optional[type___FeatureDetails] = None,
        square_product : typing___Optional[squareup___common___payment_pb2___SquareProductValue] = None,
        payment_token : typing___Optional[typing___Text] = None,
        total_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        creator : typing___Optional[squareup___beemo___v2___models___users_pb2___Merchant] = None,
        device : typing___Optional[squareup___beemo___v2___models___users_pb2___Device] = None,
        full_refund : typing___Optional[squareup___beemo___v2___models___payment_pb2___FullRefund] = None,
        australian_gross_sales_money : typing___Optional[squareup___common___currency_pb2___Money] = None,
        net_amounts : typing___Optional[type___Amounts] = None,
        fulfillment : typing___Optional[typing___Iterable[squareup___omg___model___orders_pb2___Order.Fulfillment]] = None,
        order_reference_id : typing___Optional[typing___Text] = None,
        order_short_reference_id : typing___Optional[typing___Text] = None,
        order_source : typing___Optional[squareup___omg___model___orders_pb2___Order.Source] = None,
        external_api_reference_id : typing___Optional[typing___Text] = None,
        sale_amounts_employee_attribution : typing___Optional[typing___Iterable[type___Transaction.EmployeeAttributionDetails]] = None,
        return_amounts_employee_attribution : typing___Optional[typing___Iterable[type___Transaction.EmployeeAttributionDetails]] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"activity_type",b"activity_type",u"additive_tax_money",b"additive_tax_money",u"australian_gross_sales_money",b"australian_gross_sales_money",u"bill_event_token",b"bill_event_token",u"bill_note",b"bill_note",u"bill_token",b"bill_token",u"completed_at",b"completed_at",u"creator",b"creator",u"default_dining_option",b"default_dining_option",u"device",b"device",u"discount_money",b"discount_money",u"event_type",b"event_type",u"external_api_reference_id",b"external_api_reference_id",u"feature_details",b"feature_details",u"full_refund",b"full_refund",u"gift_card_net_sales_money",b"gift_card_net_sales_money",u"gross_sales_money",b"gross_sales_money",u"inclusive_tax_money",b"inclusive_tax_money",u"merchant_token",b"merchant_token",u"net_amounts",b"net_amounts",u"net_sales_money",b"net_sales_money",u"net_total_money",b"net_total_money",u"order_reference_id",b"order_reference_id",u"order_short_reference_id",b"order_short_reference_id",u"order_source",b"order_source",u"payment_token",b"payment_token",u"processing_fee_amounts",b"processing_fee_amounts",u"processing_fee_money",b"processing_fee_money",u"product_sales_money",b"product_sales_money",u"refunded_money",b"refunded_money",u"return_cart",b"return_cart",u"square_product",b"square_product",u"subunit_merchant",b"subunit_merchant",u"surcharge_inclusive_tax_money",b"surcharge_inclusive_tax_money",u"surcharge_money",b"surcharge_money",u"swedish_rounding_money",b"swedish_rounding_money",u"tax_money",b"tax_money",u"tip_money",b"tip_money",u"total_collected_money",b"total_collected_money",u"total_deposited_money",b"total_deposited_money",u"total_money",b"total_money",u"virtual_register_details",b"virtual_register_details"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"activity_type",b"activity_type",u"additive_tax",b"additive_tax",u"additive_tax_money",b"additive_tax_money",u"australian_gross_sales_money",b"australian_gross_sales_money",u"bill_event_token",b"bill_event_token",u"bill_note",b"bill_note",u"bill_token",b"bill_token",u"completed_at",b"completed_at",u"creator",b"creator",u"default_dining_option",b"default_dining_option",u"device",b"device",u"discount_money",b"discount_money",u"discounts",b"discounts",u"event_type",b"event_type",u"external_api_reference_id",b"external_api_reference_id",u"feature_details",b"feature_details",u"fulfillment",b"fulfillment",u"full_refund",b"full_refund",u"gift_card_net_sales_money",b"gift_card_net_sales_money",u"gross_sales_money",b"gross_sales_money",u"inclusive_tax",b"inclusive_tax",u"inclusive_tax_money",b"inclusive_tax_money",u"itemization",b"itemization",u"merchant_token",b"merchant_token",u"net_amounts",b"net_amounts",u"net_sales_money",b"net_sales_money",u"net_total_money",b"net_total_money",u"order_reference_id",b"order_reference_id",u"order_short_reference_id",b"order_short_reference_id",u"order_source",b"order_source",u"payment_token",b"payment_token",u"processing_fee_amounts",b"processing_fee_amounts",u"processing_fee_money",b"processing_fee_money",u"product_sales_money",b"product_sales_money",u"refund",b"refund",u"refund_v3",b"refund_v3",u"refunded_money",b"refunded_money",u"return_amounts_employee_attribution",b"return_amounts_employee_attribution",u"return_cart",b"return_cart",u"sale_amounts_employee_attribution",b"sale_amounts_employee_attribution",u"square_product",b"square_product",u"subunit_merchant",b"subunit_merchant",u"surcharge_inclusive_tax_money",b"surcharge_inclusive_tax_money",u"surcharge_money",b"surcharge_money",u"surcharges",b"surcharges",u"swedish_rounding_money",b"swedish_rounding_money",u"tax_money",b"tax_money",u"tender",b"tender",u"tip_money",b"tip_money",u"total_collected_money",b"total_collected_money",u"total_deposited_money",b"total_deposited_money",u"total_money",b"total_money",u"virtual_register_details",b"virtual_register_details",u"void_itemization",b"void_itemization"]) -> None: ...
type___Transaction = Transaction

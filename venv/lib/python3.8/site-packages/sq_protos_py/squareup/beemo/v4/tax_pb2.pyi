# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.beemo.translation_types_pb2 import (
    NameOrType as squareup___beemo___translation_types_pb2___NameOrType,
)

from typing import (
    NewType as typing___NewType,
    Optional as typing___Optional,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Tax(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    TypeValue = typing___NewType('TypeValue', builtin___int)
    type___TypeValue = TypeValue
    Type: _Type
    class _Type(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Tax.TypeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(Tax.TypeValue, 0)
        ADDITIVE = typing___cast(Tax.TypeValue, 1)
        INCLUSIVE = typing___cast(Tax.TypeValue, 2)
    UNKNOWN = typing___cast(Tax.TypeValue, 0)
    ADDITIVE = typing___cast(Tax.TypeValue, 1)
    INCLUSIVE = typing___cast(Tax.TypeValue, 2)
    type___Type = Type

    type: type___Tax.TypeValue = ...
    rate: builtin___float = ...
    amount: builtin___int = ...

    @property
    def name(self) -> squareup___beemo___translation_types_pb2___NameOrType: ...

    def __init__(self,
        *,
        name : typing___Optional[squareup___beemo___translation_types_pb2___NameOrType] = None,
        type : typing___Optional[type___Tax.TypeValue] = None,
        rate : typing___Optional[builtin___float] = None,
        amount : typing___Optional[builtin___int] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"amount",b"amount",u"name",b"name",u"rate",b"rate",u"type",b"type"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"amount",b"amount",u"name",b"name",u"rate",b"rate",u"type",b"type"]) -> None: ...
type___Tax = Tax

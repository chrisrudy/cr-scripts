# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.bankc import service_pb2 as squareup_dot_bankc_dot_service__pb2


class BalanceProxyServiceStub(object):
    """TODO(eyung): Define FreezeBalance, UnfreezeBalance, DeactivateBalance
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterPhysicalBalance = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/RegisterPhysicalBalance',
                request_serializer=squareup_dot_bankc_dot_service__pb2.RegisterPhysicalBalanceRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.RegisterPhysicalBalanceResponse.FromString,
                )
        self.CreateBalanceReservation = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/CreateBalanceReservation',
                request_serializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceReservationRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceReservationResponse.FromString,
                )
        self.CommitBalanceReservation = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/CommitBalanceReservation',
                request_serializer=squareup_dot_bankc_dot_service__pb2.CommitBalanceReservationRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.CommitBalanceReservationResponse.FromString,
                )
        self.AbortBalanceReservation = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/AbortBalanceReservation',
                request_serializer=squareup_dot_bankc_dot_service__pb2.AbortBalanceReservationRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.AbortBalanceReservationResponse.FromString,
                )
        self.GetCurrentBalanceState = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/GetCurrentBalanceState',
                request_serializer=squareup_dot_bankc_dot_service__pb2.GetCurrentBalanceStateRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.GetCurrentBalanceStateResponse.FromString,
                )
        self.ListBalancesForUnit = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/ListBalancesForUnit',
                request_serializer=squareup_dot_bankc_dot_service__pb2.ListBalancesForUnitRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.ListBalancesForUnitResponse.FromString,
                )
        self.GetMainBalanceForUnit = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/GetMainBalanceForUnit',
                request_serializer=squareup_dot_bankc_dot_service__pb2.GetMainBalanceForUnitRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.GetMainBalanceForUnitResponse.FromString,
                )
        self.RecordPhysicalMoneyMovement = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/RecordPhysicalMoneyMovement',
                request_serializer=squareup_dot_bankc_dot_service__pb2.RecordPhysicalMoneyMovementRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.RecordPhysicalMoneyMovementResponse.FromString,
                )
        self.UpdatePhysicalMoneyMovement = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/UpdatePhysicalMoneyMovement',
                request_serializer=squareup_dot_bankc_dot_service__pb2.UpdatePhysicalMoneyMovementRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.UpdatePhysicalMoneyMovementResponse.FromString,
                )
        self.GetBalanceProviderInfo = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/GetBalanceProviderInfo',
                request_serializer=squareup_dot_bankc_dot_service__pb2.GetBalanceProviderInfoRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.GetBalanceProviderInfoResponse.FromString,
                )
        self.CommitTransaction = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/CommitTransaction',
                request_serializer=squareup_dot_bankc_dot_service__pb2.CommitTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.CommitTransactionResponse.FromString,
                )
        self.AbortTransaction = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/AbortTransaction',
                request_serializer=squareup_dot_bankc_dot_service__pb2.AbortTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.AbortTransactionResponse.FromString,
                )
        self.AbortOrReverseTransaction = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/AbortOrReverseTransaction',
                request_serializer=squareup_dot_bankc_dot_service__pb2.AbortOrReverseTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.AbortOrReverseTransactionResponse.FromString,
                )
        self.CreateBalanceInstrument = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/CreateBalanceInstrument',
                request_serializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceInstrumentResponse.FromString,
                )
        self.ListBalanceInstruments = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/ListBalanceInstruments',
                request_serializer=squareup_dot_bankc_dot_service__pb2.ListBalanceInstrumentsRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.ListBalanceInstrumentsResponse.FromString,
                )
        self.UpdateBalanceInstrument = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/UpdateBalanceInstrument',
                request_serializer=squareup_dot_bankc_dot_service__pb2.UpdateBalanceInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.UpdateBalanceInstrumentResponse.FromString,
                )
        self.ListTransactions = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/ListTransactions',
                request_serializer=squareup_dot_bankc_dot_service__pb2.ListTransactionsRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.ListTransactionsResponse.FromString,
                )
        self.HandleDirectDepositEvent = channel.unary_unary(
                '/squareup.bankc.BalanceProxyService/HandleDirectDepositEvent',
                request_serializer=squareup_dot_bankc_dot_service__pb2.HandleDirectDepositEventRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.HandleDirectDepositEventResponse.FromString,
                )


class BalanceProxyServiceServicer(object):
    """TODO(eyung): Define FreezeBalance, UnfreezeBalance, DeactivateBalance
    """

    def RegisterPhysicalBalance(self, request, context):
        """* Create a new balance based on the . 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBalanceReservation(self, request, context):
        """* Make a reservation on an amount of money being added to or deducted from a balance. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitBalanceReservation(self, request, context):
        """* Commit a previously-created balance reservation.
        (Commits are idempotent.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortBalanceReservation(self, request, context):
        """* Abort a previously-created balance reservation.
        (A committed or failed balance reservation cannot be aborted.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentBalanceState(self, request, context):
        """* Query the current state of a balance from its underlying physical store. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBalancesForUnit(self, request, context):
        """* Given a unit, list the balances associated with it. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMainBalanceForUnit(self, request, context):
        """*
        Given a unit, get the its main balance.
        (Currently, "main" is defined as wherever the unit's payment
        processing funds are homed, but in the future this will probably
        be configurable by the user.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordPhysicalMoneyMovement(self, request, context):
        """*
        Records a physical money movement (i.e. that occurs outside the Square
        balance ecosystem), associating it with either an existing transaction
        or a new transaction.
        (This is only needed for callers that perform their own physical money
        movements but need to record it in Bankc.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePhysicalMoneyMovement(self, request, context):
        """*
        Update a physical money movement record (previously created via RecordPhysicalMoneyMovement).
        (This is only needed for callers that perform their own physical money
        movements but need to record it in Bankc.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalanceProviderInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitTransaction(self, request, context):
        """*
        Commit all the balance reservations of a transaction, and then update the transaction state
        accordingly. This will fail if some reservations in the transaction are in failed or pending
        (i.e. not yet RESERVATION_PLACED) states.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortTransaction(self, request, context):
        """*
        Abort all the balance reservations of a transaction, and then update the transaction state
        accordingly. This will fail if some reservations in the transaction have already succeeded.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortOrReverseTransaction(self, request, context):
        """*
        If the specified transaction is in a pending state, abort it. Otherwise, create a new transaction that with
        balance reservations that negate the specified transaction.
        A transaction can only be reversed once.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBalanceInstrument(self, request, context):
        """* Provision a new balance instrument linked to Bankc balance. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBalanceInstruments(self, request, context):
        """* Fetch balance instruments linked to Bankc balance. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBalanceInstrument(self, request, context):
        """* Update balance instrument. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTransactions(self, request, context):
        """* Fetch transactions. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandleDirectDepositEvent(self, request, context):
        """* Process Marqeta's direct deposit events. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BalanceProxyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterPhysicalBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterPhysicalBalance,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.RegisterPhysicalBalanceRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.RegisterPhysicalBalanceResponse.SerializeToString,
            ),
            'CreateBalanceReservation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBalanceReservation,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceReservationRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceReservationResponse.SerializeToString,
            ),
            'CommitBalanceReservation': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitBalanceReservation,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.CommitBalanceReservationRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.CommitBalanceReservationResponse.SerializeToString,
            ),
            'AbortBalanceReservation': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortBalanceReservation,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.AbortBalanceReservationRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.AbortBalanceReservationResponse.SerializeToString,
            ),
            'GetCurrentBalanceState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentBalanceState,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.GetCurrentBalanceStateRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.GetCurrentBalanceStateResponse.SerializeToString,
            ),
            'ListBalancesForUnit': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBalancesForUnit,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.ListBalancesForUnitRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.ListBalancesForUnitResponse.SerializeToString,
            ),
            'GetMainBalanceForUnit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMainBalanceForUnit,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.GetMainBalanceForUnitRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.GetMainBalanceForUnitResponse.SerializeToString,
            ),
            'RecordPhysicalMoneyMovement': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordPhysicalMoneyMovement,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.RecordPhysicalMoneyMovementRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.RecordPhysicalMoneyMovementResponse.SerializeToString,
            ),
            'UpdatePhysicalMoneyMovement': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePhysicalMoneyMovement,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.UpdatePhysicalMoneyMovementRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.UpdatePhysicalMoneyMovementResponse.SerializeToString,
            ),
            'GetBalanceProviderInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalanceProviderInfo,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.GetBalanceProviderInfoRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.GetBalanceProviderInfoResponse.SerializeToString,
            ),
            'CommitTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitTransaction,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.CommitTransactionRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.CommitTransactionResponse.SerializeToString,
            ),
            'AbortTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortTransaction,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.AbortTransactionRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.AbortTransactionResponse.SerializeToString,
            ),
            'AbortOrReverseTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortOrReverseTransaction,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.AbortOrReverseTransactionRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.AbortOrReverseTransactionResponse.SerializeToString,
            ),
            'CreateBalanceInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBalanceInstrument,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceInstrumentRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceInstrumentResponse.SerializeToString,
            ),
            'ListBalanceInstruments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBalanceInstruments,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.ListBalanceInstrumentsRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.ListBalanceInstrumentsResponse.SerializeToString,
            ),
            'UpdateBalanceInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBalanceInstrument,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.UpdateBalanceInstrumentRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.UpdateBalanceInstrumentResponse.SerializeToString,
            ),
            'ListTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTransactions,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.ListTransactionsRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.ListTransactionsResponse.SerializeToString,
            ),
            'HandleDirectDepositEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleDirectDepositEvent,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.HandleDirectDepositEventRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.HandleDirectDepositEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.bankc.BalanceProxyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BalanceProxyService(object):
    """TODO(eyung): Define FreezeBalance, UnfreezeBalance, DeactivateBalance
    """

    @staticmethod
    def RegisterPhysicalBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/RegisterPhysicalBalance',
            squareup_dot_bankc_dot_service__pb2.RegisterPhysicalBalanceRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.RegisterPhysicalBalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBalanceReservation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/CreateBalanceReservation',
            squareup_dot_bankc_dot_service__pb2.CreateBalanceReservationRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.CreateBalanceReservationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitBalanceReservation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/CommitBalanceReservation',
            squareup_dot_bankc_dot_service__pb2.CommitBalanceReservationRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.CommitBalanceReservationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortBalanceReservation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/AbortBalanceReservation',
            squareup_dot_bankc_dot_service__pb2.AbortBalanceReservationRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.AbortBalanceReservationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrentBalanceState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/GetCurrentBalanceState',
            squareup_dot_bankc_dot_service__pb2.GetCurrentBalanceStateRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.GetCurrentBalanceStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBalancesForUnit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/ListBalancesForUnit',
            squareup_dot_bankc_dot_service__pb2.ListBalancesForUnitRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.ListBalancesForUnitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMainBalanceForUnit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/GetMainBalanceForUnit',
            squareup_dot_bankc_dot_service__pb2.GetMainBalanceForUnitRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.GetMainBalanceForUnitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordPhysicalMoneyMovement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/RecordPhysicalMoneyMovement',
            squareup_dot_bankc_dot_service__pb2.RecordPhysicalMoneyMovementRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.RecordPhysicalMoneyMovementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePhysicalMoneyMovement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/UpdatePhysicalMoneyMovement',
            squareup_dot_bankc_dot_service__pb2.UpdatePhysicalMoneyMovementRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.UpdatePhysicalMoneyMovementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBalanceProviderInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/GetBalanceProviderInfo',
            squareup_dot_bankc_dot_service__pb2.GetBalanceProviderInfoRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.GetBalanceProviderInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/CommitTransaction',
            squareup_dot_bankc_dot_service__pb2.CommitTransactionRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.CommitTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/AbortTransaction',
            squareup_dot_bankc_dot_service__pb2.AbortTransactionRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.AbortTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortOrReverseTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/AbortOrReverseTransaction',
            squareup_dot_bankc_dot_service__pb2.AbortOrReverseTransactionRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.AbortOrReverseTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBalanceInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/CreateBalanceInstrument',
            squareup_dot_bankc_dot_service__pb2.CreateBalanceInstrumentRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.CreateBalanceInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBalanceInstruments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/ListBalanceInstruments',
            squareup_dot_bankc_dot_service__pb2.ListBalanceInstrumentsRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.ListBalanceInstrumentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateBalanceInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/UpdateBalanceInstrument',
            squareup_dot_bankc_dot_service__pb2.UpdateBalanceInstrumentRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.UpdateBalanceInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/ListTransactions',
            squareup_dot_bankc_dot_service__pb2.ListTransactionsRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.ListTransactionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HandleDirectDepositEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceProxyService/HandleDirectDepositEvent',
            squareup_dot_bankc_dot_service__pb2.HandleDirectDepositEventRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.HandleDirectDepositEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExternalBalanceProxyServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListBalanceInstruments = channel.unary_unary(
                '/squareup.bankc.ExternalBalanceProxyService/ListBalanceInstruments',
                request_serializer=squareup_dot_bankc_dot_service__pb2.ExternalListBalanceInstrumentsRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.ExternalListBalanceInstrumentsResponse.FromString,
                )


class ExternalBalanceProxyServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListBalanceInstruments(self, request, context):
        """* Fetch balance instruments linked to Bankc balance. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExternalBalanceProxyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListBalanceInstruments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBalanceInstruments,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.ExternalListBalanceInstrumentsRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.ExternalListBalanceInstrumentsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.bankc.ExternalBalanceProxyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExternalBalanceProxyService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListBalanceInstruments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.ExternalBalanceProxyService/ListBalanceInstruments',
            squareup_dot_bankc_dot_service__pb2.ExternalListBalanceInstrumentsRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.ExternalListBalanceInstrumentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BankcAdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ManuallyTransitionTransactionState = channel.unary_unary(
                '/squareup.bankc.BankcAdminService/ManuallyTransitionTransactionState',
                request_serializer=squareup_dot_bankc_dot_service__pb2.ManuallyTransitionTransactionStateRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.ManuallyTransitionTransactionStateResponse.FromString,
                )


class BankcAdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ManuallyTransitionTransactionState(self, request, context):
        """*
        Manually transition the state of a transaction and all of its balance reservations without
        performing any actual balance changes, and republishes the transaction to propagate the
        state update to downstream feed consumers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BankcAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ManuallyTransitionTransactionState': grpc.unary_unary_rpc_method_handler(
                    servicer.ManuallyTransitionTransactionState,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.ManuallyTransitionTransactionStateRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.ManuallyTransitionTransactionStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.bankc.BankcAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BankcAdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ManuallyTransitionTransactionState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BankcAdminService/ManuallyTransitionTransactionState',
            squareup_dot_bankc_dot_service__pb2.ManuallyTransitionTransactionStateRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.ManuallyTransitionTransactionStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BankcServiceStub(object):
    """rpc Foobar (FoobarRequest) returns (FoobarResponse) {
    option (squareup.sake.idempotent) = true;
    }
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class BankcServiceServicer(object):
    """rpc Foobar (FoobarRequest) returns (FoobarResponse) {
    option (squareup.sake.idempotent) = true;
    }
    """


def add_BankcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.bankc.BankcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BankcService(object):
    """rpc Foobar (FoobarRequest) returns (FoobarResponse) {
    option (squareup.sake.idempotent) = true;
    }
    """


class BalanceMovementHelperServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBalanceTransfer = channel.unary_unary(
                '/squareup.bankc.BalanceMovementHelperService/CreateBalanceTransfer',
                request_serializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceTransferRequest.SerializeToString,
                response_deserializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceTransferResponse.FromString,
                )


class BalanceMovementHelperServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateBalanceTransfer(self, request, context):
        """* Transfers money between one balance to another. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BalanceMovementHelperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBalanceTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBalanceTransfer,
                    request_deserializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceTransferRequest.FromString,
                    response_serializer=squareup_dot_bankc_dot_service__pb2.CreateBalanceTransferResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.bankc.BalanceMovementHelperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BalanceMovementHelperService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateBalanceTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bankc.BalanceMovementHelperService/CreateBalanceTransfer',
            squareup_dot_bankc_dot_service__pb2.CreateBalanceTransferRequest.SerializeToString,
            squareup_dot_bankc_dot_service__pb2.CreateBalanceTransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

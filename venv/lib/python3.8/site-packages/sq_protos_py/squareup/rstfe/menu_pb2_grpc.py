# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.rstfe import menu_pb2 as squareup_dot_rstfe_dot_menu__pb2


class MenuServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddToDisplayGroup = channel.unary_unary(
                '/squareup.rstfe.menu.MenuService/AddToDisplayGroup',
                request_serializer=squareup_dot_rstfe_dot_menu__pb2.AddToDisplayGroupRequest.SerializeToString,
                response_deserializer=squareup_dot_rstfe_dot_menu__pb2.AddToDisplayGroupResponse.FromString,
                )
        self.DuplicateMenu = channel.unary_unary(
                '/squareup.rstfe.menu.MenuService/DuplicateMenu',
                request_serializer=squareup_dot_rstfe_dot_menu__pb2.DuplicateMenuRequest.SerializeToString,
                response_deserializer=squareup_dot_rstfe_dot_menu__pb2.DuplicateMenuResponse.FromString,
                )


class MenuServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddToDisplayGroup(self, request, context):
        """* AddToDisplayGroup takes a collection of Display Groups and Items and
        nest them under another collection of Display Groups. If the location of
        a source Display Group and a target Display Group is different,
        a deep copy of the source Display Group is created, and Items
        disabled at the target location will be enabled.

        See https://docs.google.com/document/d/1dC0feGtjStZitc6RemewKeahzI73eZtrtq03-QfqQM0/edit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DuplicateMenu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MenuServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddToDisplayGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToDisplayGroup,
                    request_deserializer=squareup_dot_rstfe_dot_menu__pb2.AddToDisplayGroupRequest.FromString,
                    response_serializer=squareup_dot_rstfe_dot_menu__pb2.AddToDisplayGroupResponse.SerializeToString,
            ),
            'DuplicateMenu': grpc.unary_unary_rpc_method_handler(
                    servicer.DuplicateMenu,
                    request_deserializer=squareup_dot_rstfe_dot_menu__pb2.DuplicateMenuRequest.FromString,
                    response_serializer=squareup_dot_rstfe_dot_menu__pb2.DuplicateMenuResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.rstfe.menu.MenuService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MenuService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddToDisplayGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.rstfe.menu.MenuService/AddToDisplayGroup',
            squareup_dot_rstfe_dot_menu__pb2.AddToDisplayGroupRequest.SerializeToString,
            squareup_dot_rstfe_dot_menu__pb2.AddToDisplayGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DuplicateMenu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.rstfe.menu.MenuService/DuplicateMenu',
            squareup_dot_rstfe_dot_menu__pb2.DuplicateMenuRequest.SerializeToString,
            squareup_dot_rstfe_dot_menu__pb2.DuplicateMenuResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.common import messages_pb2 as squareup_dot_common_dot_messages__pb2
from sq_protos_py.squareup.envoy_control import service_pb2 as squareup_dot_envoy__control_dot_service__pb2


class EnvoyControlServiceStub(object):
    """* Collection of utility methods for inspecting or mutating the control plane state.
    The rpcs in here should be limited to ones that do NOT depend on open source Envoy protos
    because those will break the all-protos build *
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisteredGroups = channel.unary_unary(
                '/squareup.envoy_control.service.EnvoyControlService/RegisteredGroups',
                request_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
                response_deserializer=squareup_dot_envoy__control_dot_service__pb2.RegisteredGroupsResponse.FromString,
                )
        self.ActiveEnvoys = channel.unary_unary(
                '/squareup.envoy_control.service.EnvoyControlService/ActiveEnvoys',
                request_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
                response_deserializer=squareup_dot_envoy__control_dot_service__pb2.ActiveEnvoysResponse.FromString,
                )
        self.AddEnvoyVersions = channel.unary_unary(
                '/squareup.envoy_control.service.EnvoyControlService/AddEnvoyVersions',
                request_serializer=squareup_dot_envoy__control_dot_service__pb2.AddEnvoyVersionsRequest.SerializeToString,
                response_deserializer=squareup_dot_envoy__control_dot_service__pb2.AddEnvoyVersionsResponse.FromString,
                )
        self.StaleSnapshots = channel.unary_unary(
                '/squareup.envoy_control.service.EnvoyControlService/StaleSnapshots',
                request_serializer=squareup_dot_envoy__control_dot_service__pb2.StaleSnapshotRequest.SerializeToString,
                response_deserializer=squareup_dot_envoy__control_dot_service__pb2.StaleSnapshotResponse.FromString,
                )
        self.QueryManifests = channel.unary_unary(
                '/squareup.envoy_control.service.EnvoyControlService/QueryManifests',
                request_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
                response_deserializer=squareup_dot_envoy__control_dot_service__pb2.QueryManifestsResponse.FromString,
                )
        self.QueryCachedSnapshots = channel.unary_unary(
                '/squareup.envoy_control.service.EnvoyControlService/QueryCachedSnapshots',
                request_serializer=squareup_dot_envoy__control_dot_service__pb2.QueryCachedSnapshotsRequest.SerializeToString,
                response_deserializer=squareup_dot_envoy__control_dot_service__pb2.QueryCachedSnapshotsResponse.FromString,
                )


class EnvoyControlServiceServicer(object):
    """* Collection of utility methods for inspecting or mutating the control plane state.
    The rpcs in here should be limited to ones that do NOT depend on open source Envoy protos
    because those will break the all-protos build *
    """

    def RegisteredGroups(self, request, context):
        """* Returns a list of all node groups known to the control plane. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActiveEnvoys(self, request, context):
        """* Returns a list of all Envoy instances with an active stream to this control plane. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddEnvoyVersions(self, request, context):
        """* Returns the image shas that tcli add-envoy should use and validates the version of tcli used. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StaleSnapshots(self, request, context):
        """* Returns the group identifiers of stale snapshots, ie snapshots that have not propagated the latest state. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryManifests(self, request, context):
        """* Returns a map from group id -> metadata manifest for all groups with a snapshot. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryCachedSnapshots(self, request, context):
        """* Returns a map from group id -> envoy config snapshot for all groups that match the query. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnvoyControlServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisteredGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisteredGroups,
                    request_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                    response_serializer=squareup_dot_envoy__control_dot_service__pb2.RegisteredGroupsResponse.SerializeToString,
            ),
            'ActiveEnvoys': grpc.unary_unary_rpc_method_handler(
                    servicer.ActiveEnvoys,
                    request_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                    response_serializer=squareup_dot_envoy__control_dot_service__pb2.ActiveEnvoysResponse.SerializeToString,
            ),
            'AddEnvoyVersions': grpc.unary_unary_rpc_method_handler(
                    servicer.AddEnvoyVersions,
                    request_deserializer=squareup_dot_envoy__control_dot_service__pb2.AddEnvoyVersionsRequest.FromString,
                    response_serializer=squareup_dot_envoy__control_dot_service__pb2.AddEnvoyVersionsResponse.SerializeToString,
            ),
            'StaleSnapshots': grpc.unary_unary_rpc_method_handler(
                    servicer.StaleSnapshots,
                    request_deserializer=squareup_dot_envoy__control_dot_service__pb2.StaleSnapshotRequest.FromString,
                    response_serializer=squareup_dot_envoy__control_dot_service__pb2.StaleSnapshotResponse.SerializeToString,
            ),
            'QueryManifests': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryManifests,
                    request_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                    response_serializer=squareup_dot_envoy__control_dot_service__pb2.QueryManifestsResponse.SerializeToString,
            ),
            'QueryCachedSnapshots': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryCachedSnapshots,
                    request_deserializer=squareup_dot_envoy__control_dot_service__pb2.QueryCachedSnapshotsRequest.FromString,
                    response_serializer=squareup_dot_envoy__control_dot_service__pb2.QueryCachedSnapshotsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.envoy_control.service.EnvoyControlService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EnvoyControlService(object):
    """* Collection of utility methods for inspecting or mutating the control plane state.
    The rpcs in here should be limited to ones that do NOT depend on open source Envoy protos
    because those will break the all-protos build *
    """

    @staticmethod
    def RegisteredGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.envoy_control.service.EnvoyControlService/RegisteredGroups',
            squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            squareup_dot_envoy__control_dot_service__pb2.RegisteredGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActiveEnvoys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.envoy_control.service.EnvoyControlService/ActiveEnvoys',
            squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            squareup_dot_envoy__control_dot_service__pb2.ActiveEnvoysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddEnvoyVersions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.envoy_control.service.EnvoyControlService/AddEnvoyVersions',
            squareup_dot_envoy__control_dot_service__pb2.AddEnvoyVersionsRequest.SerializeToString,
            squareup_dot_envoy__control_dot_service__pb2.AddEnvoyVersionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StaleSnapshots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.envoy_control.service.EnvoyControlService/StaleSnapshots',
            squareup_dot_envoy__control_dot_service__pb2.StaleSnapshotRequest.SerializeToString,
            squareup_dot_envoy__control_dot_service__pb2.StaleSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryManifests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.envoy_control.service.EnvoyControlService/QueryManifests',
            squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            squareup_dot_envoy__control_dot_service__pb2.QueryManifestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryCachedSnapshots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.envoy_control.service.EnvoyControlService/QueryCachedSnapshots',
            squareup_dot_envoy__control_dot_service__pb2.QueryCachedSnapshotsRequest.SerializeToString,
            squareup_dot_envoy__control_dot_service__pb2.QueryCachedSnapshotsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.taxman.service import onesource_pb2 as squareup_dot_taxman_dot_service_dot_onesource__pb2


class TaxmanOneSourceServiceStub(object):
    """* Service for working with the internals of Taxman relating to OneSource. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindIdentityByCustomerID = channel.unary_unary(
                '/squareup.taxman.service.TaxmanOneSourceService/FindIdentityByCustomerID',
                request_serializer=squareup_dot_taxman_dot_service_dot_onesource__pb2.FindIdentityByCustomerIDRequest.SerializeToString,
                response_deserializer=squareup_dot_taxman_dot_service_dot_onesource__pb2.FindIdentityByCustomerIDResponse.FromString,
                )
        self.GetCustomerID = channel.unary_unary(
                '/squareup.taxman.service.TaxmanOneSourceService/GetCustomerID',
                request_serializer=squareup_dot_taxman_dot_service_dot_onesource__pb2.GetCustomerIDRequest.SerializeToString,
                response_deserializer=squareup_dot_taxman_dot_service_dot_onesource__pb2.GetCustomerIDResponse.FromString,
                )


class TaxmanOneSourceServiceServicer(object):
    """* Service for working with the internals of Taxman relating to OneSource. 
    """

    def FindIdentityByCustomerID(self, request, context):
        """* Find an account and identity by their Thomson Reuters Customer ID. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCustomerID(self, request, context):
        """* Get the Thomson Reuters Customer ID for a specific account / identity. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaxmanOneSourceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindIdentityByCustomerID': grpc.unary_unary_rpc_method_handler(
                    servicer.FindIdentityByCustomerID,
                    request_deserializer=squareup_dot_taxman_dot_service_dot_onesource__pb2.FindIdentityByCustomerIDRequest.FromString,
                    response_serializer=squareup_dot_taxman_dot_service_dot_onesource__pb2.FindIdentityByCustomerIDResponse.SerializeToString,
            ),
            'GetCustomerID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCustomerID,
                    request_deserializer=squareup_dot_taxman_dot_service_dot_onesource__pb2.GetCustomerIDRequest.FromString,
                    response_serializer=squareup_dot_taxman_dot_service_dot_onesource__pb2.GetCustomerIDResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.taxman.service.TaxmanOneSourceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaxmanOneSourceService(object):
    """* Service for working with the internals of Taxman relating to OneSource. 
    """

    @staticmethod
    def FindIdentityByCustomerID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.taxman.service.TaxmanOneSourceService/FindIdentityByCustomerID',
            squareup_dot_taxman_dot_service_dot_onesource__pb2.FindIdentityByCustomerIDRequest.SerializeToString,
            squareup_dot_taxman_dot_service_dot_onesource__pb2.FindIdentityByCustomerIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCustomerID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.taxman.service.TaxmanOneSourceService/GetCustomerID',
            squareup_dot_taxman_dot_service_dot_onesource__pb2.GetCustomerIDRequest.SerializeToString,
            squareup_dot_taxman_dot_service_dot_onesource__pb2.GetCustomerIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

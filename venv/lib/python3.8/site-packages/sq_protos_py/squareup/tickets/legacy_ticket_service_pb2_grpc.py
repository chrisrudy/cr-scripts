# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.client.tickets import service_pb2 as squareup_dot_client_dot_tickets_dot_service__pb2


class ExternalLegacyTicketServiceStub(object):
    """This creates a new service corresponding to the legacy tickets service used by mobile clients at
    https://git.sqcorp.co/projects/sq/repos/client-protos/browse/register/tickets-service/src/main/proto/squareup/client/tickets/service.proto
    Service had to be renamed to avoid a service/action name conflict and Guice inject double binding
    collision with the server proto TicketService.
    Still uses the requests and responses defined in client-protos for the original proto service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/squareup.waiter.tickets.ExternalLegacyTicketService/List',
                request_serializer=squareup_dot_client_dot_tickets_dot_service__pb2.ListRequest.SerializeToString,
                response_deserializer=squareup_dot_client_dot_tickets_dot_service__pb2.ListResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/squareup.waiter.tickets.ExternalLegacyTicketService/Update',
                request_serializer=squareup_dot_client_dot_tickets_dot_service__pb2.UpdateRequest.SerializeToString,
                response_deserializer=squareup_dot_client_dot_tickets_dot_service__pb2.UpdateResponse.FromString,
                )


class ExternalLegacyTicketServiceServicer(object):
    """This creates a new service corresponding to the legacy tickets service used by mobile clients at
    https://git.sqcorp.co/projects/sq/repos/client-protos/browse/register/tickets-service/src/main/proto/squareup/client/tickets/service.proto
    Service had to be renamed to avoid a service/action name conflict and Guice inject double binding
    collision with the server proto TicketService.
    Still uses the requests and responses defined in client-protos for the original proto service.
    """

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExternalLegacyTicketServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=squareup_dot_client_dot_tickets_dot_service__pb2.ListRequest.FromString,
                    response_serializer=squareup_dot_client_dot_tickets_dot_service__pb2.ListResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=squareup_dot_client_dot_tickets_dot_service__pb2.UpdateRequest.FromString,
                    response_serializer=squareup_dot_client_dot_tickets_dot_service__pb2.UpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.waiter.tickets.ExternalLegacyTicketService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExternalLegacyTicketService(object):
    """This creates a new service corresponding to the legacy tickets service used by mobile clients at
    https://git.sqcorp.co/projects/sq/repos/client-protos/browse/register/tickets-service/src/main/proto/squareup/client/tickets/service.proto
    Service had to be renamed to avoid a service/action name conflict and Guice inject double binding
    collision with the server proto TicketService.
    Still uses the requests and responses defined in client-protos for the original proto service.
    """

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.waiter.tickets.ExternalLegacyTicketService/List',
            squareup_dot_client_dot_tickets_dot_service__pb2.ListRequest.SerializeToString,
            squareup_dot_client_dot_tickets_dot_service__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.waiter.tickets.ExternalLegacyTicketService/Update',
            squareup_dot_client_dot_tickets_dot_service__pb2.UpdateRequest.SerializeToString,
            squareup_dot_client_dot_tickets_dot_service__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

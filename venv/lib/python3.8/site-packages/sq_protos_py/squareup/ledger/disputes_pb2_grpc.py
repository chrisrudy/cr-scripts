# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.ledger import disputes_pb2 as squareup_dot_ledger_dot_disputes__pb2


class DisputeServiceStub(object):
    """* Service pertaining to dispute-related activity 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDispute = channel.unary_unary(
                '/squareup.ledger.service.DisputeService/CreateDispute',
                request_serializer=squareup_dot_ledger_dot_disputes__pb2.CreateDisputeRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_disputes__pb2.CreateDisputeResponse.FromString,
                )
        self.AdjustDispute = channel.unary_unary(
                '/squareup.ledger.service.DisputeService/AdjustDispute',
                request_serializer=squareup_dot_ledger_dot_disputes__pb2.AdjustDisputeRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_disputes__pb2.AdjustDisputeResponse.FromString,
                )
        self.ReopenDispute = channel.unary_unary(
                '/squareup.ledger.service.DisputeService/ReopenDispute',
                request_serializer=squareup_dot_ledger_dot_disputes__pb2.ReopenDisputeRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_disputes__pb2.ReopenDisputeResponse.FromString,
                )
        self.ResolveDispute = channel.unary_unary(
                '/squareup.ledger.service.DisputeService/ResolveDispute',
                request_serializer=squareup_dot_ledger_dot_disputes__pb2.ResolveDisputeRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_disputes__pb2.ResolveDisputeResponse.FromString,
                )
        self.GetDispute = channel.unary_unary(
                '/squareup.ledger.service.DisputeService/GetDispute',
                request_serializer=squareup_dot_ledger_dot_disputes__pb2.GetDisputeRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_disputes__pb2.GetDisputeResponse.FromString,
                )
        self.ConvertHoldToDispute = channel.unary_unary(
                '/squareup.ledger.service.DisputeService/ConvertHoldToDispute',
                request_serializer=squareup_dot_ledger_dot_disputes__pb2.ConvertHoldToDisputeRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_disputes__pb2.ConvertHoldToDisputeResponse.FromString,
                )


class DisputeServiceServicer(object):
    """* Service pertaining to dispute-related activity 
    """

    def CreateDispute(self, request, context):
        """* Create a dispute for a payment. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdjustDispute(self, request, context):
        """* Adjust the dispute amount for a dispute. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReopenDispute(self, request, context):
        """* Reopen a previously resolved dispute. This will throw an error if the dispute is not resolved. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveDispute(self, request, context):
        """* Resolve an unresolved dispute. This will throw an error if the dispute is already resolved. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDispute(self, request, context):
        """* Fetch a dispute 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertHoldToDispute(self, request, context):
        """* Reopen an existing dispute backed by holds as a Ledger dispute 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DisputeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDispute': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDispute,
                    request_deserializer=squareup_dot_ledger_dot_disputes__pb2.CreateDisputeRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_disputes__pb2.CreateDisputeResponse.SerializeToString,
            ),
            'AdjustDispute': grpc.unary_unary_rpc_method_handler(
                    servicer.AdjustDispute,
                    request_deserializer=squareup_dot_ledger_dot_disputes__pb2.AdjustDisputeRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_disputes__pb2.AdjustDisputeResponse.SerializeToString,
            ),
            'ReopenDispute': grpc.unary_unary_rpc_method_handler(
                    servicer.ReopenDispute,
                    request_deserializer=squareup_dot_ledger_dot_disputes__pb2.ReopenDisputeRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_disputes__pb2.ReopenDisputeResponse.SerializeToString,
            ),
            'ResolveDispute': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveDispute,
                    request_deserializer=squareup_dot_ledger_dot_disputes__pb2.ResolveDisputeRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_disputes__pb2.ResolveDisputeResponse.SerializeToString,
            ),
            'GetDispute': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDispute,
                    request_deserializer=squareup_dot_ledger_dot_disputes__pb2.GetDisputeRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_disputes__pb2.GetDisputeResponse.SerializeToString,
            ),
            'ConvertHoldToDispute': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertHoldToDispute,
                    request_deserializer=squareup_dot_ledger_dot_disputes__pb2.ConvertHoldToDisputeRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_disputes__pb2.ConvertHoldToDisputeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.ledger.service.DisputeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DisputeService(object):
    """* Service pertaining to dispute-related activity 
    """

    @staticmethod
    def CreateDispute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.DisputeService/CreateDispute',
            squareup_dot_ledger_dot_disputes__pb2.CreateDisputeRequest.SerializeToString,
            squareup_dot_ledger_dot_disputes__pb2.CreateDisputeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdjustDispute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.DisputeService/AdjustDispute',
            squareup_dot_ledger_dot_disputes__pb2.AdjustDisputeRequest.SerializeToString,
            squareup_dot_ledger_dot_disputes__pb2.AdjustDisputeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReopenDispute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.DisputeService/ReopenDispute',
            squareup_dot_ledger_dot_disputes__pb2.ReopenDisputeRequest.SerializeToString,
            squareup_dot_ledger_dot_disputes__pb2.ReopenDisputeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResolveDispute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.DisputeService/ResolveDispute',
            squareup_dot_ledger_dot_disputes__pb2.ResolveDisputeRequest.SerializeToString,
            squareup_dot_ledger_dot_disputes__pb2.ResolveDisputeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDispute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.DisputeService/GetDispute',
            squareup_dot_ledger_dot_disputes__pb2.GetDisputeRequest.SerializeToString,
            squareup_dot_ledger_dot_disputes__pb2.GetDisputeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertHoldToDispute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.DisputeService/ConvertHoldToDispute',
            squareup_dot_ledger_dot_disputes__pb2.ConvertHoldToDisputeRequest.SerializeToString,
            squareup_dot_ledger_dot_disputes__pb2.ConvertHoldToDisputeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: squareup/ledger/ext/hold.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from sq_protos_py.squareup.ledger import holds_pb2 as squareup_dot_ledger_dot_holds__pb2
from sq_protos_py.squareup.common import samsa_pb2 as squareup_dot_common_dot_samsa__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='squareup/ledger/ext/hold.proto',
  package='squareup.samsa.extensions.ledger.hold',
  syntax='proto2',
  serialized_options=_b('\n$com.squareup.protos.samsa.extensions'),
  serialized_pb=_b('\n\x1esquareup/ledger/ext/hold.proto\x12%squareup.samsa.extensions.ledger.hold\x1a\x1bsquareup/ledger/holds.proto\x1a\x1bsquareup/common/samsa.proto:U\n\x08\x65xt_hold\x12#.squareup.samsa.common.SamsaMessage\x18\xa0\x11 \x01(\x0b\x32\x1d.squareup.ledger.service.HoldB&\n$com.squareup.protos.samsa.extensions')
  ,
  dependencies=[squareup_dot_ledger_dot_holds__pb2.DESCRIPTOR,squareup_dot_common_dot_samsa__pb2.DESCRIPTOR,])


EXT_HOLD_FIELD_NUMBER = 2208
ext_hold = _descriptor.FieldDescriptor(
  name='ext_hold', full_name='squareup.samsa.extensions.ledger.hold.ext_hold', index=0,
  number=2208, type=11, cpp_type=10, label=1,
  has_default_value=False, default_value=None,
  message_type=None, enum_type=None, containing_type=None,
  is_extension=True, extension_scope=None,
  serialized_options=None, file=DESCRIPTOR)

DESCRIPTOR.extensions_by_name['ext_hold'] = ext_hold
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ext_hold.message_type = squareup_dot_ledger_dot_holds__pb2._HOLD
squareup_dot_common_dot_samsa__pb2.SamsaMessage.RegisterExtension(ext_hold)

DESCRIPTOR._options = None
# @@protoc_insertion_point(module_scope)

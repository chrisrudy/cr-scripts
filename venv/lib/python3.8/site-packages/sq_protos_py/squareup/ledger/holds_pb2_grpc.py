# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.ledger import holds_pb2 as squareup_dot_ledger_dot_holds__pb2


class HoldServiceStub(object):
    """* API endpoints for the hold service 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMerchantHold = channel.unary_unary(
                '/squareup.ledger.service.HoldService/CreateMerchantHold',
                request_serializer=squareup_dot_ledger_dot_holds__pb2.CreateMerchantHoldRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_holds__pb2.CreateHoldResponse.FromString,
                )
        self.CreatePaymentHold = channel.unary_unary(
                '/squareup.ledger.service.HoldService/CreatePaymentHold',
                request_serializer=squareup_dot_ledger_dot_holds__pb2.CreatePaymentHoldRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_holds__pb2.CreateHoldResponse.FromString,
                )
        self.ReleaseHold = channel.unary_unary(
                '/squareup.ledger.service.HoldService/ReleaseHold',
                request_serializer=squareup_dot_ledger_dot_holds__pb2.ReleaseHoldRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_holds__pb2.ReleaseHoldResponse.FromString,
                )
        self.ReleaseHolds = channel.unary_unary(
                '/squareup.ledger.service.HoldService/ReleaseHolds',
                request_serializer=squareup_dot_ledger_dot_holds__pb2.ReleaseHoldsRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_holds__pb2.ReleaseHoldsResponse.FromString,
                )
        self.GetMerchantHolds = channel.unary_unary(
                '/squareup.ledger.service.HoldService/GetMerchantHolds',
                request_serializer=squareup_dot_ledger_dot_holds__pb2.GetMerchantHoldsRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.FromString,
                )
        self.GetPaymentHolds = channel.unary_unary(
                '/squareup.ledger.service.HoldService/GetPaymentHolds',
                request_serializer=squareup_dot_ledger_dot_holds__pb2.GetPaymentHoldsRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.FromString,
                )
        self.GetPaymentHoldsForMerchant = channel.unary_unary(
                '/squareup.ledger.service.HoldService/GetPaymentHoldsForMerchant',
                request_serializer=squareup_dot_ledger_dot_holds__pb2.GetPaymentHoldsForMerchantRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.FromString,
                )
        self.GetHoldsForMerchant = channel.unary_unary(
                '/squareup.ledger.service.HoldService/GetHoldsForMerchant',
                request_serializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsForMerchantRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.FromString,
                )
        self.GetHoldByToken = channel.unary_unary(
                '/squareup.ledger.service.HoldService/GetHoldByToken',
                request_serializer=squareup_dot_ledger_dot_holds__pb2.GetHoldByTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.FromString,
                )
        self.GetTotalHeldFromBalance = channel.unary_unary(
                '/squareup.ledger.service.HoldService/GetTotalHeldFromBalance',
                request_serializer=squareup_dot_ledger_dot_holds__pb2.GetTotalHeldFromBalanceRequest.SerializeToString,
                response_deserializer=squareup_dot_ledger_dot_holds__pb2.GetTotalHeldFromBalanceResponse.FromString,
                )


class HoldServiceServicer(object):
    """* API endpoints for the hold service 
    """

    def CreateMerchantHold(self, request, context):
        """* Create a merchant hold. This endpoint is not idempotent because we allow multiple holds on a
        merchant
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePaymentHold(self, request, context):
        """* Create a payment hold. Idempotent because payment holds are unique by payment 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseHold(self, request, context):
        """* Release a payment or merchant hold 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseHolds(self, request, context):
        """*
        Release multiple holds belonging to a merchant.
        Note that even if one ore more releases fail, the rest are still processed.
        Release attempts can most likely fail because of a missing hold or validation error.
        The response body includes error codes and debug text for the failed releases.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMerchantHolds(self, request, context):
        """* Get merchant holds 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPaymentHolds(self, request, context):
        """* Get payment holds 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPaymentHoldsForMerchant(self, request, context):
        """* Get payment holds for a given merchant 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHoldsForMerchant(self, request, context):
        """* Get both merchant and payment holds for a given merchant 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHoldByToken(self, request, context):
        """* Get active holds by token 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTotalHeldFromBalance(self, request, context):
        """*
        Fetches the total amount of money requested to be held from a merchant's balance due to holds
        and disputes. The returned amount represents a negative effect on a merchant's balance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HoldServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMerchantHold': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMerchantHold,
                    request_deserializer=squareup_dot_ledger_dot_holds__pb2.CreateMerchantHoldRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_holds__pb2.CreateHoldResponse.SerializeToString,
            ),
            'CreatePaymentHold': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePaymentHold,
                    request_deserializer=squareup_dot_ledger_dot_holds__pb2.CreatePaymentHoldRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_holds__pb2.CreateHoldResponse.SerializeToString,
            ),
            'ReleaseHold': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseHold,
                    request_deserializer=squareup_dot_ledger_dot_holds__pb2.ReleaseHoldRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_holds__pb2.ReleaseHoldResponse.SerializeToString,
            ),
            'ReleaseHolds': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseHolds,
                    request_deserializer=squareup_dot_ledger_dot_holds__pb2.ReleaseHoldsRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_holds__pb2.ReleaseHoldsResponse.SerializeToString,
            ),
            'GetMerchantHolds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMerchantHolds,
                    request_deserializer=squareup_dot_ledger_dot_holds__pb2.GetMerchantHoldsRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.SerializeToString,
            ),
            'GetPaymentHolds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentHolds,
                    request_deserializer=squareup_dot_ledger_dot_holds__pb2.GetPaymentHoldsRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.SerializeToString,
            ),
            'GetPaymentHoldsForMerchant': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentHoldsForMerchant,
                    request_deserializer=squareup_dot_ledger_dot_holds__pb2.GetPaymentHoldsForMerchantRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.SerializeToString,
            ),
            'GetHoldsForMerchant': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHoldsForMerchant,
                    request_deserializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsForMerchantRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.SerializeToString,
            ),
            'GetHoldByToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHoldByToken,
                    request_deserializer=squareup_dot_ledger_dot_holds__pb2.GetHoldByTokenRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.SerializeToString,
            ),
            'GetTotalHeldFromBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTotalHeldFromBalance,
                    request_deserializer=squareup_dot_ledger_dot_holds__pb2.GetTotalHeldFromBalanceRequest.FromString,
                    response_serializer=squareup_dot_ledger_dot_holds__pb2.GetTotalHeldFromBalanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.ledger.service.HoldService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HoldService(object):
    """* API endpoints for the hold service 
    """

    @staticmethod
    def CreateMerchantHold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.HoldService/CreateMerchantHold',
            squareup_dot_ledger_dot_holds__pb2.CreateMerchantHoldRequest.SerializeToString,
            squareup_dot_ledger_dot_holds__pb2.CreateHoldResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePaymentHold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.HoldService/CreatePaymentHold',
            squareup_dot_ledger_dot_holds__pb2.CreatePaymentHoldRequest.SerializeToString,
            squareup_dot_ledger_dot_holds__pb2.CreateHoldResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseHold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.HoldService/ReleaseHold',
            squareup_dot_ledger_dot_holds__pb2.ReleaseHoldRequest.SerializeToString,
            squareup_dot_ledger_dot_holds__pb2.ReleaseHoldResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseHolds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.HoldService/ReleaseHolds',
            squareup_dot_ledger_dot_holds__pb2.ReleaseHoldsRequest.SerializeToString,
            squareup_dot_ledger_dot_holds__pb2.ReleaseHoldsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMerchantHolds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.HoldService/GetMerchantHolds',
            squareup_dot_ledger_dot_holds__pb2.GetMerchantHoldsRequest.SerializeToString,
            squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPaymentHolds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.HoldService/GetPaymentHolds',
            squareup_dot_ledger_dot_holds__pb2.GetPaymentHoldsRequest.SerializeToString,
            squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPaymentHoldsForMerchant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.HoldService/GetPaymentHoldsForMerchant',
            squareup_dot_ledger_dot_holds__pb2.GetPaymentHoldsForMerchantRequest.SerializeToString,
            squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHoldsForMerchant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.HoldService/GetHoldsForMerchant',
            squareup_dot_ledger_dot_holds__pb2.GetHoldsForMerchantRequest.SerializeToString,
            squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHoldByToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.HoldService/GetHoldByToken',
            squareup_dot_ledger_dot_holds__pb2.GetHoldByTokenRequest.SerializeToString,
            squareup_dot_ledger_dot_holds__pb2.GetHoldsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTotalHeldFromBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.service.HoldService/GetTotalHeldFromBalance',
            squareup_dot_ledger_dot_holds__pb2.GetTotalHeldFromBalanceRequest.SerializeToString,
            squareup_dot_ledger_dot_holds__pb2.GetTotalHeldFromBalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

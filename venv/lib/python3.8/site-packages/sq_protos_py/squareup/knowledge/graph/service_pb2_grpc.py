# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.knowledge.graph import service_pb2 as squareup_dot_knowledge_dot_graph_dot_service__pb2


class KnowledgeGraphServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConsumeRiskInput = channel.unary_unary(
                '/squareup.knowledge.graph.service.KnowledgeGraphService/ConsumeRiskInput',
                request_serializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.ConsumeRiskInputRequest.SerializeToString,
                response_deserializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.ConsumeRiskInputResponse.FromString,
                )
        self.GetConnectedNodes = channel.unary_unary(
                '/squareup.knowledge.graph.service.KnowledgeGraphService/GetConnectedNodes',
                request_serializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.GetConnectedNodesRequest.SerializeToString,
                response_deserializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.GetConnectedNodesResponse.FromString,
                )


class KnowledgeGraphServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConsumeRiskInput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnectedNodes(self, request, context):
        """Provides an endpoint to query connected nodes from starting nodes meeting the traversal requirement 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KnowledgeGraphServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConsumeRiskInput': grpc.unary_unary_rpc_method_handler(
                    servicer.ConsumeRiskInput,
                    request_deserializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.ConsumeRiskInputRequest.FromString,
                    response_serializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.ConsumeRiskInputResponse.SerializeToString,
            ),
            'GetConnectedNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnectedNodes,
                    request_deserializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.GetConnectedNodesRequest.FromString,
                    response_serializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.GetConnectedNodesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.knowledge.graph.service.KnowledgeGraphService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KnowledgeGraphService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConsumeRiskInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.knowledge.graph.service.KnowledgeGraphService/ConsumeRiskInput',
            squareup_dot_knowledge_dot_graph_dot_service__pb2.ConsumeRiskInputRequest.SerializeToString,
            squareup_dot_knowledge_dot_graph_dot_service__pb2.ConsumeRiskInputResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConnectedNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.knowledge.graph.service.KnowledgeGraphService/GetConnectedNodes',
            squareup_dot_knowledge_dot_graph_dot_service__pb2.GetConnectedNodesRequest.SerializeToString,
            squareup_dot_knowledge_dot_graph_dot_service__pb2.GetConnectedNodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class KnowledgeGraphTestServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunGremlinQuery = channel.unary_unary(
                '/squareup.knowledge.graph.service.KnowledgeGraphTestService/RunGremlinQuery',
                request_serializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.RunGremlinQueryRequest.SerializeToString,
                response_deserializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.RunGremlinQueryResponse.FromString,
                )


class KnowledgeGraphTestServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunGremlinQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KnowledgeGraphTestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunGremlinQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.RunGremlinQuery,
                    request_deserializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.RunGremlinQueryRequest.FromString,
                    response_serializer=squareup_dot_knowledge_dot_graph_dot_service__pb2.RunGremlinQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.knowledge.graph.service.KnowledgeGraphTestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KnowledgeGraphTestService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunGremlinQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.knowledge.graph.service.KnowledgeGraphTestService/RunGremlinQuery',
            squareup_dot_knowledge_dot_graph_dot_service__pb2.RunGremlinQueryRequest.SerializeToString,
            squareup_dot_knowledge_dot_graph_dot_service__pb2.RunGremlinQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

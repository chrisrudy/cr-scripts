# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.invreporter import service_pb2 as squareup_dot_invreporter_dot_service__pb2


class InventoryReporterApiStub(object):
    """RPC service for inventory reporter.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AvailableReports = channel.unary_unary(
                '/squareup.invreporter.InventoryReporterApi/AvailableReports',
                request_serializer=squareup_dot_invreporter_dot_service__pb2.AvailableReportsRequest.SerializeToString,
                response_deserializer=squareup_dot_invreporter_dot_service__pb2.AvailableReportsResponse.FromString,
                )
        self.ProjectedProfit = channel.unary_unary(
                '/squareup.invreporter.InventoryReporterApi/ProjectedProfit',
                request_serializer=squareup_dot_invreporter_dot_service__pb2.ProjectedProfitRequest.SerializeToString,
                response_deserializer=squareup_dot_invreporter_dot_service__pb2.ProjectedProfitResponse.FromString,
                )
        self.InventoryOnHandByCategory = channel.unary_unary(
                '/squareup.invreporter.InventoryReporterApi/InventoryOnHandByCategory',
                request_serializer=squareup_dot_invreporter_dot_service__pb2.InventoryOnHandByCategoryRequest.SerializeToString,
                response_deserializer=squareup_dot_invreporter_dot_service__pb2.InventoryOnHandByCategoryResponse.FromString,
                )
        self.CostOfGoodsSold = channel.unary_unary(
                '/squareup.invreporter.InventoryReporterApi/CostOfGoodsSold',
                request_serializer=squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldRequest.SerializeToString,
                response_deserializer=squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldResponse.FromString,
                )
        self.CostOfGoodsSoldFilters = channel.unary_unary(
                '/squareup.invreporter.InventoryReporterApi/CostOfGoodsSoldFilters',
                request_serializer=squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldFiltersRequest.SerializeToString,
                response_deserializer=squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldFiltersResponse.FromString,
                )


class InventoryReporterApiServicer(object):
    """RPC service for inventory reporter.
    """

    def AvailableReports(self, request, context):
        """Returns the available report dates for this merchant.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectedProfit(self, request, context):
        """Returns the projected profit report for the given merchant.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InventoryOnHandByCategory(self, request, context):
        """Returns the inventory on hand by category report for the given merchant.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CostOfGoodsSold(self, request, context):
        """Returns the cost of goods sold report.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CostOfGoodsSoldFilters(self, request, context):
        """Returns the filter contents available for the cost of goods sold report.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InventoryReporterApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AvailableReports': grpc.unary_unary_rpc_method_handler(
                    servicer.AvailableReports,
                    request_deserializer=squareup_dot_invreporter_dot_service__pb2.AvailableReportsRequest.FromString,
                    response_serializer=squareup_dot_invreporter_dot_service__pb2.AvailableReportsResponse.SerializeToString,
            ),
            'ProjectedProfit': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectedProfit,
                    request_deserializer=squareup_dot_invreporter_dot_service__pb2.ProjectedProfitRequest.FromString,
                    response_serializer=squareup_dot_invreporter_dot_service__pb2.ProjectedProfitResponse.SerializeToString,
            ),
            'InventoryOnHandByCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.InventoryOnHandByCategory,
                    request_deserializer=squareup_dot_invreporter_dot_service__pb2.InventoryOnHandByCategoryRequest.FromString,
                    response_serializer=squareup_dot_invreporter_dot_service__pb2.InventoryOnHandByCategoryResponse.SerializeToString,
            ),
            'CostOfGoodsSold': grpc.unary_unary_rpc_method_handler(
                    servicer.CostOfGoodsSold,
                    request_deserializer=squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldRequest.FromString,
                    response_serializer=squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldResponse.SerializeToString,
            ),
            'CostOfGoodsSoldFilters': grpc.unary_unary_rpc_method_handler(
                    servicer.CostOfGoodsSoldFilters,
                    request_deserializer=squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldFiltersRequest.FromString,
                    response_serializer=squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldFiltersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.invreporter.InventoryReporterApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InventoryReporterApi(object):
    """RPC service for inventory reporter.
    """

    @staticmethod
    def AvailableReports(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.invreporter.InventoryReporterApi/AvailableReports',
            squareup_dot_invreporter_dot_service__pb2.AvailableReportsRequest.SerializeToString,
            squareup_dot_invreporter_dot_service__pb2.AvailableReportsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProjectedProfit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.invreporter.InventoryReporterApi/ProjectedProfit',
            squareup_dot_invreporter_dot_service__pb2.ProjectedProfitRequest.SerializeToString,
            squareup_dot_invreporter_dot_service__pb2.ProjectedProfitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InventoryOnHandByCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.invreporter.InventoryReporterApi/InventoryOnHandByCategory',
            squareup_dot_invreporter_dot_service__pb2.InventoryOnHandByCategoryRequest.SerializeToString,
            squareup_dot_invreporter_dot_service__pb2.InventoryOnHandByCategoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CostOfGoodsSold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.invreporter.InventoryReporterApi/CostOfGoodsSold',
            squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldRequest.SerializeToString,
            squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CostOfGoodsSoldFilters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.invreporter.InventoryReporterApi/CostOfGoodsSoldFilters',
            squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldFiltersRequest.SerializeToString,
            squareup_dot_invreporter_dot_service__pb2.CostOfGoodsSoldFiltersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

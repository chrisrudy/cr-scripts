# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.service.container.exemplardb import rpc_benchmark_pb2 as squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2


class RpcBenchmarkServiceStub(object):
    """*
    Service used for measuring RPC performance.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartBenchmark = channel.unary_unary(
                '/squareup.service.container.exemplardb.RpcBenchmarkService/StartBenchmark',
                request_serializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.StartBenchmarkRequest.SerializeToString,
                response_deserializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.StartBenchmarkResponse.FromString,
                )
        self.CompleteBenchmark = channel.unary_unary(
                '/squareup.service.container.exemplardb.RpcBenchmarkService/CompleteBenchmark',
                request_serializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.CompleteBenchmarkRequest.SerializeToString,
                response_deserializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.CompleteBenchmarkResponse.FromString,
                )
        self.Echo = channel.unary_unary(
                '/squareup.service.container.exemplardb.RpcBenchmarkService/Echo',
                request_serializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.EchoRequest.SerializeToString,
                response_deserializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.EchoResponse.FromString,
                )


class RpcBenchmarkServiceServicer(object):
    """*
    Service used for measuring RPC performance.
    """

    def StartBenchmark(self, request, context):
        """* Starts a new benchmark. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteBenchmark(self, request, context):
        """* Completes a benchmark. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Echo(self, request, context):
        """* Sends an echo request 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcBenchmarkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartBenchmark': grpc.unary_unary_rpc_method_handler(
                    servicer.StartBenchmark,
                    request_deserializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.StartBenchmarkRequest.FromString,
                    response_serializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.StartBenchmarkResponse.SerializeToString,
            ),
            'CompleteBenchmark': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteBenchmark,
                    request_deserializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.CompleteBenchmarkRequest.FromString,
                    response_serializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.CompleteBenchmarkResponse.SerializeToString,
            ),
            'Echo': grpc.unary_unary_rpc_method_handler(
                    servicer.Echo,
                    request_deserializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.EchoRequest.FromString,
                    response_serializer=squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.EchoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.service.container.exemplardb.RpcBenchmarkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RpcBenchmarkService(object):
    """*
    Service used for measuring RPC performance.
    """

    @staticmethod
    def StartBenchmark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.service.container.exemplardb.RpcBenchmarkService/StartBenchmark',
            squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.StartBenchmarkRequest.SerializeToString,
            squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.StartBenchmarkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteBenchmark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.service.container.exemplardb.RpcBenchmarkService/CompleteBenchmark',
            squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.CompleteBenchmarkRequest.SerializeToString,
            squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.CompleteBenchmarkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.service.container.exemplardb.RpcBenchmarkService/Echo',
            squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.EchoRequest.SerializeToString,
            squareup_dot_service_dot_container_dot_exemplardb_dot_rpc__benchmark__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

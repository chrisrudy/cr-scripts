# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.buildwitness import service_pb2 as squareup_dot_buildwitness_dot_service__pb2


class ArtifactIntegrityStorageServiceStub(object):
    """*
    A service which collects and stores information about artifacts
    which is eventually relevant to the ArtifactIntegrityLevelService's
    calculations of an integrity level.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreCompletedArtifact = channel.unary_unary(
                '/squareup.buildwitness.service.ArtifactIntegrityStorageService/StoreCompletedArtifact',
                request_serializer=squareup_dot_buildwitness_dot_service__pb2.StoreCompletedArtifactRequest.SerializeToString,
                response_deserializer=squareup_dot_buildwitness_dot_service__pb2.StoreCompletedArtifactResponse.FromString,
                )


class ArtifactIntegrityStorageServiceServicer(object):
    """*
    A service which collects and stores information about artifacts
    which is eventually relevant to the ArtifactIntegrityLevelService's
    calculations of an integrity level.
    """

    def StoreCompletedArtifact(self, request, context):
        """*
        Stores information about the given artifact, including the
        provided data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArtifactIntegrityStorageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreCompletedArtifact': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreCompletedArtifact,
                    request_deserializer=squareup_dot_buildwitness_dot_service__pb2.StoreCompletedArtifactRequest.FromString,
                    response_serializer=squareup_dot_buildwitness_dot_service__pb2.StoreCompletedArtifactResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.buildwitness.service.ArtifactIntegrityStorageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ArtifactIntegrityStorageService(object):
    """*
    A service which collects and stores information about artifacts
    which is eventually relevant to the ArtifactIntegrityLevelService's
    calculations of an integrity level.
    """

    @staticmethod
    def StoreCompletedArtifact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.buildwitness.service.ArtifactIntegrityStorageService/StoreCompletedArtifact',
            squareup_dot_buildwitness_dot_service__pb2.StoreCompletedArtifactRequest.SerializeToString,
            squareup_dot_buildwitness_dot_service__pb2.StoreCompletedArtifactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ArtifactIntegrityLevelServiceStub(object):
    """*
    Almost certainly, Build Witness will both store the information needed to
    compute an artifact’s integrity level and actually compute the integrity
    level.  However, splitting the services allows for a potential extension
    where another application uses Build Witness’s data to calculate integrity
    levels.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetArtifactIntegrityLevel = channel.unary_unary(
                '/squareup.buildwitness.service.ArtifactIntegrityLevelService/GetArtifactIntegrityLevel',
                request_serializer=squareup_dot_buildwitness_dot_service__pb2.GetArtifactIntegrityLevelRequest.SerializeToString,
                response_deserializer=squareup_dot_buildwitness_dot_service__pb2.GetArtifactIntegrityLevelResponse.FromString,
                )


class ArtifactIntegrityLevelServiceServicer(object):
    """*
    Almost certainly, Build Witness will both store the information needed to
    compute an artifact’s integrity level and actually compute the integrity
    level.  However, splitting the services allows for a potential extension
    where another application uses Build Witness’s data to calculate integrity
    levels.
    """

    def GetArtifactIntegrityLevel(self, request, context):
        """*
        Retrieves the integrity level for the given artifact
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArtifactIntegrityLevelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetArtifactIntegrityLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetArtifactIntegrityLevel,
                    request_deserializer=squareup_dot_buildwitness_dot_service__pb2.GetArtifactIntegrityLevelRequest.FromString,
                    response_serializer=squareup_dot_buildwitness_dot_service__pb2.GetArtifactIntegrityLevelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.buildwitness.service.ArtifactIntegrityLevelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ArtifactIntegrityLevelService(object):
    """*
    Almost certainly, Build Witness will both store the information needed to
    compute an artifact’s integrity level and actually compute the integrity
    level.  However, splitting the services allows for a potential extension
    where another application uses Build Witness’s data to calculate integrity
    levels.
    """

    @staticmethod
    def GetArtifactIntegrityLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.buildwitness.service.ArtifactIntegrityLevelService/GetArtifactIntegrityLevel',
            squareup_dot_buildwitness_dot_service__pb2.GetArtifactIntegrityLevelRequest.SerializeToString,
            squareup_dot_buildwitness_dot_service__pb2.GetArtifactIntegrityLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

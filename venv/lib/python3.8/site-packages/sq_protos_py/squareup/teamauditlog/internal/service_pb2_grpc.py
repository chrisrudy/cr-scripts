# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.teamauditlog import service_pb2 as squareup_dot_teamauditlog_dot_service__pb2


class InternalTeamAuditLogServiceStub(object):
    """The Internal Team Audit Log Service does not require multipass credentials to make requests.
    Internal services that call this API must be whitelisted, as we will not be performing
    authorization checks in these requests. Examples of services that will call this API are
    Cash Drawers and Items (via background jobs).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecordEvent = channel.unary_unary(
                '/squareup.teamauditlog.internal.InternalTeamAuditLogService/RecordEvent',
                request_serializer=squareup_dot_teamauditlog_dot_service__pb2.RecordEventRequest.SerializeToString,
                response_deserializer=squareup_dot_teamauditlog_dot_service__pb2.RecordEventResponse.FromString,
                )


class InternalTeamAuditLogServiceServicer(object):
    """The Internal Team Audit Log Service does not require multipass credentials to make requests.
    Internal services that call this API must be whitelisted, as we will not be performing
    authorization checks in these requests. Examples of services that will call this API are
    Cash Drawers and Items (via background jobs).
    """

    def RecordEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InternalTeamAuditLogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecordEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordEvent,
                    request_deserializer=squareup_dot_teamauditlog_dot_service__pb2.RecordEventRequest.FromString,
                    response_serializer=squareup_dot_teamauditlog_dot_service__pb2.RecordEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.teamauditlog.internal.InternalTeamAuditLogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InternalTeamAuditLogService(object):
    """The Internal Team Audit Log Service does not require multipass credentials to make requests.
    Internal services that call this API must be whitelisted, as we will not be performing
    authorization checks in these requests. Examples of services that will call this API are
    Cash Drawers and Items (via background jobs).
    """

    @staticmethod
    def RecordEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.teamauditlog.internal.InternalTeamAuditLogService/RecordEvent',
            squareup_dot_teamauditlog_dot_service__pb2.RecordEventRequest.SerializeToString,
            squareup_dot_teamauditlog_dot_service__pb2.RecordEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

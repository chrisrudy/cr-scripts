# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.privacyvault import service_pb2 as squareup_dot_privacyvault_dot_service__pb2
from sq_protos_py.squareup.simple_instrument_store import api_pb2 as squareup_dot_simple__instrument__store_dot_api__pb2


class SimpleInstrumentStoreServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInstrument = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/GetInstrument',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentResponse.FromString,
                )
        self.GetInstruments = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/GetInstruments',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentsRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentsResponse.FromString,
                )
        self.QueryInstrument = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/QueryInstrument',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.QueryInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.QueryInstrumentResponse.FromString,
                )
        self.LinkInstrument = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/LinkInstrument',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.LinkInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.LinkInstrumentResponse.FromString,
                )
        self.UnlinkInstrument = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/UnlinkInstrument',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.UnlinkInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.UnlinkInstrumentResponse.FromString,
                )
        self.RelinkInstrument = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/RelinkInstrument',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.RelinkInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.RelinkInstrumentResponse.FromString,
                )
        self.VerifyAndLinkInstrument = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/VerifyAndLinkInstrument',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.VerifyAndLinkInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.VerifyAndLinkInstrumentResponse.FromString,
                )
        self.LockInstrument = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/LockInstrument',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.LockInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.LockInstrumentResponse.FromString,
                )
        self.ConfirmInstrument = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/ConfirmInstrument',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.ConfirmInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.ConfirmInstrumentResponse.FromString,
                )
        self.ResetInstrumentConfirmation = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/ResetInstrumentConfirmation',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.ResetInstrumentConfirmationRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.ResetInstrumentConfirmationResponse.FromString,
                )
        self.GetBankAccountsByOwner = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/GetBankAccountsByOwner',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetBankAccountsByOwnerRequest.SerializeToString,
                response_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetBankAccountsByOwnerResponse.FromString,
                )
        self.ForgetInstruments = channel.unary_unary(
                '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/ForgetInstruments',
                request_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.ForgetInstrumentsRequest.SerializeToString,
                response_deserializer=squareup_dot_privacyvault_dot_service__pb2.ForgetEntityResponse.FromString,
                )


class SimpleInstrumentStoreServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetInstrument(self, request, context):
        """* Primary fetching interface to get a linked instrument by token regardless of state. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInstruments(self, request, context):
        """*
        Interface to get multiple linked instruments by token regardless of state.
        Unlike the GetInstrument endpoint this does not include SecureCardData and does not support
        old format instrument tokens.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryInstrument(self, request, context):
        """*
        Query an instrument given multiple filter criteria.
        Unlike the GetInstrument endpoint this does not decrypt SecureCardData.

        The repeated instruments will be ordered based on:
        - account_type (by enum value)
        - account_token (lexicographically)
        - product (by enum value)
        - ordinal (numerically if present)
        - linked_at (descending)

        Note: the current implementation has an index on each criteria individually but not pairwise
        indices (e.g. usertoken X product X isactive). We'll tune the performance as we see
        common use cases emerge.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinkInstrument(self, request, context):
        """*
        Record a new linked instrument.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlinkInstrument(self, request, context):
        """*
        Unlink a specific instrument.

        This is a one-way ticket. There is no such thing as un-unlinking the same instrument.
        To link the same card again, a client needs to create a new link request with the same card
        info and new linking info.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RelinkInstrument(self, request, context):
        """*
        Atomically link a new instrument, unlinking an existing instrument.

        The old instrument must exist.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyAndLinkInstrument(self, request, context):
        """*
        Verify and link a new instrument.

        Note: can't be idempotent due to esperanto verify not being idempotent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockInstrument(self, request, context):
        """*
        Lock a single-use instrument to a single Omnibus tender that will be allowed to charge it.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmInstrument(self, request, context):
        """*
        Confirm authentication of new linked instrument.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetInstrumentConfirmation(self, request, context):
        """*
        Reset authentication confirmation code and expiration for new linked instrument.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBankAccountsByOwner(self, request, context):
        """*
        Query the available bank accounts for a given owner. This provides a convenient means of
        determining the default bank account which is compatible with web's concept of a user's
        "linked" bank account.

        The repeated instruments will be ordered based on:
        - ordinal (numerically if present)
        - linked_at (descending)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForgetInstruments(self, request, context):
        """*
        Forget the identified instrument tokens.
        Intended for use when the instruments are NOT associated to a merchant or
        at least the GDPR entity is not a merchant.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimpleInstrumentStoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInstrument,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentResponse.SerializeToString,
            ),
            'GetInstruments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInstruments,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentsRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentsResponse.SerializeToString,
            ),
            'QueryInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryInstrument,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.QueryInstrumentRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.QueryInstrumentResponse.SerializeToString,
            ),
            'LinkInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.LinkInstrument,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.LinkInstrumentRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.LinkInstrumentResponse.SerializeToString,
            ),
            'UnlinkInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlinkInstrument,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.UnlinkInstrumentRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.UnlinkInstrumentResponse.SerializeToString,
            ),
            'RelinkInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.RelinkInstrument,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.RelinkInstrumentRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.RelinkInstrumentResponse.SerializeToString,
            ),
            'VerifyAndLinkInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyAndLinkInstrument,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.VerifyAndLinkInstrumentRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.VerifyAndLinkInstrumentResponse.SerializeToString,
            ),
            'LockInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.LockInstrument,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.LockInstrumentRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.LockInstrumentResponse.SerializeToString,
            ),
            'ConfirmInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmInstrument,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.ConfirmInstrumentRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.ConfirmInstrumentResponse.SerializeToString,
            ),
            'ResetInstrumentConfirmation': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetInstrumentConfirmation,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.ResetInstrumentConfirmationRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.ResetInstrumentConfirmationResponse.SerializeToString,
            ),
            'GetBankAccountsByOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBankAccountsByOwner,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetBankAccountsByOwnerRequest.FromString,
                    response_serializer=squareup_dot_simple__instrument__store_dot_api__pb2.GetBankAccountsByOwnerResponse.SerializeToString,
            ),
            'ForgetInstruments': grpc.unary_unary_rpc_method_handler(
                    servicer.ForgetInstruments,
                    request_deserializer=squareup_dot_simple__instrument__store_dot_api__pb2.ForgetInstrumentsRequest.FromString,
                    response_serializer=squareup_dot_privacyvault_dot_service__pb2.ForgetEntityResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.simple_instrument_store.api.SimpleInstrumentStoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SimpleInstrumentStoreService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/GetInstrument',
            squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInstruments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/GetInstruments',
            squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentsRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.GetInstrumentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/QueryInstrument',
            squareup_dot_simple__instrument__store_dot_api__pb2.QueryInstrumentRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.QueryInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LinkInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/LinkInstrument',
            squareup_dot_simple__instrument__store_dot_api__pb2.LinkInstrumentRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.LinkInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlinkInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/UnlinkInstrument',
            squareup_dot_simple__instrument__store_dot_api__pb2.UnlinkInstrumentRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.UnlinkInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RelinkInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/RelinkInstrument',
            squareup_dot_simple__instrument__store_dot_api__pb2.RelinkInstrumentRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.RelinkInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyAndLinkInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/VerifyAndLinkInstrument',
            squareup_dot_simple__instrument__store_dot_api__pb2.VerifyAndLinkInstrumentRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.VerifyAndLinkInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/LockInstrument',
            squareup_dot_simple__instrument__store_dot_api__pb2.LockInstrumentRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.LockInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfirmInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/ConfirmInstrument',
            squareup_dot_simple__instrument__store_dot_api__pb2.ConfirmInstrumentRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.ConfirmInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetInstrumentConfirmation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/ResetInstrumentConfirmation',
            squareup_dot_simple__instrument__store_dot_api__pb2.ResetInstrumentConfirmationRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.ResetInstrumentConfirmationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBankAccountsByOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/GetBankAccountsByOwner',
            squareup_dot_simple__instrument__store_dot_api__pb2.GetBankAccountsByOwnerRequest.SerializeToString,
            squareup_dot_simple__instrument__store_dot_api__pb2.GetBankAccountsByOwnerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ForgetInstruments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.simple_instrument_store.api.SimpleInstrumentStoreService/ForgetInstruments',
            squareup_dot_simple__instrument__store_dot_api__pb2.ForgetInstrumentsRequest.SerializeToString,
            squareup_dot_privacyvault_dot_service__pb2.ForgetEntityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

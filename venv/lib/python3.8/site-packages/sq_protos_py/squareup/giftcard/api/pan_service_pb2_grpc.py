# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.giftcard.api import pan_service_pb2 as squareup_dot_giftcard_dot_api_dot_pan__service__pb2


class PanServiceStub(object):
    """*
    A service that allows creating and managing PANs for gift cards.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPanState = channel.unary_unary(
                '/squareup.giftcard.api.PanService/GetPanState',
                request_serializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GetPanStateRequest.SerializeToString,
                response_deserializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GetPanStateResponse.FromString,
                )
        self.GeneratePanBatch = channel.unary_unary(
                '/squareup.giftcard.api.PanService/GeneratePanBatch',
                request_serializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GeneratePanBatchRequest.SerializeToString,
                response_deserializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GeneratePanBatchResponse.FromString,
                )
        self.MarkBatchAsSentToPrinter = channel.unary_unary(
                '/squareup.giftcard.api.PanService/MarkBatchAsSentToPrinter',
                request_serializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.MarkBatchAsSentToPrinterRequest.SerializeToString,
                response_deserializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.MarkBatchAsSentToPrinterResponse.FromString,
                )
        self.BackfillFidelius = channel.unary_unary(
                '/squareup.giftcard.api.PanService/BackfillFidelius',
                request_serializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillFideliusRequest.SerializeToString,
                response_deserializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillFideliusResponse.FromString,
                )
        self.BackfillThirdPartyGANFideliusTokens = channel.unary_unary(
                '/squareup.giftcard.api.PanService/BackfillThirdPartyGANFideliusTokens',
                request_serializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillThirdPartyGANFideliusTokensRequest.SerializeToString,
                response_deserializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillThirdPartyGANFideliusTokensResponse.FromString,
                )


class PanServiceServicer(object):
    """*
    A service that allows creating and managing PANs for gift cards.
    """

    def GetPanState(self, request, context):
        """* Retrieves the state of a gift card, identified by its PAN.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GeneratePanBatch(self, request, context):
        """*
        Generates a batch of PANs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkBatchAsSentToPrinter(self, request, context):
        """*
        Marks a batch as having been sent to a printer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackfillFidelius(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackfillThirdPartyGANFideliusTokens(self, request, context):
        """*
        One-time use endpoint for importing third party raw third party external GANs and persisting
        their equivalent ganFideliusTokens in the giftcard.thirdPartyCardFideliusToken column.
        Input is an encrypted CSV file that will be hard-coded in the application code. Once the import
        is complete, we will be deleting this endpoint.
        High level proposal here: https://docs.google.com/document/d/1vS86NL1xmnENrJPd-GLSYCvbUPQBIr2ich2FhwG-63o/edit#heading=h.5v0zmskji707
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PanServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPanState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPanState,
                    request_deserializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GetPanStateRequest.FromString,
                    response_serializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GetPanStateResponse.SerializeToString,
            ),
            'GeneratePanBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GeneratePanBatch,
                    request_deserializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GeneratePanBatchRequest.FromString,
                    response_serializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GeneratePanBatchResponse.SerializeToString,
            ),
            'MarkBatchAsSentToPrinter': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkBatchAsSentToPrinter,
                    request_deserializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.MarkBatchAsSentToPrinterRequest.FromString,
                    response_serializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.MarkBatchAsSentToPrinterResponse.SerializeToString,
            ),
            'BackfillFidelius': grpc.unary_unary_rpc_method_handler(
                    servicer.BackfillFidelius,
                    request_deserializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillFideliusRequest.FromString,
                    response_serializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillFideliusResponse.SerializeToString,
            ),
            'BackfillThirdPartyGANFideliusTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.BackfillThirdPartyGANFideliusTokens,
                    request_deserializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillThirdPartyGANFideliusTokensRequest.FromString,
                    response_serializer=squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillThirdPartyGANFideliusTokensResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.giftcard.api.PanService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PanService(object):
    """*
    A service that allows creating and managing PANs for gift cards.
    """

    @staticmethod
    def GetPanState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.giftcard.api.PanService/GetPanState',
            squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GetPanStateRequest.SerializeToString,
            squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GetPanStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GeneratePanBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.giftcard.api.PanService/GeneratePanBatch',
            squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GeneratePanBatchRequest.SerializeToString,
            squareup_dot_giftcard_dot_api_dot_pan__service__pb2.GeneratePanBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkBatchAsSentToPrinter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.giftcard.api.PanService/MarkBatchAsSentToPrinter',
            squareup_dot_giftcard_dot_api_dot_pan__service__pb2.MarkBatchAsSentToPrinterRequest.SerializeToString,
            squareup_dot_giftcard_dot_api_dot_pan__service__pb2.MarkBatchAsSentToPrinterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BackfillFidelius(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.giftcard.api.PanService/BackfillFidelius',
            squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillFideliusRequest.SerializeToString,
            squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillFideliusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BackfillThirdPartyGANFideliusTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.giftcard.api.PanService/BackfillThirdPartyGANFideliusTokens',
            squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillThirdPartyGANFideliusTokensRequest.SerializeToString,
            squareup_dot_giftcard_dot_api_dot_pan__service__pb2.BackfillThirdPartyGANFideliusTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

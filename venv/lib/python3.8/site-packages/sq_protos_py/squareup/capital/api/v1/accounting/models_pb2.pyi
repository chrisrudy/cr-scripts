# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.common.currency_pb2 import (
    Money as squareup___common___currency_pb2___Money,
)

from sq_protos_py.squareup.common.time_pb2 import (
    DateTime as squareup___common___time_pb2___DateTime,
)

from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class AccountingData(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    fund_plan_token: typing___Text = ...

    @property
    def purchase_proceeds(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def sale_price(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def investor_remaining_balance(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def repayments_net_of_returns(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def net_servicing_fee(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def cancel_cash(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def breach_cash(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def other_cash(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def net_cash(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def purchased_receivable(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def sale_receivable(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def repayment_net_of_returns_receivable(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def repayments_net_of_returns_receivable(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def cancel_receivable(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def breach_receivable(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def write_off_receivable(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def other_receivable(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def receivable_balance(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def last_payment_date(self) -> squareup___common___time_pb2___DateTime: ...

    @property
    def plan_remaining_balance(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def pending_balance(self) -> squareup___common___currency_pb2___Money: ...

    def __init__(self,
        *,
        fund_plan_token : typing___Optional[typing___Text] = None,
        purchase_proceeds : typing___Optional[squareup___common___currency_pb2___Money] = None,
        sale_price : typing___Optional[squareup___common___currency_pb2___Money] = None,
        investor_remaining_balance : typing___Optional[squareup___common___currency_pb2___Money] = None,
        repayments_net_of_returns : typing___Optional[squareup___common___currency_pb2___Money] = None,
        net_servicing_fee : typing___Optional[squareup___common___currency_pb2___Money] = None,
        cancel_cash : typing___Optional[squareup___common___currency_pb2___Money] = None,
        breach_cash : typing___Optional[squareup___common___currency_pb2___Money] = None,
        other_cash : typing___Optional[squareup___common___currency_pb2___Money] = None,
        net_cash : typing___Optional[squareup___common___currency_pb2___Money] = None,
        purchased_receivable : typing___Optional[squareup___common___currency_pb2___Money] = None,
        sale_receivable : typing___Optional[squareup___common___currency_pb2___Money] = None,
        repayment_net_of_returns_receivable : typing___Optional[squareup___common___currency_pb2___Money] = None,
        repayments_net_of_returns_receivable : typing___Optional[squareup___common___currency_pb2___Money] = None,
        cancel_receivable : typing___Optional[squareup___common___currency_pb2___Money] = None,
        breach_receivable : typing___Optional[squareup___common___currency_pb2___Money] = None,
        write_off_receivable : typing___Optional[squareup___common___currency_pb2___Money] = None,
        other_receivable : typing___Optional[squareup___common___currency_pb2___Money] = None,
        receivable_balance : typing___Optional[squareup___common___currency_pb2___Money] = None,
        last_payment_date : typing___Optional[squareup___common___time_pb2___DateTime] = None,
        plan_remaining_balance : typing___Optional[squareup___common___currency_pb2___Money] = None,
        pending_balance : typing___Optional[squareup___common___currency_pb2___Money] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"breach_cash",b"breach_cash",u"breach_receivable",b"breach_receivable",u"cancel_cash",b"cancel_cash",u"cancel_receivable",b"cancel_receivable",u"fund_plan_token",b"fund_plan_token",u"investor_remaining_balance",b"investor_remaining_balance",u"last_payment_date",b"last_payment_date",u"net_cash",b"net_cash",u"net_servicing_fee",b"net_servicing_fee",u"other_cash",b"other_cash",u"other_receivable",b"other_receivable",u"pending_balance",b"pending_balance",u"plan_remaining_balance",b"plan_remaining_balance",u"purchase_proceeds",b"purchase_proceeds",u"purchased_receivable",b"purchased_receivable",u"receivable_balance",b"receivable_balance",u"repayment_net_of_returns_receivable",b"repayment_net_of_returns_receivable",u"repayments_net_of_returns",b"repayments_net_of_returns",u"repayments_net_of_returns_receivable",b"repayments_net_of_returns_receivable",u"sale_price",b"sale_price",u"sale_receivable",b"sale_receivable",u"write_off_receivable",b"write_off_receivable"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"breach_cash",b"breach_cash",u"breach_receivable",b"breach_receivable",u"cancel_cash",b"cancel_cash",u"cancel_receivable",b"cancel_receivable",u"fund_plan_token",b"fund_plan_token",u"investor_remaining_balance",b"investor_remaining_balance",u"last_payment_date",b"last_payment_date",u"net_cash",b"net_cash",u"net_servicing_fee",b"net_servicing_fee",u"other_cash",b"other_cash",u"other_receivable",b"other_receivable",u"pending_balance",b"pending_balance",u"plan_remaining_balance",b"plan_remaining_balance",u"purchase_proceeds",b"purchase_proceeds",u"purchased_receivable",b"purchased_receivable",u"receivable_balance",b"receivable_balance",u"repayment_net_of_returns_receivable",b"repayment_net_of_returns_receivable",u"repayments_net_of_returns",b"repayments_net_of_returns",u"repayments_net_of_returns_receivable",b"repayments_net_of_returns_receivable",u"sale_price",b"sale_price",u"sale_receivable",b"sale_receivable",u"write_off_receivable",b"write_off_receivable"]) -> None: ...
type___AccountingData = AccountingData

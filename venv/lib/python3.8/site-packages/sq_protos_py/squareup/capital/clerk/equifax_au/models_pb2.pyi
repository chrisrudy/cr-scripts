# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.common.currency_pb2 import (
    Money as squareup___common___currency_pb2___Money,
)

from sq_protos_py.squareup.common.location_pb2 import (
    GlobalAddress as squareup___common___location_pb2___GlobalAddress,
)

from sq_protos_py.squareup.common.time_pb2 import (
    DateTime as squareup___common___time_pb2___DateTime,
    YearMonthDay as squareup___common___time_pb2___YearMonthDay,
)

from typing import (
    Iterable as typing___Iterable,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class EquifaxAuCreditProfile(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    RequestResultValue = typing___NewType('RequestResultValue', builtin___int)
    type___RequestResultValue = RequestResultValue
    RequestResult: _RequestResult
    class _RequestResult(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[EquifaxAuCreditProfile.RequestResultValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        RR_DO_NOT_USE = typing___cast(EquifaxAuCreditProfile.RequestResultValue, 0)
        SUCCESS = typing___cast(EquifaxAuCreditProfile.RequestResultValue, 1)
        FAILURE = typing___cast(EquifaxAuCreditProfile.RequestResultValue, 2)
    RR_DO_NOT_USE = typing___cast(EquifaxAuCreditProfile.RequestResultValue, 0)
    SUCCESS = typing___cast(EquifaxAuCreditProfile.RequestResultValue, 1)
    FAILURE = typing___cast(EquifaxAuCreditProfile.RequestResultValue, 2)
    type___RequestResult = RequestResult

    FailureReasonValue = typing___NewType('FailureReasonValue', builtin___int)
    type___FailureReasonValue = FailureReasonValue
    FailureReason: _FailureReason
    class _FailureReason(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[EquifaxAuCreditProfile.FailureReasonValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        FR_DO_NOT_USE = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 0)
        NO_STRONG_MATCH = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 1)
        FILE_BAN = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 2)
        DECEASED_OR_UNKNOWN = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 3)
        ADVERSE_INFORMATION_ON_FILE = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 4)
        SYSTEM_INTERNAL_ERROR = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 5)
    FR_DO_NOT_USE = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 0)
    NO_STRONG_MATCH = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 1)
    FILE_BAN = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 2)
    DECEASED_OR_UNKNOWN = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 3)
    ADVERSE_INFORMATION_ON_FILE = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 4)
    SYSTEM_INTERNAL_ERROR = typing___cast(EquifaxAuCreditProfile.FailureReasonValue, 5)
    type___FailureReason = FailureReason

    InquiryTypeValue = typing___NewType('InquiryTypeValue', builtin___int)
    type___InquiryTypeValue = InquiryTypeValue
    InquiryType: _InquiryType
    class _InquiryType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[EquifaxAuCreditProfile.InquiryTypeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        IT_DO_NOT_USE = typing___cast(EquifaxAuCreditProfile.InquiryTypeValue, 0)
        SOFT_INQUIRY = typing___cast(EquifaxAuCreditProfile.InquiryTypeValue, 1)
    IT_DO_NOT_USE = typing___cast(EquifaxAuCreditProfile.InquiryTypeValue, 0)
    SOFT_INQUIRY = typing___cast(EquifaxAuCreditProfile.InquiryTypeValue, 1)
    type___InquiryType = InquiryType

    GenderCodeValue = typing___NewType('GenderCodeValue', builtin___int)
    type___GenderCodeValue = GenderCodeValue
    GenderCode: _GenderCode
    class _GenderCode(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[EquifaxAuCreditProfile.GenderCodeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        GC_DO_NOT_USE = typing___cast(EquifaxAuCreditProfile.GenderCodeValue, 0)
        M = typing___cast(EquifaxAuCreditProfile.GenderCodeValue, 1)
        F = typing___cast(EquifaxAuCreditProfile.GenderCodeValue, 2)
        U = typing___cast(EquifaxAuCreditProfile.GenderCodeValue, 3)
    GC_DO_NOT_USE = typing___cast(EquifaxAuCreditProfile.GenderCodeValue, 0)
    M = typing___cast(EquifaxAuCreditProfile.GenderCodeValue, 1)
    F = typing___cast(EquifaxAuCreditProfile.GenderCodeValue, 2)
    U = typing___cast(EquifaxAuCreditProfile.GenderCodeValue, 3)
    type___GenderCode = GenderCode

    token: typing___Text = ...
    product_name: typing___Text = ...
    request_result: type___EquifaxAuCreditProfile.RequestResultValue = ...
    failure_reason: type___EquifaxAuCreditProfile.FailureReasonValue = ...
    inquiry_type: type___EquifaxAuCreditProfile.InquiryTypeValue = ...
    equifax_commercial_apply_score: builtin___int = ...

    @property
    def equifax_commercial_apply_key_contributing_factors(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___KeyContributingFactor]: ...

    @property
    def addresses(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Address]: ...

    @property
    def created_at(self) -> squareup___common___time_pb2___DateTime: ...

    @property
    def updated_at(self) -> squareup___common___time_pb2___DateTime: ...

    def __init__(self,
        *,
        token : typing___Optional[typing___Text] = None,
        product_name : typing___Optional[typing___Text] = None,
        request_result : typing___Optional[type___EquifaxAuCreditProfile.RequestResultValue] = None,
        failure_reason : typing___Optional[type___EquifaxAuCreditProfile.FailureReasonValue] = None,
        inquiry_type : typing___Optional[type___EquifaxAuCreditProfile.InquiryTypeValue] = None,
        equifax_commercial_apply_score : typing___Optional[builtin___int] = None,
        equifax_commercial_apply_key_contributing_factors : typing___Optional[typing___Iterable[type___KeyContributingFactor]] = None,
        addresses : typing___Optional[typing___Iterable[type___Address]] = None,
        created_at : typing___Optional[squareup___common___time_pb2___DateTime] = None,
        updated_at : typing___Optional[squareup___common___time_pb2___DateTime] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"created_at",b"created_at",u"equifax_commercial_apply_score",b"equifax_commercial_apply_score",u"failure_reason",b"failure_reason",u"inquiry_type",b"inquiry_type",u"product_name",b"product_name",u"request_result",b"request_result",u"token",b"token",u"updated_at",b"updated_at"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"addresses",b"addresses",u"created_at",b"created_at",u"equifax_commercial_apply_key_contributing_factors",b"equifax_commercial_apply_key_contributing_factors",u"equifax_commercial_apply_score",b"equifax_commercial_apply_score",u"failure_reason",b"failure_reason",u"inquiry_type",b"inquiry_type",u"product_name",b"product_name",u"request_result",b"request_result",u"token",b"token",u"updated_at",b"updated_at"]) -> None: ...
type___EquifaxAuCreditProfile = EquifaxAuCreditProfile

class CreditProfileRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    first_name: typing___Text = ...
    last_name: typing___Text = ...
    driver_license_number_fidelius_token: typing___Text = ...
    gender_code: type___EquifaxAuCreditProfile.GenderCodeValue = ...
    inquiry_type: type___EquifaxAuCreditProfile.InquiryTypeValue = ...

    @property
    def birth_date(self) -> squareup___common___time_pb2___YearMonthDay: ...

    @property
    def unformatted_address(self) -> squareup___common___location_pb2___GlobalAddress: ...

    @property
    def formatted_address(self) -> type___Address: ...

    @property
    def enquiry_amount(self) -> squareup___common___currency_pb2___Money: ...

    def __init__(self,
        *,
        first_name : typing___Optional[typing___Text] = None,
        last_name : typing___Optional[typing___Text] = None,
        driver_license_number_fidelius_token : typing___Optional[typing___Text] = None,
        birth_date : typing___Optional[squareup___common___time_pb2___YearMonthDay] = None,
        gender_code : typing___Optional[type___EquifaxAuCreditProfile.GenderCodeValue] = None,
        unformatted_address : typing___Optional[squareup___common___location_pb2___GlobalAddress] = None,
        formatted_address : typing___Optional[type___Address] = None,
        inquiry_type : typing___Optional[type___EquifaxAuCreditProfile.InquiryTypeValue] = None,
        enquiry_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"birth_date",b"birth_date",u"driver_license_number_fidelius_token",b"driver_license_number_fidelius_token",u"enquiry_amount",b"enquiry_amount",u"first_name",b"first_name",u"formatted_address",b"formatted_address",u"gender_code",b"gender_code",u"inquiry_type",b"inquiry_type",u"last_name",b"last_name",u"unformatted_address",b"unformatted_address"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"birth_date",b"birth_date",u"driver_license_number_fidelius_token",b"driver_license_number_fidelius_token",u"enquiry_amount",b"enquiry_amount",u"first_name",b"first_name",u"formatted_address",b"formatted_address",u"gender_code",b"gender_code",u"inquiry_type",b"inquiry_type",u"last_name",b"last_name",u"unformatted_address",b"unformatted_address"]) -> None: ...
type___CreditProfileRequest = CreditProfileRequest

class Address(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    StreetTypeValue = typing___NewType('StreetTypeValue', builtin___int)
    type___StreetTypeValue = StreetTypeValue
    StreetType: _StreetType
    class _StreetType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Address.StreetTypeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        ST_DO_NOT_USE = typing___cast(Address.StreetTypeValue, 0)
        ACCS = typing___cast(Address.StreetTypeValue, 1)
        ALLY = typing___cast(Address.StreetTypeValue, 2)
        ALWY = typing___cast(Address.StreetTypeValue, 3)
        AMBL = typing___cast(Address.StreetTypeValue, 4)
        ANCG = typing___cast(Address.StreetTypeValue, 5)
        APP = typing___cast(Address.StreetTypeValue, 6)
        ARC = typing___cast(Address.StreetTypeValue, 7)
        ART = typing___cast(Address.StreetTypeValue, 8)
        AVE = typing___cast(Address.StreetTypeValue, 9)
        BASN = typing___cast(Address.StreetTypeValue, 10)
        BCH = typing___cast(Address.StreetTypeValue, 11)
        BEND = typing___cast(Address.StreetTypeValue, 12)
        BLK = typing___cast(Address.StreetTypeValue, 13)
        BVD = typing___cast(Address.StreetTypeValue, 14)
        BRCE = typing___cast(Address.StreetTypeValue, 15)
        BRAE = typing___cast(Address.StreetTypeValue, 16)
        BRK = typing___cast(Address.StreetTypeValue, 17)
        BDGE = typing___cast(Address.StreetTypeValue, 18)
        BDWY = typing___cast(Address.StreetTypeValue, 19)
        BROW = typing___cast(Address.StreetTypeValue, 20)
        BYPA = typing___cast(Address.StreetTypeValue, 21)
        BYWY = typing___cast(Address.StreetTypeValue, 22)
        CAUS = typing___cast(Address.StreetTypeValue, 23)
        CTR = typing___cast(Address.StreetTypeValue, 24)
        CNWY = typing___cast(Address.StreetTypeValue, 25)
        CH = typing___cast(Address.StreetTypeValue, 26)
        CIR = typing___cast(Address.StreetTypeValue, 27)
        CLT = typing___cast(Address.StreetTypeValue, 28)
        CCT = typing___cast(Address.StreetTypeValue, 29)
        CRCS = typing___cast(Address.StreetTypeValue, 30)
        CL = typing___cast(Address.StreetTypeValue, 31)
        CLDE = typing___cast(Address.StreetTypeValue, 32)
        CMMN = typing___cast(Address.StreetTypeValue, 33)
        CON = typing___cast(Address.StreetTypeValue, 34)
        CPS = typing___cast(Address.StreetTypeValue, 35)
        CNR = typing___cast(Address.StreetTypeValue, 36)
        CSO = typing___cast(Address.StreetTypeValue, 37)
        CT = typing___cast(Address.StreetTypeValue, 38)
        CTYD = typing___cast(Address.StreetTypeValue, 39)
        COVE = typing___cast(Address.StreetTypeValue, 40)
        CRES = typing___cast(Address.StreetTypeValue, 41)
        CRST = typing___cast(Address.StreetTypeValue, 42)
        CRSS = typing___cast(Address.StreetTypeValue, 43)
        CRSG = typing___cast(Address.StreetTypeValue, 44)
        CRD = typing___cast(Address.StreetTypeValue, 45)
        COWY = typing___cast(Address.StreetTypeValue, 46)
        CUWY = typing___cast(Address.StreetTypeValue, 47)
        CDS = typing___cast(Address.StreetTypeValue, 48)
        CTTG = typing___cast(Address.StreetTypeValue, 49)
        DALE = typing___cast(Address.StreetTypeValue, 50)
        DELL = typing___cast(Address.StreetTypeValue, 51)
        DEVN = typing___cast(Address.StreetTypeValue, 52)
        DIP = typing___cast(Address.StreetTypeValue, 53)
        DSTR = typing___cast(Address.StreetTypeValue, 54)
        DR = typing___cast(Address.StreetTypeValue, 55)
        DRWY = typing___cast(Address.StreetTypeValue, 56)
        EDGE = typing___cast(Address.StreetTypeValue, 57)
        ELB = typing___cast(Address.StreetTypeValue, 58)
        END = typing___cast(Address.StreetTypeValue, 59)
        ENT = typing___cast(Address.StreetTypeValue, 60)
        ESP = typing___cast(Address.StreetTypeValue, 61)
        EST = typing___cast(Address.StreetTypeValue, 62)
        EXP = typing___cast(Address.StreetTypeValue, 63)
        EXTN = typing___cast(Address.StreetTypeValue, 64)
        FAWY = typing___cast(Address.StreetTypeValue, 65)
        FTRK = typing___cast(Address.StreetTypeValue, 66)
        FITR = typing___cast(Address.StreetTypeValue, 67)
        FLAT = typing___cast(Address.StreetTypeValue, 68)
        FOLW = typing___cast(Address.StreetTypeValue, 69)
        FTWY = typing___cast(Address.StreetTypeValue, 70)
        FSHR = typing___cast(Address.StreetTypeValue, 71)
        FORM = typing___cast(Address.StreetTypeValue, 72)
        FWY = typing___cast(Address.StreetTypeValue, 73)
        FRNT = typing___cast(Address.StreetTypeValue, 74)
        FRTG = typing___cast(Address.StreetTypeValue, 75)
        GAP = typing___cast(Address.StreetTypeValue, 76)
        GDN = typing___cast(Address.StreetTypeValue, 77)
        GDNS = typing___cast(Address.StreetTypeValue, 78)
        GTE = typing___cast(Address.StreetTypeValue, 79)
        GTES = typing___cast(Address.StreetTypeValue, 80)
        GLD = typing___cast(Address.StreetTypeValue, 81)
        GLEN = typing___cast(Address.StreetTypeValue, 82)
        GRA = typing___cast(Address.StreetTypeValue, 83)
        GRN = typing___cast(Address.StreetTypeValue, 84)
        GRND = typing___cast(Address.StreetTypeValue, 85)
        GR = typing___cast(Address.StreetTypeValue, 86)
        GLY = typing___cast(Address.StreetTypeValue, 87)
        HTS = typing___cast(Address.StreetTypeValue, 88)
        HRD = typing___cast(Address.StreetTypeValue, 89)
        HWY = typing___cast(Address.StreetTypeValue, 90)
        HILL = typing___cast(Address.StreetTypeValue, 91)
        INTG = typing___cast(Address.StreetTypeValue, 92)
        INTN = typing___cast(Address.StreetTypeValue, 93)
        JNC = typing___cast(Address.StreetTypeValue, 94)
        KEY = typing___cast(Address.StreetTypeValue, 95)
        LDG = typing___cast(Address.StreetTypeValue, 96)
        LANE = typing___cast(Address.StreetTypeValue, 97)
        LNWY = typing___cast(Address.StreetTypeValue, 98)
        LEES = typing___cast(Address.StreetTypeValue, 99)
        LNE = typing___cast(Address.StreetTypeValue, 100)
        LINK = typing___cast(Address.StreetTypeValue, 101)
        LT = typing___cast(Address.StreetTypeValue, 102)
        LKT = typing___cast(Address.StreetTypeValue, 103)
        LOOP = typing___cast(Address.StreetTypeValue, 104)
        LWR = typing___cast(Address.StreetTypeValue, 105)
        MALL = typing___cast(Address.StreetTypeValue, 106)
        MNDR = typing___cast(Address.StreetTypeValue, 107)
        MEW = typing___cast(Address.StreetTypeValue, 108)
        MEWS = typing___cast(Address.StreetTypeValue, 109)
        MWY = typing___cast(Address.StreetTypeValue, 110)
        MT = typing___cast(Address.StreetTypeValue, 111)
        NOOK = typing___cast(Address.StreetTypeValue, 112)
        OTLK = typing___cast(Address.StreetTypeValue, 113)
        PDE = typing___cast(Address.StreetTypeValue, 114)
        PARK = typing___cast(Address.StreetTypeValue, 115)
        PKLD = typing___cast(Address.StreetTypeValue, 116)
        PKWY = typing___cast(Address.StreetTypeValue, 117)
        PART = typing___cast(Address.StreetTypeValue, 118)
        PASS = typing___cast(Address.StreetTypeValue, 119)
        PATH = typing___cast(Address.StreetTypeValue, 120)
        PHWY = typing___cast(Address.StreetTypeValue, 121)
        PIAZ = typing___cast(Address.StreetTypeValue, 122)
        PL = typing___cast(Address.StreetTypeValue, 123)
        PLAT = typing___cast(Address.StreetTypeValue, 124)
        PLZA = typing___cast(Address.StreetTypeValue, 125)
        PKT = typing___cast(Address.StreetTypeValue, 126)
        PNT = typing___cast(Address.StreetTypeValue, 127)
        PORT = typing___cast(Address.StreetTypeValue, 128)
        PROM = typing___cast(Address.StreetTypeValue, 129)
        QUAD = typing___cast(Address.StreetTypeValue, 130)
        QDGL = typing___cast(Address.StreetTypeValue, 131)
        QDRT = typing___cast(Address.StreetTypeValue, 132)
        QY = typing___cast(Address.StreetTypeValue, 133)
        QYS = typing___cast(Address.StreetTypeValue, 134)
        RMBL = typing___cast(Address.StreetTypeValue, 135)
        RAMP = typing___cast(Address.StreetTypeValue, 136)
        RNGE = typing___cast(Address.StreetTypeValue, 137)
        RCH = typing___cast(Address.StreetTypeValue, 138)
        RES = typing___cast(Address.StreetTypeValue, 139)
        REST = typing___cast(Address.StreetTypeValue, 140)
        RTT = typing___cast(Address.StreetTypeValue, 141)
        RIDE = typing___cast(Address.StreetTypeValue, 142)
        RDGE = typing___cast(Address.StreetTypeValue, 143)
        RGWY = typing___cast(Address.StreetTypeValue, 144)
        ROWY = typing___cast(Address.StreetTypeValue, 145)
        RING = typing___cast(Address.StreetTypeValue, 146)
        RISE = typing___cast(Address.StreetTypeValue, 147)
        RVR = typing___cast(Address.StreetTypeValue, 148)
        RVWY = typing___cast(Address.StreetTypeValue, 149)
        RVRA = typing___cast(Address.StreetTypeValue, 150)
        RD = typing___cast(Address.StreetTypeValue, 151)
        RDS = typing___cast(Address.StreetTypeValue, 152)
        RDSD = typing___cast(Address.StreetTypeValue, 153)
        RDWY = typing___cast(Address.StreetTypeValue, 154)
        RNDE = typing___cast(Address.StreetTypeValue, 155)
        RSBL = typing___cast(Address.StreetTypeValue, 156)
        RTY = typing___cast(Address.StreetTypeValue, 157)
        RND = typing___cast(Address.StreetTypeValue, 158)
        RTE = typing___cast(Address.StreetTypeValue, 159)
        ROW = typing___cast(Address.StreetTypeValue, 160)
        RUE = typing___cast(Address.StreetTypeValue, 161)
        RUN = typing___cast(Address.StreetTypeValue, 162)
        SWY = typing___cast(Address.StreetTypeValue, 163)
        SDNG = typing___cast(Address.StreetTypeValue, 164)
        SLPE = typing___cast(Address.StreetTypeValue, 165)
        SND = typing___cast(Address.StreetTypeValue, 166)
        SPUR = typing___cast(Address.StreetTypeValue, 167)
        SQ = typing___cast(Address.StreetTypeValue, 168)
        STRS = typing___cast(Address.StreetTypeValue, 169)
        SHWY = typing___cast(Address.StreetTypeValue, 170)
        STPS = typing___cast(Address.StreetTypeValue, 171)
        STRA = typing___cast(Address.StreetTypeValue, 172)
        ST = typing___cast(Address.StreetTypeValue, 173)
        STRP = typing___cast(Address.StreetTypeValue, 174)
        SBWY = typing___cast(Address.StreetTypeValue, 175)
        TARN = typing___cast(Address.StreetTypeValue, 176)
        TCE = typing___cast(Address.StreetTypeValue, 177)
        THOR = typing___cast(Address.StreetTypeValue, 178)
        TLWY = typing___cast(Address.StreetTypeValue, 179)
        TOP = typing___cast(Address.StreetTypeValue, 180)
        TOR = typing___cast(Address.StreetTypeValue, 181)
        TWRS = typing___cast(Address.StreetTypeValue, 182)
        TRK = typing___cast(Address.StreetTypeValue, 183)
        TRL = typing___cast(Address.StreetTypeValue, 184)
        TRLR = typing___cast(Address.StreetTypeValue, 185)
        TRI = typing___cast(Address.StreetTypeValue, 186)
        TKY = typing___cast(Address.StreetTypeValue, 187)
        TURN = typing___cast(Address.StreetTypeValue, 188)
        UPAS = typing___cast(Address.StreetTypeValue, 189)
        UPR = typing___cast(Address.StreetTypeValue, 190)
        VALE = typing___cast(Address.StreetTypeValue, 191)
        VDCT = typing___cast(Address.StreetTypeValue, 192)
        VIEW = typing___cast(Address.StreetTypeValue, 193)
        VLLS = typing___cast(Address.StreetTypeValue, 194)
        VSTA = typing___cast(Address.StreetTypeValue, 195)
        WADE = typing___cast(Address.StreetTypeValue, 196)
        WALK = typing___cast(Address.StreetTypeValue, 197)
        WKWY = typing___cast(Address.StreetTypeValue, 198)
        WAY = typing___cast(Address.StreetTypeValue, 199)
        WHRF = typing___cast(Address.StreetTypeValue, 200)
        WYND = typing___cast(Address.StreetTypeValue, 201)
        YARD = typing___cast(Address.StreetTypeValue, 202)
    ST_DO_NOT_USE = typing___cast(Address.StreetTypeValue, 0)
    ACCS = typing___cast(Address.StreetTypeValue, 1)
    ALLY = typing___cast(Address.StreetTypeValue, 2)
    ALWY = typing___cast(Address.StreetTypeValue, 3)
    AMBL = typing___cast(Address.StreetTypeValue, 4)
    ANCG = typing___cast(Address.StreetTypeValue, 5)
    APP = typing___cast(Address.StreetTypeValue, 6)
    ARC = typing___cast(Address.StreetTypeValue, 7)
    ART = typing___cast(Address.StreetTypeValue, 8)
    AVE = typing___cast(Address.StreetTypeValue, 9)
    BASN = typing___cast(Address.StreetTypeValue, 10)
    BCH = typing___cast(Address.StreetTypeValue, 11)
    BEND = typing___cast(Address.StreetTypeValue, 12)
    BLK = typing___cast(Address.StreetTypeValue, 13)
    BVD = typing___cast(Address.StreetTypeValue, 14)
    BRCE = typing___cast(Address.StreetTypeValue, 15)
    BRAE = typing___cast(Address.StreetTypeValue, 16)
    BRK = typing___cast(Address.StreetTypeValue, 17)
    BDGE = typing___cast(Address.StreetTypeValue, 18)
    BDWY = typing___cast(Address.StreetTypeValue, 19)
    BROW = typing___cast(Address.StreetTypeValue, 20)
    BYPA = typing___cast(Address.StreetTypeValue, 21)
    BYWY = typing___cast(Address.StreetTypeValue, 22)
    CAUS = typing___cast(Address.StreetTypeValue, 23)
    CTR = typing___cast(Address.StreetTypeValue, 24)
    CNWY = typing___cast(Address.StreetTypeValue, 25)
    CH = typing___cast(Address.StreetTypeValue, 26)
    CIR = typing___cast(Address.StreetTypeValue, 27)
    CLT = typing___cast(Address.StreetTypeValue, 28)
    CCT = typing___cast(Address.StreetTypeValue, 29)
    CRCS = typing___cast(Address.StreetTypeValue, 30)
    CL = typing___cast(Address.StreetTypeValue, 31)
    CLDE = typing___cast(Address.StreetTypeValue, 32)
    CMMN = typing___cast(Address.StreetTypeValue, 33)
    CON = typing___cast(Address.StreetTypeValue, 34)
    CPS = typing___cast(Address.StreetTypeValue, 35)
    CNR = typing___cast(Address.StreetTypeValue, 36)
    CSO = typing___cast(Address.StreetTypeValue, 37)
    CT = typing___cast(Address.StreetTypeValue, 38)
    CTYD = typing___cast(Address.StreetTypeValue, 39)
    COVE = typing___cast(Address.StreetTypeValue, 40)
    CRES = typing___cast(Address.StreetTypeValue, 41)
    CRST = typing___cast(Address.StreetTypeValue, 42)
    CRSS = typing___cast(Address.StreetTypeValue, 43)
    CRSG = typing___cast(Address.StreetTypeValue, 44)
    CRD = typing___cast(Address.StreetTypeValue, 45)
    COWY = typing___cast(Address.StreetTypeValue, 46)
    CUWY = typing___cast(Address.StreetTypeValue, 47)
    CDS = typing___cast(Address.StreetTypeValue, 48)
    CTTG = typing___cast(Address.StreetTypeValue, 49)
    DALE = typing___cast(Address.StreetTypeValue, 50)
    DELL = typing___cast(Address.StreetTypeValue, 51)
    DEVN = typing___cast(Address.StreetTypeValue, 52)
    DIP = typing___cast(Address.StreetTypeValue, 53)
    DSTR = typing___cast(Address.StreetTypeValue, 54)
    DR = typing___cast(Address.StreetTypeValue, 55)
    DRWY = typing___cast(Address.StreetTypeValue, 56)
    EDGE = typing___cast(Address.StreetTypeValue, 57)
    ELB = typing___cast(Address.StreetTypeValue, 58)
    END = typing___cast(Address.StreetTypeValue, 59)
    ENT = typing___cast(Address.StreetTypeValue, 60)
    ESP = typing___cast(Address.StreetTypeValue, 61)
    EST = typing___cast(Address.StreetTypeValue, 62)
    EXP = typing___cast(Address.StreetTypeValue, 63)
    EXTN = typing___cast(Address.StreetTypeValue, 64)
    FAWY = typing___cast(Address.StreetTypeValue, 65)
    FTRK = typing___cast(Address.StreetTypeValue, 66)
    FITR = typing___cast(Address.StreetTypeValue, 67)
    FLAT = typing___cast(Address.StreetTypeValue, 68)
    FOLW = typing___cast(Address.StreetTypeValue, 69)
    FTWY = typing___cast(Address.StreetTypeValue, 70)
    FSHR = typing___cast(Address.StreetTypeValue, 71)
    FORM = typing___cast(Address.StreetTypeValue, 72)
    FWY = typing___cast(Address.StreetTypeValue, 73)
    FRNT = typing___cast(Address.StreetTypeValue, 74)
    FRTG = typing___cast(Address.StreetTypeValue, 75)
    GAP = typing___cast(Address.StreetTypeValue, 76)
    GDN = typing___cast(Address.StreetTypeValue, 77)
    GDNS = typing___cast(Address.StreetTypeValue, 78)
    GTE = typing___cast(Address.StreetTypeValue, 79)
    GTES = typing___cast(Address.StreetTypeValue, 80)
    GLD = typing___cast(Address.StreetTypeValue, 81)
    GLEN = typing___cast(Address.StreetTypeValue, 82)
    GRA = typing___cast(Address.StreetTypeValue, 83)
    GRN = typing___cast(Address.StreetTypeValue, 84)
    GRND = typing___cast(Address.StreetTypeValue, 85)
    GR = typing___cast(Address.StreetTypeValue, 86)
    GLY = typing___cast(Address.StreetTypeValue, 87)
    HTS = typing___cast(Address.StreetTypeValue, 88)
    HRD = typing___cast(Address.StreetTypeValue, 89)
    HWY = typing___cast(Address.StreetTypeValue, 90)
    HILL = typing___cast(Address.StreetTypeValue, 91)
    INTG = typing___cast(Address.StreetTypeValue, 92)
    INTN = typing___cast(Address.StreetTypeValue, 93)
    JNC = typing___cast(Address.StreetTypeValue, 94)
    KEY = typing___cast(Address.StreetTypeValue, 95)
    LDG = typing___cast(Address.StreetTypeValue, 96)
    LANE = typing___cast(Address.StreetTypeValue, 97)
    LNWY = typing___cast(Address.StreetTypeValue, 98)
    LEES = typing___cast(Address.StreetTypeValue, 99)
    LNE = typing___cast(Address.StreetTypeValue, 100)
    LINK = typing___cast(Address.StreetTypeValue, 101)
    LT = typing___cast(Address.StreetTypeValue, 102)
    LKT = typing___cast(Address.StreetTypeValue, 103)
    LOOP = typing___cast(Address.StreetTypeValue, 104)
    LWR = typing___cast(Address.StreetTypeValue, 105)
    MALL = typing___cast(Address.StreetTypeValue, 106)
    MNDR = typing___cast(Address.StreetTypeValue, 107)
    MEW = typing___cast(Address.StreetTypeValue, 108)
    MEWS = typing___cast(Address.StreetTypeValue, 109)
    MWY = typing___cast(Address.StreetTypeValue, 110)
    MT = typing___cast(Address.StreetTypeValue, 111)
    NOOK = typing___cast(Address.StreetTypeValue, 112)
    OTLK = typing___cast(Address.StreetTypeValue, 113)
    PDE = typing___cast(Address.StreetTypeValue, 114)
    PARK = typing___cast(Address.StreetTypeValue, 115)
    PKLD = typing___cast(Address.StreetTypeValue, 116)
    PKWY = typing___cast(Address.StreetTypeValue, 117)
    PART = typing___cast(Address.StreetTypeValue, 118)
    PASS = typing___cast(Address.StreetTypeValue, 119)
    PATH = typing___cast(Address.StreetTypeValue, 120)
    PHWY = typing___cast(Address.StreetTypeValue, 121)
    PIAZ = typing___cast(Address.StreetTypeValue, 122)
    PL = typing___cast(Address.StreetTypeValue, 123)
    PLAT = typing___cast(Address.StreetTypeValue, 124)
    PLZA = typing___cast(Address.StreetTypeValue, 125)
    PKT = typing___cast(Address.StreetTypeValue, 126)
    PNT = typing___cast(Address.StreetTypeValue, 127)
    PORT = typing___cast(Address.StreetTypeValue, 128)
    PROM = typing___cast(Address.StreetTypeValue, 129)
    QUAD = typing___cast(Address.StreetTypeValue, 130)
    QDGL = typing___cast(Address.StreetTypeValue, 131)
    QDRT = typing___cast(Address.StreetTypeValue, 132)
    QY = typing___cast(Address.StreetTypeValue, 133)
    QYS = typing___cast(Address.StreetTypeValue, 134)
    RMBL = typing___cast(Address.StreetTypeValue, 135)
    RAMP = typing___cast(Address.StreetTypeValue, 136)
    RNGE = typing___cast(Address.StreetTypeValue, 137)
    RCH = typing___cast(Address.StreetTypeValue, 138)
    RES = typing___cast(Address.StreetTypeValue, 139)
    REST = typing___cast(Address.StreetTypeValue, 140)
    RTT = typing___cast(Address.StreetTypeValue, 141)
    RIDE = typing___cast(Address.StreetTypeValue, 142)
    RDGE = typing___cast(Address.StreetTypeValue, 143)
    RGWY = typing___cast(Address.StreetTypeValue, 144)
    ROWY = typing___cast(Address.StreetTypeValue, 145)
    RING = typing___cast(Address.StreetTypeValue, 146)
    RISE = typing___cast(Address.StreetTypeValue, 147)
    RVR = typing___cast(Address.StreetTypeValue, 148)
    RVWY = typing___cast(Address.StreetTypeValue, 149)
    RVRA = typing___cast(Address.StreetTypeValue, 150)
    RD = typing___cast(Address.StreetTypeValue, 151)
    RDS = typing___cast(Address.StreetTypeValue, 152)
    RDSD = typing___cast(Address.StreetTypeValue, 153)
    RDWY = typing___cast(Address.StreetTypeValue, 154)
    RNDE = typing___cast(Address.StreetTypeValue, 155)
    RSBL = typing___cast(Address.StreetTypeValue, 156)
    RTY = typing___cast(Address.StreetTypeValue, 157)
    RND = typing___cast(Address.StreetTypeValue, 158)
    RTE = typing___cast(Address.StreetTypeValue, 159)
    ROW = typing___cast(Address.StreetTypeValue, 160)
    RUE = typing___cast(Address.StreetTypeValue, 161)
    RUN = typing___cast(Address.StreetTypeValue, 162)
    SWY = typing___cast(Address.StreetTypeValue, 163)
    SDNG = typing___cast(Address.StreetTypeValue, 164)
    SLPE = typing___cast(Address.StreetTypeValue, 165)
    SND = typing___cast(Address.StreetTypeValue, 166)
    SPUR = typing___cast(Address.StreetTypeValue, 167)
    SQ = typing___cast(Address.StreetTypeValue, 168)
    STRS = typing___cast(Address.StreetTypeValue, 169)
    SHWY = typing___cast(Address.StreetTypeValue, 170)
    STPS = typing___cast(Address.StreetTypeValue, 171)
    STRA = typing___cast(Address.StreetTypeValue, 172)
    ST = typing___cast(Address.StreetTypeValue, 173)
    STRP = typing___cast(Address.StreetTypeValue, 174)
    SBWY = typing___cast(Address.StreetTypeValue, 175)
    TARN = typing___cast(Address.StreetTypeValue, 176)
    TCE = typing___cast(Address.StreetTypeValue, 177)
    THOR = typing___cast(Address.StreetTypeValue, 178)
    TLWY = typing___cast(Address.StreetTypeValue, 179)
    TOP = typing___cast(Address.StreetTypeValue, 180)
    TOR = typing___cast(Address.StreetTypeValue, 181)
    TWRS = typing___cast(Address.StreetTypeValue, 182)
    TRK = typing___cast(Address.StreetTypeValue, 183)
    TRL = typing___cast(Address.StreetTypeValue, 184)
    TRLR = typing___cast(Address.StreetTypeValue, 185)
    TRI = typing___cast(Address.StreetTypeValue, 186)
    TKY = typing___cast(Address.StreetTypeValue, 187)
    TURN = typing___cast(Address.StreetTypeValue, 188)
    UPAS = typing___cast(Address.StreetTypeValue, 189)
    UPR = typing___cast(Address.StreetTypeValue, 190)
    VALE = typing___cast(Address.StreetTypeValue, 191)
    VDCT = typing___cast(Address.StreetTypeValue, 192)
    VIEW = typing___cast(Address.StreetTypeValue, 193)
    VLLS = typing___cast(Address.StreetTypeValue, 194)
    VSTA = typing___cast(Address.StreetTypeValue, 195)
    WADE = typing___cast(Address.StreetTypeValue, 196)
    WALK = typing___cast(Address.StreetTypeValue, 197)
    WKWY = typing___cast(Address.StreetTypeValue, 198)
    WAY = typing___cast(Address.StreetTypeValue, 199)
    WHRF = typing___cast(Address.StreetTypeValue, 200)
    WYND = typing___cast(Address.StreetTypeValue, 201)
    YARD = typing___cast(Address.StreetTypeValue, 202)
    type___StreetType = StreetType

    StateValue = typing___NewType('StateValue', builtin___int)
    type___StateValue = StateValue
    State: _State
    class _State(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Address.StateValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        STATE_DO_NOT_USE = typing___cast(Address.StateValue, 0)
        ACT = typing___cast(Address.StateValue, 1)
        NSW = typing___cast(Address.StateValue, 2)
        NT = typing___cast(Address.StateValue, 3)
        NZ = typing___cast(Address.StateValue, 4)
        OS = typing___cast(Address.StateValue, 5)
        OTH = typing___cast(Address.StateValue, 6)
        QLD = typing___cast(Address.StateValue, 7)
        SA = typing___cast(Address.StateValue, 8)
        TAS = typing___cast(Address.StateValue, 9)
        VIC = typing___cast(Address.StateValue, 10)
        WA = typing___cast(Address.StateValue, 11)
    STATE_DO_NOT_USE = typing___cast(Address.StateValue, 0)
    ACT = typing___cast(Address.StateValue, 1)
    NSW = typing___cast(Address.StateValue, 2)
    NT = typing___cast(Address.StateValue, 3)
    NZ = typing___cast(Address.StateValue, 4)
    OS = typing___cast(Address.StateValue, 5)
    OTH = typing___cast(Address.StateValue, 6)
    QLD = typing___cast(Address.StateValue, 7)
    SA = typing___cast(Address.StateValue, 8)
    TAS = typing___cast(Address.StateValue, 9)
    VIC = typing___cast(Address.StateValue, 10)
    WA = typing___cast(Address.StateValue, 11)
    type___State = State

    CountryCodeValue = typing___NewType('CountryCodeValue', builtin___int)
    type___CountryCodeValue = CountryCodeValue
    CountryCode: _CountryCode
    class _CountryCode(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Address.CountryCodeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        CC_DO_NOT_USE = typing___cast(Address.CountryCodeValue, 0)
        AUS = typing___cast(Address.CountryCodeValue, 1)
        NZL = typing___cast(Address.CountryCodeValue, 2)
        ZZZ = typing___cast(Address.CountryCodeValue, 999)
    CC_DO_NOT_USE = typing___cast(Address.CountryCodeValue, 0)
    AUS = typing___cast(Address.CountryCodeValue, 1)
    NZL = typing___cast(Address.CountryCodeValue, 2)
    ZZZ = typing___cast(Address.CountryCodeValue, 999)
    type___CountryCode = CountryCode

    type: typing___Text = ...
    property: typing___Text = ...
    unit_number: typing___Text = ...
    street_number: typing___Text = ...
    street_name: typing___Text = ...
    street_type: type___Address.StreetTypeValue = ...
    suburb: typing___Text = ...
    state: type___Address.StateValue = ...
    postcode: typing___Text = ...
    country_code: type___Address.CountryCodeValue = ...

    @property
    def first_reported_date(self) -> squareup___common___time_pb2___YearMonthDay: ...

    @property
    def last_reported_date(self) -> squareup___common___time_pb2___YearMonthDay: ...

    def __init__(self,
        *,
        first_reported_date : typing___Optional[squareup___common___time_pb2___YearMonthDay] = None,
        last_reported_date : typing___Optional[squareup___common___time_pb2___YearMonthDay] = None,
        type : typing___Optional[typing___Text] = None,
        property : typing___Optional[typing___Text] = None,
        unit_number : typing___Optional[typing___Text] = None,
        street_number : typing___Optional[typing___Text] = None,
        street_name : typing___Optional[typing___Text] = None,
        street_type : typing___Optional[type___Address.StreetTypeValue] = None,
        suburb : typing___Optional[typing___Text] = None,
        state : typing___Optional[type___Address.StateValue] = None,
        postcode : typing___Optional[typing___Text] = None,
        country_code : typing___Optional[type___Address.CountryCodeValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"country_code",b"country_code",u"first_reported_date",b"first_reported_date",u"last_reported_date",b"last_reported_date",u"postcode",b"postcode",u"property",b"property",u"state",b"state",u"street_name",b"street_name",u"street_number",b"street_number",u"street_type",b"street_type",u"suburb",b"suburb",u"type",b"type",u"unit_number",b"unit_number"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"country_code",b"country_code",u"first_reported_date",b"first_reported_date",u"last_reported_date",b"last_reported_date",u"postcode",b"postcode",u"property",b"property",u"state",b"state",u"street_name",b"street_name",u"street_number",b"street_number",u"street_type",b"street_type",u"suburb",b"suburb",u"type",b"type",u"unit_number",b"unit_number"]) -> None: ...
type___Address = Address

class KeyContributingFactor(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    id: typing___Text = ...
    name: typing___Text = ...
    description: typing___Text = ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        name : typing___Optional[typing___Text] = None,
        description : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"description",b"description",u"id",b"id",u"name",b"name"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"description",b"description",u"id",b"id",u"name",b"name"]) -> None: ...
type___KeyContributingFactor = KeyContributingFactor

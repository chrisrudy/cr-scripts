# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.capital.clerk.equifax_au import service_pb2 as squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2


class EquifaxAuServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCreditProfile = channel.unary_unary(
                '/squareup.capital.clerk.equifax_au.service.EquifaxAuService/GetCreditProfile',
                request_serializer=squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.GetCreditProfileRequest.SerializeToString,
                response_deserializer=squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.GetCreditProfileResponse.FromString,
                )
        self.TriggerCreditProfileFetch = channel.unary_unary(
                '/squareup.capital.clerk.equifax_au.service.EquifaxAuService/TriggerCreditProfileFetch',
                request_serializer=squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.TriggerCreditProfileFetchRequest.SerializeToString,
                response_deserializer=squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.TriggerCreditProfileFetchResponse.FromString,
                )


class EquifaxAuServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCreditProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerCreditProfileFetch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EquifaxAuServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCreditProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCreditProfile,
                    request_deserializer=squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.GetCreditProfileRequest.FromString,
                    response_serializer=squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.GetCreditProfileResponse.SerializeToString,
            ),
            'TriggerCreditProfileFetch': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerCreditProfileFetch,
                    request_deserializer=squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.TriggerCreditProfileFetchRequest.FromString,
                    response_serializer=squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.TriggerCreditProfileFetchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.capital.clerk.equifax_au.service.EquifaxAuService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EquifaxAuService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCreditProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.capital.clerk.equifax_au.service.EquifaxAuService/GetCreditProfile',
            squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.GetCreditProfileRequest.SerializeToString,
            squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.GetCreditProfileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TriggerCreditProfileFetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.capital.clerk.equifax_au.service.EquifaxAuService/TriggerCreditProfileFetch',
            squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.TriggerCreditProfileFetchRequest.SerializeToString,
            squareup_dot_capital_dot_clerk_dot_equifax__au_dot_service__pb2.TriggerCreditProfileFetchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.capital.consumer.deferred_payments.internal import service_pb2 as squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_internal_dot_service__pb2


class DeferredPaymentsInternalServiceStub(object):
    """Service that other internal services shall interact with. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AttachLinkedInstrument = channel.unary_unary(
                '/squareup.capital.consumer.deferred_payments.internal.DeferredPaymentsInternalService/AttachLinkedInstrument',
                request_serializer=squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_internal_dot_service__pb2.AttachLinkedInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_internal_dot_service__pb2.AttachLinkedInstrumentResponse.FromString,
                )


class DeferredPaymentsInternalServiceServicer(object):
    """Service that other internal services shall interact with. 
    """

    def AttachLinkedInstrument(self, request, context):
        """*
        regis-fe, while implementing the VerifyAndAttachInstrument RPC, will call this RPC in order to attach the linked
        instrument to the given purchase flow and capital customer. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeferredPaymentsInternalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AttachLinkedInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.AttachLinkedInstrument,
                    request_deserializer=squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_internal_dot_service__pb2.AttachLinkedInstrumentRequest.FromString,
                    response_serializer=squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_internal_dot_service__pb2.AttachLinkedInstrumentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.capital.consumer.deferred_payments.internal.DeferredPaymentsInternalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeferredPaymentsInternalService(object):
    """Service that other internal services shall interact with. 
    """

    @staticmethod
    def AttachLinkedInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.capital.consumer.deferred_payments.internal.DeferredPaymentsInternalService/AttachLinkedInstrument',
            squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_internal_dot_service__pb2.AttachLinkedInstrumentRequest.SerializeToString,
            squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_internal_dot_service__pb2.AttachLinkedInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

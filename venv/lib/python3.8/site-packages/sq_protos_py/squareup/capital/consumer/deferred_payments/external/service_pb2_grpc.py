# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.capital.consumer.deferred_payments.external import service_pb2 as squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_external_dot_service__pb2


class DeferredPaymentsExternalServiceStub(object):
    """* Service that a SPOS client shall interact with. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerifyAndAttachInstrument = channel.unary_unary(
                '/squareup.capital.consumer.deferred_payments.external.DeferredPaymentsExternalService/VerifyAndAttachInstrument',
                request_serializer=squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_external_dot_service__pb2.VerifyAndAttachInstrumentRequest.SerializeToString,
                response_deserializer=squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_external_dot_service__pb2.VerifyAndAttachInstrumentResponse.FromString,
                )


class DeferredPaymentsExternalServiceServicer(object):
    """* Service that a SPOS client shall interact with. 
    """

    def VerifyAndAttachInstrument(self, request, context):
        """*
        Verify and link an instrument with simple instrument store service.
        If successful, attach the intrument to the purchase flow and capital customer.
        NOT idempotent as the Esperanto service to verify the card is not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeferredPaymentsExternalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VerifyAndAttachInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyAndAttachInstrument,
                    request_deserializer=squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_external_dot_service__pb2.VerifyAndAttachInstrumentRequest.FromString,
                    response_serializer=squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_external_dot_service__pb2.VerifyAndAttachInstrumentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.capital.consumer.deferred_payments.external.DeferredPaymentsExternalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeferredPaymentsExternalService(object):
    """* Service that a SPOS client shall interact with. 
    """

    @staticmethod
    def VerifyAndAttachInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.capital.consumer.deferred_payments.external.DeferredPaymentsExternalService/VerifyAndAttachInstrument',
            squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_external_dot_service__pb2.VerifyAndAttachInstrumentRequest.SerializeToString,
            squareup_dot_capital_dot_consumer_dot_deferred__payments_dot_external_dot_service__pb2.VerifyAndAttachInstrumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.capital.external.business.models_pb2 import (
    ControllingIndividual as squareup___capital___external___business___models_pb2___ControllingIndividual,
    IdentificationNumber as squareup___capital___external___business___models_pb2___IdentificationNumber,
)

from sq_protos_py.squareup.common.location_pb2 import (
    GlobalAddress as squareup___common___location_pb2___GlobalAddress,
)

from sq_protos_py.squareup.common.time_pb2 import (
    DateTime as squareup___common___time_pb2___DateTime,
    YearMonthDay as squareup___common___time_pb2___YearMonthDay,
)

from typing import (
    Iterable as typing___Iterable,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

IdvStatusValue = typing___NewType('IdvStatusValue', builtin___int)
type___IdvStatusValue = IdvStatusValue
IdvStatus: _IdvStatus
class _IdvStatus(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[IdvStatusValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    S_DO_NOT_USE = typing___cast(IdvStatusValue, 0)
    PENDING = typing___cast(IdvStatusValue, 1)
    PASSED = typing___cast(IdvStatusValue, 2)
    FAILED = typing___cast(IdvStatusValue, 3)
S_DO_NOT_USE = typing___cast(IdvStatusValue, 0)
PENDING = typing___cast(IdvStatusValue, 1)
PASSED = typing___cast(IdvStatusValue, 2)
FAILED = typing___cast(IdvStatusValue, 3)
type___IdvStatus = IdvStatus

class LegalEntity(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    token: typing___Text = ...

    @property
    def updated_at(self) -> squareup___common___time_pb2___DateTime: ...

    @property
    def individual(self) -> type___Individual: ...

    @property
    def business(self) -> type___Business: ...

    def __init__(self,
        *,
        token : typing___Optional[typing___Text] = None,
        updated_at : typing___Optional[squareup___common___time_pb2___DateTime] = None,
        individual : typing___Optional[type___Individual] = None,
        business : typing___Optional[type___Business] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"business",b"business",u"data",b"data",u"individual",b"individual",u"token",b"token",u"updated_at",b"updated_at"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"business",b"business",u"data",b"data",u"individual",b"individual",u"token",b"token",u"updated_at",b"updated_at"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"data",b"data"]) -> typing_extensions___Literal["individual","business"]: ...
type___LegalEntity = LegalEntity

class Individual(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    customer_token: typing___Text = ...
    first_name: typing___Text = ...
    last_name: typing___Text = ...
    title: squareup___capital___external___business___models_pb2___ControllingIndividual.TitleValue = ...
    is_beneficial_owner: builtin___bool = ...
    name_idv_status: type___IdvStatusValue = ...
    birth_date_idv_status: type___IdvStatusValue = ...
    id_number_idv_status: type___IdvStatusValue = ...
    application_flow_token: typing___Text = ...

    @property
    def address(self) -> squareup___common___location_pb2___GlobalAddress: ...

    @property
    def birth_date(self) -> squareup___common___time_pb2___YearMonthDay: ...

    @property
    def id_number(self) -> squareup___capital___external___business___models_pb2___IdentificationNumber: ...

    def __init__(self,
        *,
        customer_token : typing___Optional[typing___Text] = None,
        first_name : typing___Optional[typing___Text] = None,
        last_name : typing___Optional[typing___Text] = None,
        address : typing___Optional[squareup___common___location_pb2___GlobalAddress] = None,
        birth_date : typing___Optional[squareup___common___time_pb2___YearMonthDay] = None,
        id_number : typing___Optional[squareup___capital___external___business___models_pb2___IdentificationNumber] = None,
        title : typing___Optional[squareup___capital___external___business___models_pb2___ControllingIndividual.TitleValue] = None,
        is_beneficial_owner : typing___Optional[builtin___bool] = None,
        name_idv_status : typing___Optional[type___IdvStatusValue] = None,
        birth_date_idv_status : typing___Optional[type___IdvStatusValue] = None,
        id_number_idv_status : typing___Optional[type___IdvStatusValue] = None,
        application_flow_token : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"address",b"address",u"application_flow_token",b"application_flow_token",u"birth_date",b"birth_date",u"birth_date_idv_status",b"birth_date_idv_status",u"customer_token",b"customer_token",u"first_name",b"first_name",u"id_number",b"id_number",u"id_number_idv_status",b"id_number_idv_status",u"is_beneficial_owner",b"is_beneficial_owner",u"last_name",b"last_name",u"name_idv_status",b"name_idv_status",u"title",b"title"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"address",b"address",u"application_flow_token",b"application_flow_token",u"birth_date",b"birth_date",u"birth_date_idv_status",b"birth_date_idv_status",u"customer_token",b"customer_token",u"first_name",b"first_name",u"id_number",b"id_number",u"id_number_idv_status",b"id_number_idv_status",u"is_beneficial_owner",b"is_beneficial_owner",u"last_name",b"last_name",u"name_idv_status",b"name_idv_status",u"title",b"title"]) -> None: ...
type___Individual = Individual

class Business(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    customer_token: typing___Text = ...
    tin_fidelius_token: typing___Text = ...
    identity_token: typing___Text = ...

    @property
    def address(self) -> squareup___common___location_pb2___GlobalAddress: ...

    @property
    def controlling_individuals(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___LegalEntity]: ...

    def __init__(self,
        *,
        customer_token : typing___Optional[typing___Text] = None,
        tin_fidelius_token : typing___Optional[typing___Text] = None,
        identity_token : typing___Optional[typing___Text] = None,
        address : typing___Optional[squareup___common___location_pb2___GlobalAddress] = None,
        controlling_individuals : typing___Optional[typing___Iterable[type___LegalEntity]] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"address",b"address",u"customer_token",b"customer_token",u"identity_token",b"identity_token",u"tin_fidelius_token",b"tin_fidelius_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"address",b"address",u"controlling_individuals",b"controlling_individuals",u"customer_token",b"customer_token",u"identity_token",b"identity_token",u"tin_fidelius_token",b"tin_fidelius_token"]) -> None: ...
type___Business = Business

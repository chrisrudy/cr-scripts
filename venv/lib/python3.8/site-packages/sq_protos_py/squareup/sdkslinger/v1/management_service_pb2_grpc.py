# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.sdkslinger.v1.actions import application_pb2 as squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2
from sq_protos_py.squareup.sdkslinger.v1.actions import bundle_pb2 as squareup_dot_sdkslinger_dot_v1_dot_actions_dot_bundle__pb2


class SDKSlingerManagmentAPIV1Stub(object):
    """API to be used by Developer Portal to manage applications and developer credentials for dependency repositories
    This endpoints are authenticated via Multipass session.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RetrieveApplication = channel.unary_unary(
                '/squareup.sdkslinger.v1.SDKSlingerManagmentAPIV1/RetrieveApplication',
                request_serializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationRequest.SerializeToString,
                response_deserializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationResponse.FromString,
                )
        self.RegisterApplication = channel.unary_unary(
                '/squareup.sdkslinger.v1.SDKSlingerManagmentAPIV1/RegisterApplication',
                request_serializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RegisterApplicationRequest.SerializeToString,
                response_deserializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationResponse.FromString,
                )
        self.RenewCredentials = channel.unary_unary(
                '/squareup.sdkslinger.v1.SDKSlingerManagmentAPIV1/RenewCredentials',
                request_serializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationRequest.SerializeToString,
                response_deserializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationResponse.FromString,
                )
        self.ListBundles = channel.unary_unary(
                '/squareup.sdkslinger.v1.SDKSlingerManagmentAPIV1/ListBundles',
                request_serializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_bundle__pb2.ListBundlesRequest.SerializeToString,
                response_deserializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_bundle__pb2.ListBundlesResponse.FromString,
                )


class SDKSlingerManagmentAPIV1Servicer(object):
    """API to be used by Developer Portal to manage applications and developer credentials for dependency repositories
    This endpoints are authenticated via Multipass session.
    """

    def RetrieveApplication(self, request, context):
        """--
        @desc RetrieveApplication returns application credentials if the application has previously been registered
        to use SDK Slinger. An application can be registered using the RegisterApplication endpoint.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterApplication(self, request, context):
        """--
        @desc RegisterApplication allows a developer via Developer Portal to indicate they want to use PaySDK.
        This endpoint will ensure the app belongs to the developer associated to the session and will also set up
        the necessary credentials and repository for bundles to be uploaded to. It will schedule a job to create
        bundles of each platformâ€™s latest release.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenewCredentials(self, request, context):
        """--
        @desc RenewCredentials reissues credentials for the application's repository. It will be called by the
        Developer Portal app if the developers requires it.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBundles(self, request, context):
        """--
        @desc ListBundles lists all bundles published for a specific application. This endpoint, called by
        Developer Portal app, will provide a list of all current bundles accessible to the developer.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SDKSlingerManagmentAPIV1Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RetrieveApplication': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveApplication,
                    request_deserializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationRequest.FromString,
                    response_serializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationResponse.SerializeToString,
            ),
            'RegisterApplication': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterApplication,
                    request_deserializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RegisterApplicationRequest.FromString,
                    response_serializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationResponse.SerializeToString,
            ),
            'RenewCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.RenewCredentials,
                    request_deserializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationRequest.FromString,
                    response_serializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationResponse.SerializeToString,
            ),
            'ListBundles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBundles,
                    request_deserializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_bundle__pb2.ListBundlesRequest.FromString,
                    response_serializer=squareup_dot_sdkslinger_dot_v1_dot_actions_dot_bundle__pb2.ListBundlesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.sdkslinger.v1.SDKSlingerManagmentAPIV1', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SDKSlingerManagmentAPIV1(object):
    """API to be used by Developer Portal to manage applications and developer credentials for dependency repositories
    This endpoints are authenticated via Multipass session.
    """

    @staticmethod
    def RetrieveApplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sdkslinger.v1.SDKSlingerManagmentAPIV1/RetrieveApplication',
            squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationRequest.SerializeToString,
            squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterApplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sdkslinger.v1.SDKSlingerManagmentAPIV1/RegisterApplication',
            squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RegisterApplicationRequest.SerializeToString,
            squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenewCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sdkslinger.v1.SDKSlingerManagmentAPIV1/RenewCredentials',
            squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationRequest.SerializeToString,
            squareup_dot_sdkslinger_dot_v1_dot_actions_dot_application__pb2.RetrieveApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBundles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sdkslinger.v1.SDKSlingerManagmentAPIV1/ListBundles',
            squareup_dot_sdkslinger_dot_v1_dot_actions_dot_bundle__pb2.ListBundlesRequest.SerializeToString,
            squareup_dot_sdkslinger_dot_v1_dot_actions_dot_bundle__pb2.ListBundlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

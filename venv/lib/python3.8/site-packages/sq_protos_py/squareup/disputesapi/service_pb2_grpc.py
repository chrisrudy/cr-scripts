# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.disputesapi import service_pb2 as squareup_dot_disputesapi_dot_service__pb2


class DisputesApiDataServiceStub(object):
    """*
    Temporary data service before we populate the esperanto PaymentRecord with enough data to
    perform the dispute responsibility association

    Provides CBMS a way to determine which disputed payments *not* to handle.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDisputeResponsibility = channel.unary_unary(
                '/squareup.disputesapi.service.DisputesApiDataService/GetDisputeResponsibility',
                request_serializer=squareup_dot_disputesapi_dot_service__pb2.GetDisputeResponsibilityRequest.SerializeToString,
                response_deserializer=squareup_dot_disputesapi_dot_service__pb2.GetDisputeResponsibilityResponse.FromString,
                )
        self.AdminListDisputes = channel.unary_unary(
                '/squareup.disputesapi.service.DisputesApiDataService/AdminListDisputes',
                request_serializer=squareup_dot_disputesapi_dot_service__pb2.AdminListDisputesRequest.SerializeToString,
                response_deserializer=squareup_dot_disputesapi_dot_service__pb2.AdminListDisputesResponse.FromString,
                )


class DisputesApiDataServiceServicer(object):
    """*
    Temporary data service before we populate the esperanto PaymentRecord with enough data to
    perform the dispute responsibility association

    Provides CBMS a way to determine which disputed payments *not* to handle.
    """

    def GetDisputeResponsibility(self, request, context):
        """*
        A temporary method for determining the responsible account for a disputed payment.
        In the future, we expect this to be in the payment record as a "responsible" account or from payattr
        but in the near term, we are keeping track of

        The endpoint is batch capable for increased throughput.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminListDisputes(self, request, context):
        """*
        For engineers to lookup disputes in non standard ways.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DisputesApiDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDisputeResponsibility': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDisputeResponsibility,
                    request_deserializer=squareup_dot_disputesapi_dot_service__pb2.GetDisputeResponsibilityRequest.FromString,
                    response_serializer=squareup_dot_disputesapi_dot_service__pb2.GetDisputeResponsibilityResponse.SerializeToString,
            ),
            'AdminListDisputes': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminListDisputes,
                    request_deserializer=squareup_dot_disputesapi_dot_service__pb2.AdminListDisputesRequest.FromString,
                    response_serializer=squareup_dot_disputesapi_dot_service__pb2.AdminListDisputesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.disputesapi.service.DisputesApiDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DisputesApiDataService(object):
    """*
    Temporary data service before we populate the esperanto PaymentRecord with enough data to
    perform the dispute responsibility association

    Provides CBMS a way to determine which disputed payments *not* to handle.
    """

    @staticmethod
    def GetDisputeResponsibility(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.disputesapi.service.DisputesApiDataService/GetDisputeResponsibility',
            squareup_dot_disputesapi_dot_service__pb2.GetDisputeResponsibilityRequest.SerializeToString,
            squareup_dot_disputesapi_dot_service__pb2.GetDisputeResponsibilityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminListDisputes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.disputesapi.service.DisputesApiDataService/AdminListDisputes',
            squareup_dot_disputesapi_dot_service__pb2.AdminListDisputesRequest.SerializeToString,
            squareup_dot_disputesapi_dot_service__pb2.AdminListDisputesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.banklin.external.external_system_pb2 import (
    ExternalSystemValue as squareup___banklin___external___external_system_pb2___ExternalSystemValue,
)

from sq_protos_py.squareup.banklin.octopus_pb2 import (
    OctopusResultValue as squareup___banklin___octopus_pb2___OctopusResultValue,
)

from sq_protos_py.squareup.banklin.rewards_pb2 import (
    Reward as squareup___banklin___rewards_pb2___Reward,
)

from sq_protos_py.squareup.common.currency_codes_pb2 import (
    CurrencyCodeValue as squareup___common___currency_codes_pb2___CurrencyCodeValue,
)

from sq_protos_py.squareup.common.currency_pb2 import (
    Money as squareup___common___currency_pb2___Money,
)

from typing import (
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

TransactionStateValue = typing___NewType('TransactionStateValue', builtin___int)
type___TransactionStateValue = TransactionStateValue
TransactionState: _TransactionState
class _TransactionState(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[TransactionStateValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    PENDING = typing___cast(TransactionStateValue, 1)
    SETTLED = typing___cast(TransactionStateValue, 2)
    VOIDED = typing___cast(TransactionStateValue, 3)
    DECLINED = typing___cast(TransactionStateValue, 4)
    REFUNDED = typing___cast(TransactionStateValue, 5)
    REVERSED = typing___cast(TransactionStateValue, 6)
    DISPUTED = typing___cast(TransactionStateValue, 7)
    DISPUTE_REVERSED = typing___cast(TransactionStateValue, 8)
    DISPUTE_WON = typing___cast(TransactionStateValue, 9)
    IN_REVIEW = typing___cast(TransactionStateValue, 10)
    IN_REVERSAL = typing___cast(TransactionStateValue, 11)
    WAITING_ON_EXTERNAL = typing___cast(TransactionStateValue, 12)
PENDING = typing___cast(TransactionStateValue, 1)
SETTLED = typing___cast(TransactionStateValue, 2)
VOIDED = typing___cast(TransactionStateValue, 3)
DECLINED = typing___cast(TransactionStateValue, 4)
REFUNDED = typing___cast(TransactionStateValue, 5)
REVERSED = typing___cast(TransactionStateValue, 6)
DISPUTED = typing___cast(TransactionStateValue, 7)
DISPUTE_REVERSED = typing___cast(TransactionStateValue, 8)
DISPUTE_WON = typing___cast(TransactionStateValue, 9)
IN_REVIEW = typing___cast(TransactionStateValue, 10)
IN_REVERSAL = typing___cast(TransactionStateValue, 11)
WAITING_ON_EXTERNAL = typing___cast(TransactionStateValue, 12)
type___TransactionState = TransactionState

TransactionReasonCodeValue = typing___NewType('TransactionReasonCodeValue', builtin___int)
type___TransactionReasonCodeValue = TransactionReasonCodeValue
TransactionReasonCode: _TransactionReasonCode
class _TransactionReasonCode(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[TransactionReasonCodeValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    ATM_WITHDRAWAL = typing___cast(TransactionReasonCodeValue, 1)
    ATM_CHECK_DEPOSIT = typing___cast(TransactionReasonCodeValue, 2)
    ATM_FEE = typing___cast(TransactionReasonCodeValue, 3)
    CARD_PRESENT_PURCHASE = typing___cast(TransactionReasonCodeValue, 4)
    CARD_NOT_PRESENT_PURCHASE = typing___cast(TransactionReasonCodeValue, 5)
    ACCOUNT_MAINTENANCE_FEE = typing___cast(TransactionReasonCodeValue, 6)
    BALANCE_ADJUSTMENT = typing___cast(TransactionReasonCodeValue, 7)
    SQUARE_CASH_SELF = typing___cast(TransactionReasonCodeValue, 8)
    SQUARE_CASH_P2P = typing___cast(TransactionReasonCodeValue, 9)
    SQUARE_CASH_BUSINESS = typing___cast(TransactionReasonCodeValue, 10)
    PINDEBIT = typing___cast(TransactionReasonCodeValue, 11)
    PINCREDIT = typing___cast(TransactionReasonCodeValue, 12)
    ACH = typing___cast(TransactionReasonCodeValue, 13)
    UNLINKED_CREDIT = typing___cast(TransactionReasonCodeValue, 14)
    GREENDOT_FEE = typing___cast(TransactionReasonCodeValue, 15)
    NETWORK_FEE = typing___cast(TransactionReasonCodeValue, 16)
    SQUARE_CASH_FEE = typing___cast(TransactionReasonCodeValue, 17)
    CARD_MERCHANT_REFUND = typing___cast(TransactionReasonCodeValue, 18)
    OVERDRAFT_FEE = typing___cast(TransactionReasonCodeValue, 19)
    CARD_PRE_AUTHORIZATION = typing___cast(TransactionReasonCodeValue, 20)
    MOBILE_CHECK_DEPOSIT = typing___cast(TransactionReasonCodeValue, 21)
    CHECK_PAYMENT = typing___cast(TransactionReasonCodeValue, 22)
    CARD_VALIDATION = typing___cast(TransactionReasonCodeValue, 23)
    ONLINE_PURCHASE = typing___cast(TransactionReasonCodeValue, 24)
    ATM_BALANCE_CHECK = typing___cast(TransactionReasonCodeValue, 25)
    SQUARE_REGISTER_INSTANT_DEPOSIT = typing___cast(TransactionReasonCodeValue, 26)
    SQUARE_CASH_REFERRAL = typing___cast(TransactionReasonCodeValue, 27)
    APPLE_PAY_PURCHASE = typing___cast(TransactionReasonCodeValue, 28)
    APPLE_PAY_ACTIVATION = typing___cast(TransactionReasonCodeValue, 29)
    INTERNAL_CURRENCY_EXCHANGE = typing___cast(TransactionReasonCodeValue, 30)
    BITCOIN_TRANSFER = typing___cast(TransactionReasonCodeValue, 31)
    ANDROID_PAY_PURCHASE = typing___cast(TransactionReasonCodeValue, 32)
    ANDROID_PAY_ACTIVATION = typing___cast(TransactionReasonCodeValue, 33)
    PINDEBIT_CASHBACK = typing___cast(TransactionReasonCodeValue, 34)
    PINDEBIT_QUASI_CASH = typing___cast(TransactionReasonCodeValue, 35)
    CARD_ACTIVATION = typing___cast(TransactionReasonCodeValue, 36)
    FUNDS_TRANSFER = typing___cast(TransactionReasonCodeValue, 37)
    BILL_PAYMENT = typing___cast(TransactionReasonCodeValue, 38)
    ATM_UNVERIFIED_DEPOSIT = typing___cast(TransactionReasonCodeValue, 39)
    ATM_CASH_DEPOSIT = typing___cast(TransactionReasonCodeValue, 40)
    SAMSUNG_PAY_PURCHASE = typing___cast(TransactionReasonCodeValue, 41)
    SAMSUNG_PAY_ACTIVATION = typing___cast(TransactionReasonCodeValue, 42)
    MICROSOFT_PAY_PURCHASE = typing___cast(TransactionReasonCodeValue, 43)
    MICROSOFT_PAY_ACTIVATION = typing___cast(TransactionReasonCodeValue, 44)
    VISA_CHECKOUT_PURCHASE = typing___cast(TransactionReasonCodeValue, 45)
    VISA_CHECKOUT_ACTIVATION = typing___cast(TransactionReasonCodeValue, 46)
    FACEBOOK_TOKEN_PURCHASE = typing___cast(TransactionReasonCodeValue, 47)
    FACEBOOK_TOKEN_ACTIVATION = typing___cast(TransactionReasonCodeValue, 48)
    NETFLIX_TOKEN_PURCHASE = typing___cast(TransactionReasonCodeValue, 49)
    NETFLIX_TOKEN_ACTIVATION = typing___cast(TransactionReasonCodeValue, 50)
    ATM_TRANSFER = typing___cast(TransactionReasonCodeValue, 51)
    BITCOIN_TRADE_SETTLEMENT = typing___cast(TransactionReasonCodeValue, 52)
    CAVIAR_SETTLEMENT = typing___cast(TransactionReasonCodeValue, 53)
    DIGITAL_WALLET_PURCHASE = typing___cast(TransactionReasonCodeValue, 54)
    SECURITIES_TRADE = typing___cast(TransactionReasonCodeValue, 55)
    SECURITIES_DIVIDEND_PAYMENT = typing___cast(TransactionReasonCodeValue, 56)
    SECURITIES_CORPORATE_ACTION = typing___cast(TransactionReasonCodeValue, 57)
    ACCOUNT_FUNDING_TRANSACTION = typing___cast(TransactionReasonCodeValue, 58)
    ORIGINAL_CREDIT_TRANSACTION = typing___cast(TransactionReasonCodeValue, 59)
    CUSTOMER_MERGE = typing___cast(TransactionReasonCodeValue, 60)
    LENDING_CASH_ADVANCE = typing___cast(TransactionReasonCodeValue, 61)
    SECURITIES_TRADE_ERROR_CORRECTION = typing___cast(TransactionReasonCodeValue, 62)
    ADMIN_BALANCE_ADJUSTMENT = typing___cast(TransactionReasonCodeValue, 63)
    APPLE_PAY_NOT_PRESENT_PURCHASE = typing___cast(TransactionReasonCodeValue, 64)
    ANDROID_PAY_NOT_PRESENT_PURCHASE = typing___cast(TransactionReasonCodeValue, 65)
    BITCOIN_P2P = typing___cast(TransactionReasonCodeValue, 66)
    MONEY_ORDER = typing___cast(TransactionReasonCodeValue, 67)
ATM_WITHDRAWAL = typing___cast(TransactionReasonCodeValue, 1)
ATM_CHECK_DEPOSIT = typing___cast(TransactionReasonCodeValue, 2)
ATM_FEE = typing___cast(TransactionReasonCodeValue, 3)
CARD_PRESENT_PURCHASE = typing___cast(TransactionReasonCodeValue, 4)
CARD_NOT_PRESENT_PURCHASE = typing___cast(TransactionReasonCodeValue, 5)
ACCOUNT_MAINTENANCE_FEE = typing___cast(TransactionReasonCodeValue, 6)
BALANCE_ADJUSTMENT = typing___cast(TransactionReasonCodeValue, 7)
SQUARE_CASH_SELF = typing___cast(TransactionReasonCodeValue, 8)
SQUARE_CASH_P2P = typing___cast(TransactionReasonCodeValue, 9)
SQUARE_CASH_BUSINESS = typing___cast(TransactionReasonCodeValue, 10)
PINDEBIT = typing___cast(TransactionReasonCodeValue, 11)
PINCREDIT = typing___cast(TransactionReasonCodeValue, 12)
ACH = typing___cast(TransactionReasonCodeValue, 13)
UNLINKED_CREDIT = typing___cast(TransactionReasonCodeValue, 14)
GREENDOT_FEE = typing___cast(TransactionReasonCodeValue, 15)
NETWORK_FEE = typing___cast(TransactionReasonCodeValue, 16)
SQUARE_CASH_FEE = typing___cast(TransactionReasonCodeValue, 17)
CARD_MERCHANT_REFUND = typing___cast(TransactionReasonCodeValue, 18)
OVERDRAFT_FEE = typing___cast(TransactionReasonCodeValue, 19)
CARD_PRE_AUTHORIZATION = typing___cast(TransactionReasonCodeValue, 20)
MOBILE_CHECK_DEPOSIT = typing___cast(TransactionReasonCodeValue, 21)
CHECK_PAYMENT = typing___cast(TransactionReasonCodeValue, 22)
CARD_VALIDATION = typing___cast(TransactionReasonCodeValue, 23)
ONLINE_PURCHASE = typing___cast(TransactionReasonCodeValue, 24)
ATM_BALANCE_CHECK = typing___cast(TransactionReasonCodeValue, 25)
SQUARE_REGISTER_INSTANT_DEPOSIT = typing___cast(TransactionReasonCodeValue, 26)
SQUARE_CASH_REFERRAL = typing___cast(TransactionReasonCodeValue, 27)
APPLE_PAY_PURCHASE = typing___cast(TransactionReasonCodeValue, 28)
APPLE_PAY_ACTIVATION = typing___cast(TransactionReasonCodeValue, 29)
INTERNAL_CURRENCY_EXCHANGE = typing___cast(TransactionReasonCodeValue, 30)
BITCOIN_TRANSFER = typing___cast(TransactionReasonCodeValue, 31)
ANDROID_PAY_PURCHASE = typing___cast(TransactionReasonCodeValue, 32)
ANDROID_PAY_ACTIVATION = typing___cast(TransactionReasonCodeValue, 33)
PINDEBIT_CASHBACK = typing___cast(TransactionReasonCodeValue, 34)
PINDEBIT_QUASI_CASH = typing___cast(TransactionReasonCodeValue, 35)
CARD_ACTIVATION = typing___cast(TransactionReasonCodeValue, 36)
FUNDS_TRANSFER = typing___cast(TransactionReasonCodeValue, 37)
BILL_PAYMENT = typing___cast(TransactionReasonCodeValue, 38)
ATM_UNVERIFIED_DEPOSIT = typing___cast(TransactionReasonCodeValue, 39)
ATM_CASH_DEPOSIT = typing___cast(TransactionReasonCodeValue, 40)
SAMSUNG_PAY_PURCHASE = typing___cast(TransactionReasonCodeValue, 41)
SAMSUNG_PAY_ACTIVATION = typing___cast(TransactionReasonCodeValue, 42)
MICROSOFT_PAY_PURCHASE = typing___cast(TransactionReasonCodeValue, 43)
MICROSOFT_PAY_ACTIVATION = typing___cast(TransactionReasonCodeValue, 44)
VISA_CHECKOUT_PURCHASE = typing___cast(TransactionReasonCodeValue, 45)
VISA_CHECKOUT_ACTIVATION = typing___cast(TransactionReasonCodeValue, 46)
FACEBOOK_TOKEN_PURCHASE = typing___cast(TransactionReasonCodeValue, 47)
FACEBOOK_TOKEN_ACTIVATION = typing___cast(TransactionReasonCodeValue, 48)
NETFLIX_TOKEN_PURCHASE = typing___cast(TransactionReasonCodeValue, 49)
NETFLIX_TOKEN_ACTIVATION = typing___cast(TransactionReasonCodeValue, 50)
ATM_TRANSFER = typing___cast(TransactionReasonCodeValue, 51)
BITCOIN_TRADE_SETTLEMENT = typing___cast(TransactionReasonCodeValue, 52)
CAVIAR_SETTLEMENT = typing___cast(TransactionReasonCodeValue, 53)
DIGITAL_WALLET_PURCHASE = typing___cast(TransactionReasonCodeValue, 54)
SECURITIES_TRADE = typing___cast(TransactionReasonCodeValue, 55)
SECURITIES_DIVIDEND_PAYMENT = typing___cast(TransactionReasonCodeValue, 56)
SECURITIES_CORPORATE_ACTION = typing___cast(TransactionReasonCodeValue, 57)
ACCOUNT_FUNDING_TRANSACTION = typing___cast(TransactionReasonCodeValue, 58)
ORIGINAL_CREDIT_TRANSACTION = typing___cast(TransactionReasonCodeValue, 59)
CUSTOMER_MERGE = typing___cast(TransactionReasonCodeValue, 60)
LENDING_CASH_ADVANCE = typing___cast(TransactionReasonCodeValue, 61)
SECURITIES_TRADE_ERROR_CORRECTION = typing___cast(TransactionReasonCodeValue, 62)
ADMIN_BALANCE_ADJUSTMENT = typing___cast(TransactionReasonCodeValue, 63)
APPLE_PAY_NOT_PRESENT_PURCHASE = typing___cast(TransactionReasonCodeValue, 64)
ANDROID_PAY_NOT_PRESENT_PURCHASE = typing___cast(TransactionReasonCodeValue, 65)
BITCOIN_P2P = typing___cast(TransactionReasonCodeValue, 66)
MONEY_ORDER = typing___cast(TransactionReasonCodeValue, 67)
type___TransactionReasonCode = TransactionReasonCode

IssuedInstrumentVariantValue = typing___NewType('IssuedInstrumentVariantValue', builtin___int)
type___IssuedInstrumentVariantValue = IssuedInstrumentVariantValue
IssuedInstrumentVariant: _IssuedInstrumentVariant
class _IssuedInstrumentVariant(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[IssuedInstrumentVariantValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    CARD_PAN = typing___cast(IssuedInstrumentVariantValue, 1)
    MOBILE_PHONE_TOKEN = typing___cast(IssuedInstrumentVariantValue, 2)
    WATCH_TOKEN = typing___cast(IssuedInstrumentVariantValue, 3)
    TABLET_TOKEN = typing___cast(IssuedInstrumentVariantValue, 4)
    LAPTOP_TOKEN = typing___cast(IssuedInstrumentVariantValue, 5)
    ACH_TRANSIT_NUMBER = typing___cast(IssuedInstrumentVariantValue, 6)
    STORED_VALUE_BALANCE = typing___cast(IssuedInstrumentVariantValue, 7)
    PHYSICAL_CARD = typing___cast(IssuedInstrumentVariantValue, 8)
    MAGSTRIPE = typing___cast(IssuedInstrumentVariantValue, 9)
    CHIP = typing___cast(IssuedInstrumentVariantValue, 10)
    CONTACTLESS = typing___cast(IssuedInstrumentVariantValue, 11)
    UNKNOWN_INSTRUMENT_VARIANT = typing___cast(IssuedInstrumentVariantValue, 12)
CARD_PAN = typing___cast(IssuedInstrumentVariantValue, 1)
MOBILE_PHONE_TOKEN = typing___cast(IssuedInstrumentVariantValue, 2)
WATCH_TOKEN = typing___cast(IssuedInstrumentVariantValue, 3)
TABLET_TOKEN = typing___cast(IssuedInstrumentVariantValue, 4)
LAPTOP_TOKEN = typing___cast(IssuedInstrumentVariantValue, 5)
ACH_TRANSIT_NUMBER = typing___cast(IssuedInstrumentVariantValue, 6)
STORED_VALUE_BALANCE = typing___cast(IssuedInstrumentVariantValue, 7)
PHYSICAL_CARD = typing___cast(IssuedInstrumentVariantValue, 8)
MAGSTRIPE = typing___cast(IssuedInstrumentVariantValue, 9)
CHIP = typing___cast(IssuedInstrumentVariantValue, 10)
CONTACTLESS = typing___cast(IssuedInstrumentVariantValue, 11)
UNKNOWN_INSTRUMENT_VARIANT = typing___cast(IssuedInstrumentVariantValue, 12)
type___IssuedInstrumentVariant = IssuedInstrumentVariant

AccountTypeValue = typing___NewType('AccountTypeValue', builtin___int)
type___AccountTypeValue = AccountTypeValue
AccountType: _AccountType
class _AccountType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[AccountTypeValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    PREPAID = typing___cast(AccountTypeValue, 1)
    STORED_VALUE = typing___cast(AccountTypeValue, 2)
    DDA = typing___cast(AccountTypeValue, 3)
    LDDA = typing___cast(AccountTypeValue, 4)
PREPAID = typing___cast(AccountTypeValue, 1)
STORED_VALUE = typing___cast(AccountTypeValue, 2)
DDA = typing___cast(AccountTypeValue, 3)
LDDA = typing___cast(AccountTypeValue, 4)
type___AccountType = AccountType

TransactionDeclineReasonValue = typing___NewType('TransactionDeclineReasonValue', builtin___int)
type___TransactionDeclineReasonValue = TransactionDeclineReasonValue
TransactionDeclineReason: _TransactionDeclineReason
class _TransactionDeclineReason(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[TransactionDeclineReasonValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    UNKNOWN = typing___cast(TransactionDeclineReasonValue, 1)
    INSUFFICIENT_BALANCE = typing___cast(TransactionDeclineReasonValue, 2)
    POTENTIALLY_INSUFFICIENT_BALANCE = typing___cast(TransactionDeclineReasonValue, 3)
    BLOCKED_BY_RISK = typing___cast(TransactionDeclineReasonValue, 4)
    CARD_DISABLED = typing___cast(TransactionDeclineReasonValue, 5)
    INVALID_CURRENCY = typing___cast(TransactionDeclineReasonValue, 6)
    RISK_SYSTEMS_UNAVAILABLE = typing___cast(TransactionDeclineReasonValue, 7)
UNKNOWN = typing___cast(TransactionDeclineReasonValue, 1)
INSUFFICIENT_BALANCE = typing___cast(TransactionDeclineReasonValue, 2)
POTENTIALLY_INSUFFICIENT_BALANCE = typing___cast(TransactionDeclineReasonValue, 3)
BLOCKED_BY_RISK = typing___cast(TransactionDeclineReasonValue, 4)
CARD_DISABLED = typing___cast(TransactionDeclineReasonValue, 5)
INVALID_CURRENCY = typing___cast(TransactionDeclineReasonValue, 6)
RISK_SYSTEMS_UNAVAILABLE = typing___cast(TransactionDeclineReasonValue, 7)
type___TransactionDeclineReason = TransactionDeclineReason

DisputeFundsAvailabilityValue = typing___NewType('DisputeFundsAvailabilityValue', builtin___int)
type___DisputeFundsAvailabilityValue = DisputeFundsAvailabilityValue
DisputeFundsAvailability: _DisputeFundsAvailability
class _DisputeFundsAvailability(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[DisputeFundsAvailabilityValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    RELEASE_TO_CUSTOMER = typing___cast(DisputeFundsAvailabilityValue, 1)
    WITHHOLD = typing___cast(DisputeFundsAvailabilityValue, 2)
    ISSUED = typing___cast(DisputeFundsAvailabilityValue, 3)
    NOT_ISSUED = typing___cast(DisputeFundsAvailabilityValue, 4)
RELEASE_TO_CUSTOMER = typing___cast(DisputeFundsAvailabilityValue, 1)
WITHHOLD = typing___cast(DisputeFundsAvailabilityValue, 2)
ISSUED = typing___cast(DisputeFundsAvailabilityValue, 3)
NOT_ISSUED = typing___cast(DisputeFundsAvailabilityValue, 4)
type___DisputeFundsAvailability = DisputeFundsAvailability

EventKindValue = typing___NewType('EventKindValue', builtin___int)
type___EventKindValue = EventKindValue
EventKind: _EventKind
class _EventKind(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[EventKindValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    NO_AUTHORIZATION = typing___cast(EventKindValue, 1)
    AUTHORIZATION = typing___cast(EventKindValue, 2)
    PREAUTHORIZATION = typing___cast(EventKindValue, 3)
    AFD_PREAUTHORIZATION = typing___cast(EventKindValue, 4)
    AUTH_ADJUSTMENT = typing___cast(EventKindValue, 5)
    ACQUIRER_FEE = typing___cast(EventKindValue, 6)
    DISCOUNT = typing___cast(EventKindValue, 7)
    SUBMITTED_TO_BITBANK = typing___cast(EventKindValue, 8)
    SENT_TO_BLOCKCHAIN = typing___cast(EventKindValue, 9)
    AUTH_OVERRIDE = typing___cast(EventKindValue, 10)
    AUTH_INCREMENTAL = typing___cast(EventKindValue, 11)
    MERCHANT_REVERSAL = typing___cast(EventKindValue, 12)
    ISSUER_REVERSAL = typing___cast(EventKindValue, 13)
    BOOKKEEPING = typing___cast(EventKindValue, 14)
    CASH_APP_FEE = typing___cast(EventKindValue, 15)
    PARTIAL_CAPTURE = typing___cast(EventKindValue, 16)
    CASH_BACK = typing___cast(EventKindValue, 17)
    RECEIVED_FROM_BLOCKCHAIN = typing___cast(EventKindValue, 18)
    CASH_APP_FEE_REIMBURSEMENT = typing___cast(EventKindValue, 19)
    ACQUIRER_FEE_REIMBURSEMENT = typing___cast(EventKindValue, 20)
    SETTLED_INTERNALLY = typing___cast(EventKindValue, 21)
    EARLY_DIRECT_DEPOSIT = typing___cast(EventKindValue, 22)
    PROVISIONAL_CREDIT_ISSUED = typing___cast(EventKindValue, 23)
    PROVISIONAL_CREDIT_WITHHELD = typing___cast(EventKindValue, 24)
    PARTIAL_AUTH = typing___cast(EventKindValue, 25)
NO_AUTHORIZATION = typing___cast(EventKindValue, 1)
AUTHORIZATION = typing___cast(EventKindValue, 2)
PREAUTHORIZATION = typing___cast(EventKindValue, 3)
AFD_PREAUTHORIZATION = typing___cast(EventKindValue, 4)
AUTH_ADJUSTMENT = typing___cast(EventKindValue, 5)
ACQUIRER_FEE = typing___cast(EventKindValue, 6)
DISCOUNT = typing___cast(EventKindValue, 7)
SUBMITTED_TO_BITBANK = typing___cast(EventKindValue, 8)
SENT_TO_BLOCKCHAIN = typing___cast(EventKindValue, 9)
AUTH_OVERRIDE = typing___cast(EventKindValue, 10)
AUTH_INCREMENTAL = typing___cast(EventKindValue, 11)
MERCHANT_REVERSAL = typing___cast(EventKindValue, 12)
ISSUER_REVERSAL = typing___cast(EventKindValue, 13)
BOOKKEEPING = typing___cast(EventKindValue, 14)
CASH_APP_FEE = typing___cast(EventKindValue, 15)
PARTIAL_CAPTURE = typing___cast(EventKindValue, 16)
CASH_BACK = typing___cast(EventKindValue, 17)
RECEIVED_FROM_BLOCKCHAIN = typing___cast(EventKindValue, 18)
CASH_APP_FEE_REIMBURSEMENT = typing___cast(EventKindValue, 19)
ACQUIRER_FEE_REIMBURSEMENT = typing___cast(EventKindValue, 20)
SETTLED_INTERNALLY = typing___cast(EventKindValue, 21)
EARLY_DIRECT_DEPOSIT = typing___cast(EventKindValue, 22)
PROVISIONAL_CREDIT_ISSUED = typing___cast(EventKindValue, 23)
PROVISIONAL_CREDIT_WITHHELD = typing___cast(EventKindValue, 24)
PARTIAL_AUTH = typing___cast(EventKindValue, 25)
type___EventKind = EventKind

TransactionReferenceTypeValue = typing___NewType('TransactionReferenceTypeValue', builtin___int)
type___TransactionReferenceTypeValue = TransactionReferenceTypeValue
TransactionReferenceType: _TransactionReferenceType
class _TransactionReferenceType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[TransactionReferenceTypeValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    PURCHASE_CONTRACT_TOKEN = typing___cast(TransactionReferenceTypeValue, 1)
    BLOCKCHAIN_TRANSACTION_ID = typing___cast(TransactionReferenceTypeValue, 2)
    MARQETA_DIRECT_DEPOSIT_TOKEN = typing___cast(TransactionReferenceTypeValue, 3)
PURCHASE_CONTRACT_TOKEN = typing___cast(TransactionReferenceTypeValue, 1)
BLOCKCHAIN_TRANSACTION_ID = typing___cast(TransactionReferenceTypeValue, 2)
MARQETA_DIRECT_DEPOSIT_TOKEN = typing___cast(TransactionReferenceTypeValue, 3)
type___TransactionReferenceType = TransactionReferenceType

class Transaction(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    token: typing___Text = ...
    state: type___TransactionStateValue = ...
    external_system: squareup___banklin___external___external_system_pb2___ExternalSystemValue = ...
    balance_token: typing___Text = ...
    instrument_token: typing___Text = ...
    pending_at: builtin___int = ...
    settled_at: builtin___int = ...
    voided_at: builtin___int = ...
    declined_at: builtin___int = ...
    refunded_at: builtin___int = ...
    description: typing___Text = ...
    reference: typing___Text = ...
    decline_reason: type___TransactionDeclineReasonValue = ...
    transaction_reason_code: type___TransactionReasonCodeValue = ...
    account_type: type___AccountTypeValue = ...
    instrument_variant: type___IssuedInstrumentVariantValue = ...
    merchant_token: typing___Text = ...
    created_at: builtin___int = ...
    updated_at: builtin___int = ...

    @property
    def amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def pending_amount(self) -> squareup___common___currency_pb2___Money: ...

    def __init__(self,
        *,
        token : typing___Optional[typing___Text] = None,
        state : typing___Optional[type___TransactionStateValue] = None,
        external_system : typing___Optional[squareup___banklin___external___external_system_pb2___ExternalSystemValue] = None,
        balance_token : typing___Optional[typing___Text] = None,
        instrument_token : typing___Optional[typing___Text] = None,
        amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        pending_at : typing___Optional[builtin___int] = None,
        settled_at : typing___Optional[builtin___int] = None,
        voided_at : typing___Optional[builtin___int] = None,
        declined_at : typing___Optional[builtin___int] = None,
        refunded_at : typing___Optional[builtin___int] = None,
        description : typing___Optional[typing___Text] = None,
        reference : typing___Optional[typing___Text] = None,
        decline_reason : typing___Optional[type___TransactionDeclineReasonValue] = None,
        transaction_reason_code : typing___Optional[type___TransactionReasonCodeValue] = None,
        account_type : typing___Optional[type___AccountTypeValue] = None,
        instrument_variant : typing___Optional[type___IssuedInstrumentVariantValue] = None,
        merchant_token : typing___Optional[typing___Text] = None,
        pending_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        created_at : typing___Optional[builtin___int] = None,
        updated_at : typing___Optional[builtin___int] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"account_type",b"account_type",u"amount",b"amount",u"balance_token",b"balance_token",u"created_at",b"created_at",u"decline_reason",b"decline_reason",u"declined_at",b"declined_at",u"description",b"description",u"external_system",b"external_system",u"instrument_token",b"instrument_token",u"instrument_variant",b"instrument_variant",u"merchant_token",b"merchant_token",u"pending_amount",b"pending_amount",u"pending_at",b"pending_at",u"reference",b"reference",u"refunded_at",b"refunded_at",u"settled_at",b"settled_at",u"state",b"state",u"token",b"token",u"transaction_reason_code",b"transaction_reason_code",u"updated_at",b"updated_at",u"voided_at",b"voided_at"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"account_type",b"account_type",u"amount",b"amount",u"balance_token",b"balance_token",u"created_at",b"created_at",u"decline_reason",b"decline_reason",u"declined_at",b"declined_at",u"description",b"description",u"external_system",b"external_system",u"instrument_token",b"instrument_token",u"instrument_variant",b"instrument_variant",u"merchant_token",b"merchant_token",u"pending_amount",b"pending_amount",u"pending_at",b"pending_at",u"reference",b"reference",u"refunded_at",b"refunded_at",u"settled_at",b"settled_at",u"state",b"state",u"token",b"token",u"transaction_reason_code",b"transaction_reason_code",u"updated_at",b"updated_at",u"voided_at",b"voided_at"]) -> None: ...
type___Transaction = Transaction

class TransactionEvent(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class Discount(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def reward(self) -> squareup___banklin___rewards_pb2___Reward: ...

        @property
        def amount(self) -> squareup___common___currency_pb2___Money: ...

        @property
        def discount_amount(self) -> squareup___common___currency_pb2___Money: ...

        @property
        def reward_discount(self) -> type___RewardDiscount: ...

        def __init__(self,
            *,
            reward : typing___Optional[squareup___banklin___rewards_pb2___Reward] = None,
            amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
            discount_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
            reward_discount : typing___Optional[type___RewardDiscount] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"amount",b"amount",u"discount_amount",b"discount_amount",u"reward",b"reward",u"reward_discount",b"reward_discount",u"source",b"source"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"amount",b"amount",u"discount_amount",b"discount_amount",u"reward",b"reward",u"reward_discount",b"reward_discount",u"source",b"source"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions___Literal[u"source",b"source"]) -> typing_extensions___Literal["reward"]: ...
    type___Discount = Discount

    token: typing___Text = ...
    transaction_token: typing___Text = ...
    type: type___TransactionStateValue = ...
    external_system: squareup___banklin___external___external_system_pb2___ExternalSystemValue = ...
    external_system_id: typing___Text = ...
    balance_token: typing___Text = ...
    instrument_token: typing___Text = ...
    occurred_at: builtin___int = ...
    event_order: builtin___int = ...
    description: typing___Text = ...
    reference: typing___Text = ...
    decline_reason: type___TransactionDeclineReasonValue = ...
    balance_snapshot_version: builtin___int = ...
    octopus_result: squareup___banklin___octopus_pb2___OctopusResultValue = ...
    reason_code: type___TransactionReasonCodeValue = ...
    kind: type___EventKindValue = ...
    merchant_token: typing___Text = ...
    expires_at: builtin___int = ...
    customer_token: typing___Text = ...
    preceding_related_external_system_id: typing___Text = ...
    dispute_funds_availability: type___DisputeFundsAvailabilityValue = ...

    @property
    def amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def balance_snapshot_amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def discount(self) -> type___TransactionEvent.Discount: ...

    def __init__(self,
        *,
        token : typing___Optional[typing___Text] = None,
        transaction_token : typing___Optional[typing___Text] = None,
        type : typing___Optional[type___TransactionStateValue] = None,
        external_system : typing___Optional[squareup___banklin___external___external_system_pb2___ExternalSystemValue] = None,
        external_system_id : typing___Optional[typing___Text] = None,
        balance_token : typing___Optional[typing___Text] = None,
        instrument_token : typing___Optional[typing___Text] = None,
        occurred_at : typing___Optional[builtin___int] = None,
        event_order : typing___Optional[builtin___int] = None,
        amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        balance_snapshot_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        description : typing___Optional[typing___Text] = None,
        reference : typing___Optional[typing___Text] = None,
        decline_reason : typing___Optional[type___TransactionDeclineReasonValue] = None,
        balance_snapshot_version : typing___Optional[builtin___int] = None,
        octopus_result : typing___Optional[squareup___banklin___octopus_pb2___OctopusResultValue] = None,
        reason_code : typing___Optional[type___TransactionReasonCodeValue] = None,
        kind : typing___Optional[type___EventKindValue] = None,
        discount : typing___Optional[type___TransactionEvent.Discount] = None,
        merchant_token : typing___Optional[typing___Text] = None,
        expires_at : typing___Optional[builtin___int] = None,
        customer_token : typing___Optional[typing___Text] = None,
        preceding_related_external_system_id : typing___Optional[typing___Text] = None,
        dispute_funds_availability : typing___Optional[type___DisputeFundsAvailabilityValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"amount",b"amount",u"balance_snapshot_amount",b"balance_snapshot_amount",u"balance_snapshot_version",b"balance_snapshot_version",u"balance_token",b"balance_token",u"customer_token",b"customer_token",u"decline_reason",b"decline_reason",u"description",b"description",u"discount",b"discount",u"dispute_funds_availability",b"dispute_funds_availability",u"event_order",b"event_order",u"expires_at",b"expires_at",u"external_system",b"external_system",u"external_system_id",b"external_system_id",u"instrument_token",b"instrument_token",u"kind",b"kind",u"kind_specific_details",b"kind_specific_details",u"merchant_token",b"merchant_token",u"occurred_at",b"occurred_at",u"octopus_result",b"octopus_result",u"preceding_related_external_system_id",b"preceding_related_external_system_id",u"reason_code",b"reason_code",u"reference",b"reference",u"token",b"token",u"transaction_token",b"transaction_token",u"type",b"type"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"amount",b"amount",u"balance_snapshot_amount",b"balance_snapshot_amount",u"balance_snapshot_version",b"balance_snapshot_version",u"balance_token",b"balance_token",u"customer_token",b"customer_token",u"decline_reason",b"decline_reason",u"description",b"description",u"discount",b"discount",u"dispute_funds_availability",b"dispute_funds_availability",u"event_order",b"event_order",u"expires_at",b"expires_at",u"external_system",b"external_system",u"external_system_id",b"external_system_id",u"instrument_token",b"instrument_token",u"kind",b"kind",u"kind_specific_details",b"kind_specific_details",u"merchant_token",b"merchant_token",u"occurred_at",b"occurred_at",u"octopus_result",b"octopus_result",u"preceding_related_external_system_id",b"preceding_related_external_system_id",u"reason_code",b"reason_code",u"reference",b"reference",u"token",b"token",u"transaction_token",b"transaction_token",u"type",b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"kind_specific_details",b"kind_specific_details"]) -> typing_extensions___Literal["discount"]: ...
type___TransactionEvent = TransactionEvent

class RewardDiscount(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class MissingRewardReportData(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        ApprovalReasonValue = typing___NewType('ApprovalReasonValue', builtin___int)
        type___ApprovalReasonValue = ApprovalReasonValue
        ApprovalReason: _ApprovalReason
        class _ApprovalReason(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[RewardDiscount.MissingRewardReportData.ApprovalReasonValue]):
            DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
            MERCHANT_DATA_UPDATED = typing___cast(RewardDiscount.MissingRewardReportData.ApprovalReasonValue, 1)
            ONE_TIME_APPROVAL_SILENT = typing___cast(RewardDiscount.MissingRewardReportData.ApprovalReasonValue, 2)
            ONE_TIME_APPROVAL = typing___cast(RewardDiscount.MissingRewardReportData.ApprovalReasonValue, 3)
        MERCHANT_DATA_UPDATED = typing___cast(RewardDiscount.MissingRewardReportData.ApprovalReasonValue, 1)
        ONE_TIME_APPROVAL_SILENT = typing___cast(RewardDiscount.MissingRewardReportData.ApprovalReasonValue, 2)
        ONE_TIME_APPROVAL = typing___cast(RewardDiscount.MissingRewardReportData.ApprovalReasonValue, 3)
        type___ApprovalReason = ApprovalReason

        missing_reward_report_token: typing___Text = ...
        approved_once: builtin___bool = ...
        approval_reason: type___RewardDiscount.MissingRewardReportData.ApprovalReasonValue = ...

        def __init__(self,
            *,
            missing_reward_report_token : typing___Optional[typing___Text] = None,
            approved_once : typing___Optional[builtin___bool] = None,
            approval_reason : typing___Optional[type___RewardDiscount.MissingRewardReportData.ApprovalReasonValue] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"approval_reason",b"approval_reason",u"approved_once",b"approved_once",u"missing_reward_report_token",b"missing_reward_report_token"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"approval_reason",b"approval_reason",u"approved_once",b"approved_once",u"missing_reward_report_token",b"missing_reward_report_token"]) -> None: ...
    type___MissingRewardReportData = MissingRewardReportData

    class CrossCurrencyRewardInfo(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        reward_amount: builtin___int = ...
        reward_currency: squareup___common___currency_codes_pb2___CurrencyCodeValue = ...
        reward_transaction_token: typing___Text = ...
        card_transaction_token: typing___Text = ...

        @property
        def reward_value_snapshot(self) -> squareup___common___currency_pb2___Money: ...

        @property
        def reward_exchange_rate(self) -> squareup___common___currency_pb2___Money: ...

        def __init__(self,
            *,
            reward_amount : typing___Optional[builtin___int] = None,
            reward_currency : typing___Optional[squareup___common___currency_codes_pb2___CurrencyCodeValue] = None,
            reward_value_snapshot : typing___Optional[squareup___common___currency_pb2___Money] = None,
            reward_exchange_rate : typing___Optional[squareup___common___currency_pb2___Money] = None,
            reward_transaction_token : typing___Optional[typing___Text] = None,
            card_transaction_token : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"card_transaction_token",b"card_transaction_token",u"reward_amount",b"reward_amount",u"reward_currency",b"reward_currency",u"reward_exchange_rate",b"reward_exchange_rate",u"reward_transaction_token",b"reward_transaction_token",u"reward_value_snapshot",b"reward_value_snapshot"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"card_transaction_token",b"card_transaction_token",u"reward_amount",b"reward_amount",u"reward_currency",b"reward_currency",u"reward_exchange_rate",b"reward_exchange_rate",u"reward_transaction_token",b"reward_transaction_token",u"reward_value_snapshot",b"reward_value_snapshot"]) -> None: ...
    type___CrossCurrencyRewardInfo = CrossCurrencyRewardInfo

    discount_token: typing___Text = ...
    reward_basis_points: builtin___int = ...
    missing_reward_report_token: typing___Text = ...
    card_transaction_token: typing___Text = ...
    reward_transaction_token: typing___Text = ...

    @property
    def reward_amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def missing_reward_report_data(self) -> type___RewardDiscount.MissingRewardReportData: ...

    @property
    def cross_currency_reward(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def cross_currency_reward_exchange_rate(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def cross_currency_reward_info(self) -> type___RewardDiscount.CrossCurrencyRewardInfo: ...

    def __init__(self,
        *,
        discount_token : typing___Optional[typing___Text] = None,
        reward_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        reward_basis_points : typing___Optional[builtin___int] = None,
        missing_reward_report_token : typing___Optional[typing___Text] = None,
        missing_reward_report_data : typing___Optional[type___RewardDiscount.MissingRewardReportData] = None,
        cross_currency_reward : typing___Optional[squareup___common___currency_pb2___Money] = None,
        cross_currency_reward_exchange_rate : typing___Optional[squareup___common___currency_pb2___Money] = None,
        card_transaction_token : typing___Optional[typing___Text] = None,
        reward_transaction_token : typing___Optional[typing___Text] = None,
        cross_currency_reward_info : typing___Optional[type___RewardDiscount.CrossCurrencyRewardInfo] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"card_transaction_token",b"card_transaction_token",u"cross_currency_reward",b"cross_currency_reward",u"cross_currency_reward_exchange_rate",b"cross_currency_reward_exchange_rate",u"cross_currency_reward_info",b"cross_currency_reward_info",u"discount",b"discount",u"discount_token",b"discount_token",u"missing_reward_report_data",b"missing_reward_report_data",u"missing_reward_report_token",b"missing_reward_report_token",u"reward_amount",b"reward_amount",u"reward_basis_points",b"reward_basis_points",u"reward_transaction_token",b"reward_transaction_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"card_transaction_token",b"card_transaction_token",u"cross_currency_reward",b"cross_currency_reward",u"cross_currency_reward_exchange_rate",b"cross_currency_reward_exchange_rate",u"cross_currency_reward_info",b"cross_currency_reward_info",u"discount",b"discount",u"discount_token",b"discount_token",u"missing_reward_report_data",b"missing_reward_report_data",u"missing_reward_report_token",b"missing_reward_report_token",u"reward_amount",b"reward_amount",u"reward_basis_points",b"reward_basis_points",u"reward_transaction_token",b"reward_transaction_token"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"discount",b"discount"]) -> typing_extensions___Literal["reward_amount","reward_basis_points"]: ...
type___RewardDiscount = RewardDiscount

class TransactionReference(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    transaction_id: typing___Text = ...
    reference_token: typing___Text = ...
    type: type___TransactionReferenceTypeValue = ...
    created_at: builtin___int = ...
    updated_at: builtin___int = ...

    def __init__(self,
        *,
        transaction_id : typing___Optional[typing___Text] = None,
        reference_token : typing___Optional[typing___Text] = None,
        type : typing___Optional[type___TransactionReferenceTypeValue] = None,
        created_at : typing___Optional[builtin___int] = None,
        updated_at : typing___Optional[builtin___int] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"created_at",b"created_at",u"reference_token",b"reference_token",u"transaction_id",b"transaction_id",u"type",b"type",u"updated_at",b"updated_at"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"created_at",b"created_at",u"reference_token",b"reference_token",u"transaction_id",b"transaction_id",u"type",b"type",u"updated_at",b"updated_at"]) -> None: ...
type___TransactionReference = TransactionReference

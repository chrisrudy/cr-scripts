# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.banklin import issuerprocessing_pb2 as squareup_dot_banklin_dot_issuerprocessing__pb2


class IssuerProcessingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authorize = channel.unary_unary(
                '/squareup.banklin.issuerprocessing.IssuerProcessingService/Authorize',
                request_serializer=squareup_dot_banklin_dot_issuerprocessing__pb2.AuthorizeRequestIp.SerializeToString,
                response_deserializer=squareup_dot_banklin_dot_issuerprocessing__pb2.AuthorizeResponseIp.FromString,
                )
        self.Reverse = channel.unary_unary(
                '/squareup.banklin.issuerprocessing.IssuerProcessingService/Reverse',
                request_serializer=squareup_dot_banklin_dot_issuerprocessing__pb2.ReverseRequestIp.SerializeToString,
                response_deserializer=squareup_dot_banklin_dot_issuerprocessing__pb2.ReverseResponseIp.FromString,
                )
        self.FinancialTransaction = channel.unary_unary(
                '/squareup.banklin.issuerprocessing.IssuerProcessingService/FinancialTransaction',
                request_serializer=squareup_dot_banklin_dot_issuerprocessing__pb2.FinancialTransactionRequestIp.SerializeToString,
                response_deserializer=squareup_dot_banklin_dot_issuerprocessing__pb2.FinancialTransactionResponseIp.FromString,
                )
        self.ChargebackAdvice = channel.unary_unary(
                '/squareup.banklin.issuerprocessing.IssuerProcessingService/ChargebackAdvice',
                request_serializer=squareup_dot_banklin_dot_issuerprocessing__pb2.ChargebackAdviceRequestIp.SerializeToString,
                response_deserializer=squareup_dot_banklin_dot_issuerprocessing__pb2.ChargebackAdviceResponseIp.FromString,
                )


class IssuerProcessingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Authorize(self, request, context):
        """Card/Issuer Processing System of Record RPCs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reverse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinancialTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChargebackAdvice(self, request, context):
        """Advices.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IssuerProcessingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authorize': grpc.unary_unary_rpc_method_handler(
                    servicer.Authorize,
                    request_deserializer=squareup_dot_banklin_dot_issuerprocessing__pb2.AuthorizeRequestIp.FromString,
                    response_serializer=squareup_dot_banklin_dot_issuerprocessing__pb2.AuthorizeResponseIp.SerializeToString,
            ),
            'Reverse': grpc.unary_unary_rpc_method_handler(
                    servicer.Reverse,
                    request_deserializer=squareup_dot_banklin_dot_issuerprocessing__pb2.ReverseRequestIp.FromString,
                    response_serializer=squareup_dot_banklin_dot_issuerprocessing__pb2.ReverseResponseIp.SerializeToString,
            ),
            'FinancialTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.FinancialTransaction,
                    request_deserializer=squareup_dot_banklin_dot_issuerprocessing__pb2.FinancialTransactionRequestIp.FromString,
                    response_serializer=squareup_dot_banklin_dot_issuerprocessing__pb2.FinancialTransactionResponseIp.SerializeToString,
            ),
            'ChargebackAdvice': grpc.unary_unary_rpc_method_handler(
                    servicer.ChargebackAdvice,
                    request_deserializer=squareup_dot_banklin_dot_issuerprocessing__pb2.ChargebackAdviceRequestIp.FromString,
                    response_serializer=squareup_dot_banklin_dot_issuerprocessing__pb2.ChargebackAdviceResponseIp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.banklin.issuerprocessing.IssuerProcessingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IssuerProcessingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Authorize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.banklin.issuerprocessing.IssuerProcessingService/Authorize',
            squareup_dot_banklin_dot_issuerprocessing__pb2.AuthorizeRequestIp.SerializeToString,
            squareup_dot_banklin_dot_issuerprocessing__pb2.AuthorizeResponseIp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reverse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.banklin.issuerprocessing.IssuerProcessingService/Reverse',
            squareup_dot_banklin_dot_issuerprocessing__pb2.ReverseRequestIp.SerializeToString,
            squareup_dot_banklin_dot_issuerprocessing__pb2.ReverseResponseIp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinancialTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.banklin.issuerprocessing.IssuerProcessingService/FinancialTransaction',
            squareup_dot_banklin_dot_issuerprocessing__pb2.FinancialTransactionRequestIp.SerializeToString,
            squareup_dot_banklin_dot_issuerprocessing__pb2.FinancialTransactionResponseIp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChargebackAdvice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.banklin.issuerprocessing.IssuerProcessingService/ChargebackAdvice',
            squareup_dot_banklin_dot_issuerprocessing__pb2.ChargebackAdviceRequestIp.SerializeToString,
            squareup_dot_banklin_dot_issuerprocessing__pb2.ChargebackAdviceResponseIp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

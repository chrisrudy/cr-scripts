# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.oauth import actorz_pb2 as squareup_dot_oauth_dot_actorz__pb2


class ActorzInternalServiceStub(object):
    """*
    Temporary service used as part of exploratory effort to identify requirements of setting up a new
    service that acts as a source of truth for all actors (human or machine) and authorizations
    (access powers that an actor has). This will exist as an OAuth RPC endpoint to be called by a
    select few internal clients until said service is up and running.

    GetEffectivePermissions lists all permissions granted to an actor across all authorizations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEffectivePermissions = channel.unary_unary(
                '/squareup.oauth.ActorzInternalService/GetEffectivePermissions',
                request_serializer=squareup_dot_oauth_dot_actorz__pb2.GetEffectivePermissionsRequest.SerializeToString,
                response_deserializer=squareup_dot_oauth_dot_actorz__pb2.GetEffectivePermissionsResponse.FromString,
                )
        self.GetEffectiveScopes = channel.unary_unary(
                '/squareup.oauth.ActorzInternalService/GetEffectiveScopes',
                request_serializer=squareup_dot_oauth_dot_actorz__pb2.GetEffectiveScopesRequest.SerializeToString,
                response_deserializer=squareup_dot_oauth_dot_actorz__pb2.GetEffectiveScopesResponse.FromString,
                )


class ActorzInternalServiceServicer(object):
    """*
    Temporary service used as part of exploratory effort to identify requirements of setting up a new
    service that acts as a source of truth for all actors (human or machine) and authorizations
    (access powers that an actor has). This will exist as an OAuth RPC endpoint to be called by a
    select few internal clients until said service is up and running.

    GetEffectivePermissions lists all permissions granted to an actor across all authorizations.
    """

    def GetEffectivePermissions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEffectiveScopes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActorzInternalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEffectivePermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEffectivePermissions,
                    request_deserializer=squareup_dot_oauth_dot_actorz__pb2.GetEffectivePermissionsRequest.FromString,
                    response_serializer=squareup_dot_oauth_dot_actorz__pb2.GetEffectivePermissionsResponse.SerializeToString,
            ),
            'GetEffectiveScopes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEffectiveScopes,
                    request_deserializer=squareup_dot_oauth_dot_actorz__pb2.GetEffectiveScopesRequest.FromString,
                    response_serializer=squareup_dot_oauth_dot_actorz__pb2.GetEffectiveScopesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.oauth.ActorzInternalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ActorzInternalService(object):
    """*
    Temporary service used as part of exploratory effort to identify requirements of setting up a new
    service that acts as a source of truth for all actors (human or machine) and authorizations
    (access powers that an actor has). This will exist as an OAuth RPC endpoint to be called by a
    select few internal clients until said service is up and running.

    GetEffectivePermissions lists all permissions granted to an actor across all authorizations.
    """

    @staticmethod
    def GetEffectivePermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.oauth.ActorzInternalService/GetEffectivePermissions',
            squareup_dot_oauth_dot_actorz__pb2.GetEffectivePermissionsRequest.SerializeToString,
            squareup_dot_oauth_dot_actorz__pb2.GetEffectivePermissionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEffectiveScopes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.oauth.ActorzInternalService/GetEffectiveScopes',
            squareup_dot_oauth_dot_actorz__pb2.GetEffectiveScopesRequest.SerializeToString,
            squareup_dot_oauth_dot_actorz__pb2.GetEffectiveScopesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

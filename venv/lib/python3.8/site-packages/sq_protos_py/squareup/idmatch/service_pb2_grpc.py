# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.idmatch import service_pb2 as squareup_dot_idmatch_dot_service__pb2


class IdmatchServiceStub(object):
    """
    Match Identity (attribute matching)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartMatchIdentity = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchService/StartMatchIdentity',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.StartMatchIdentityRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.StartMatchIdentityResponse.FromString,
                )
        self.ContinueMatchIdentity = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchService/ContinueMatchIdentity',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.ContinueMatchIdentityRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.ContinueMatchIdentityResponse.FromString,
                )
        self.PollMatchIdentity = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchService/PollMatchIdentity',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.PollMatchIdentityRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.PollMatchIdentityResponse.FromString,
                )
        self.StartQuiz = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchService/StartQuiz',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.StartQuizRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.StartQuizResponse.FromString,
                )
        self.PollQuiz = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchService/PollQuiz',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.PollQuizRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.PollQuizResponse.FromString,
                )
        self.GetVendorResponses = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchService/GetVendorResponses',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.GetVendorResponsesRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.GetVendorResponsesResponse.FromString,
                )
        self.StartVerifyIdentity = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchService/StartVerifyIdentity',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.StartVerifyIdentityRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.StartVerifyIdentityResponse.FromString,
                )
        self.PollVerifyIdentity = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchService/PollVerifyIdentity',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.PollVerifyIdentityRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.PollVerifyIdentityResponse.FromString,
                )


class IdmatchServiceServicer(object):
    """
    Match Identity (attribute matching)
    """

    def StartMatchIdentity(self, request, context):
        """Attribute matching. This may take a 30+ seconds, so it returns an ID to hand to the PollMatchIdentity rpc.
        Safe to retry but non idempotent since each request creates a new match identity attempt with its own unique token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContinueMatchIdentity(self, request, context):
        """For one_vendor_at_a_time mode, make idmatch use the next available vendor. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollMatchIdentity(self, request, context):
        """Returns the result of an attribute match, or a simple response indicating callers should wait a bit and try again. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartQuiz(self, request, context):
        """
        Quiz (fetching quiz questions)

        Generating quiz questions. This may take a 30+ seconds, so it returns an ID to hand to the PollQuiz rpc. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollQuiz(self, request, context):
        """Returns the quiz questions generated, or a simple response indicating callers should wait a bit and try again. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorResponses(self, request, context):
        """Returns raw vendor responses. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartVerifyIdentity(self, request, context):
        """
        Verify Identity (check quiz question answers)

        Verify identity This may take a 30+ seconds, so it returns an ID to hand to the PollVerifyIdentity rpc. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollVerifyIdentity(self, request, context):
        """Returns the result of an identity verification match, or a simple response indicating callers should wait a bit and try again. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdmatchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartMatchIdentity': grpc.unary_unary_rpc_method_handler(
                    servicer.StartMatchIdentity,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.StartMatchIdentityRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.StartMatchIdentityResponse.SerializeToString,
            ),
            'ContinueMatchIdentity': grpc.unary_unary_rpc_method_handler(
                    servicer.ContinueMatchIdentity,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.ContinueMatchIdentityRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.ContinueMatchIdentityResponse.SerializeToString,
            ),
            'PollMatchIdentity': grpc.unary_unary_rpc_method_handler(
                    servicer.PollMatchIdentity,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.PollMatchIdentityRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.PollMatchIdentityResponse.SerializeToString,
            ),
            'StartQuiz': grpc.unary_unary_rpc_method_handler(
                    servicer.StartQuiz,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.StartQuizRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.StartQuizResponse.SerializeToString,
            ),
            'PollQuiz': grpc.unary_unary_rpc_method_handler(
                    servicer.PollQuiz,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.PollQuizRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.PollQuizResponse.SerializeToString,
            ),
            'GetVendorResponses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorResponses,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.GetVendorResponsesRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.GetVendorResponsesResponse.SerializeToString,
            ),
            'StartVerifyIdentity': grpc.unary_unary_rpc_method_handler(
                    servicer.StartVerifyIdentity,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.StartVerifyIdentityRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.StartVerifyIdentityResponse.SerializeToString,
            ),
            'PollVerifyIdentity': grpc.unary_unary_rpc_method_handler(
                    servicer.PollVerifyIdentity,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.PollVerifyIdentityRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.PollVerifyIdentityResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.idmatch.service.IdmatchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IdmatchService(object):
    """
    Match Identity (attribute matching)
    """

    @staticmethod
    def StartMatchIdentity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchService/StartMatchIdentity',
            squareup_dot_idmatch_dot_service__pb2.StartMatchIdentityRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.StartMatchIdentityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContinueMatchIdentity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchService/ContinueMatchIdentity',
            squareup_dot_idmatch_dot_service__pb2.ContinueMatchIdentityRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.ContinueMatchIdentityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PollMatchIdentity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchService/PollMatchIdentity',
            squareup_dot_idmatch_dot_service__pb2.PollMatchIdentityRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.PollMatchIdentityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartQuiz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchService/StartQuiz',
            squareup_dot_idmatch_dot_service__pb2.StartQuizRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.StartQuizResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PollQuiz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchService/PollQuiz',
            squareup_dot_idmatch_dot_service__pb2.PollQuizRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.PollQuizResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorResponses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchService/GetVendorResponses',
            squareup_dot_idmatch_dot_service__pb2.GetVendorResponsesRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.GetVendorResponsesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartVerifyIdentity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchService/StartVerifyIdentity',
            squareup_dot_idmatch_dot_service__pb2.StartVerifyIdentityRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.StartVerifyIdentityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PollVerifyIdentity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchService/PollVerifyIdentity',
            squareup_dot_idmatch_dot_service__pb2.PollVerifyIdentityRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.PollVerifyIdentityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IdmatchInternalServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProtectMatchIdentity = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchInternalService/ProtectMatchIdentity',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.ProtectMatchIdentityRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.ProtectMatchIdentityResponse.FromString,
                )
        self.BackfillVendorResponse = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchInternalService/BackfillVendorResponse',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.BackfillVendorResponseRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.BackfillVendorResponseResponse.FromString,
                )
        self.GetAttributeMatchLevels = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchInternalService/GetAttributeMatchLevels',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.GetAttributeMatchLevelsRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.GetAttributeMatchLevelsResponse.FromString,
                )
        self.GetMatchRequestData = channel.unary_unary(
                '/squareup.idmatch.service.IdmatchInternalService/GetMatchRequestData',
                request_serializer=squareup_dot_idmatch_dot_service__pb2.GetMatchRequestDataRequest.SerializeToString,
                response_deserializer=squareup_dot_idmatch_dot_service__pb2.GetMatchRequestDataResponse.FromString,
                )


class IdmatchInternalServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ProtectMatchIdentity(self, request, context):
        """
        Marks an identity match record as protected, restricting access to any PII in responses.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackfillVendorResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttributeMatchLevels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMatchRequestData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdmatchInternalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProtectMatchIdentity': grpc.unary_unary_rpc_method_handler(
                    servicer.ProtectMatchIdentity,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.ProtectMatchIdentityRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.ProtectMatchIdentityResponse.SerializeToString,
            ),
            'BackfillVendorResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.BackfillVendorResponse,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.BackfillVendorResponseRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.BackfillVendorResponseResponse.SerializeToString,
            ),
            'GetAttributeMatchLevels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttributeMatchLevels,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.GetAttributeMatchLevelsRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.GetAttributeMatchLevelsResponse.SerializeToString,
            ),
            'GetMatchRequestData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMatchRequestData,
                    request_deserializer=squareup_dot_idmatch_dot_service__pb2.GetMatchRequestDataRequest.FromString,
                    response_serializer=squareup_dot_idmatch_dot_service__pb2.GetMatchRequestDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.idmatch.service.IdmatchInternalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IdmatchInternalService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProtectMatchIdentity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchInternalService/ProtectMatchIdentity',
            squareup_dot_idmatch_dot_service__pb2.ProtectMatchIdentityRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.ProtectMatchIdentityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BackfillVendorResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchInternalService/BackfillVendorResponse',
            squareup_dot_idmatch_dot_service__pb2.BackfillVendorResponseRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.BackfillVendorResponseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAttributeMatchLevels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchInternalService/GetAttributeMatchLevels',
            squareup_dot_idmatch_dot_service__pb2.GetAttributeMatchLevelsRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.GetAttributeMatchLevelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMatchRequestData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.idmatch.service.IdmatchInternalService/GetMatchRequestData',
            squareup_dot_idmatch_dot_service__pb2.GetMatchRequestDataRequest.SerializeToString,
            squareup_dot_idmatch_dot_service__pb2.GetMatchRequestDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

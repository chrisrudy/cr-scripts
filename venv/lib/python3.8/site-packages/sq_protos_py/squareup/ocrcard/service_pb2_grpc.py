# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.ocrcard import service_pb2 as squareup_dot_ocrcard_dot_service__pb2


class OcrCardServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ImagesByFideliusToken = channel.unary_unary(
                '/squareup.ocrcard.service.OcrCardService/ImagesByFideliusToken',
                request_serializer=squareup_dot_ocrcard_dot_service__pb2.ImagesByFideliusTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_ocrcard_dot_service__pb2.ImagesByFideliusTokenResponse.FromString,
                )
        self.OcrCard = channel.unary_unary(
                '/squareup.ocrcard.service.OcrCardService/OcrCard',
                request_serializer=squareup_dot_ocrcard_dot_service__pb2.OcrRequest.SerializeToString,
                response_deserializer=squareup_dot_ocrcard_dot_service__pb2.OcrResponse.FromString,
                )
        self.OcrResults = channel.unary_unary(
                '/squareup.ocrcard.service.OcrCardService/OcrResults',
                request_serializer=squareup_dot_ocrcard_dot_service__pb2.OcrResultRequest.SerializeToString,
                response_deserializer=squareup_dot_ocrcard_dot_service__pb2.OcrResultResponse.FromString,
                )
        self.RecognizeDriverLicense = channel.unary_unary(
                '/squareup.ocrcard.service.OcrCardService/RecognizeDriverLicense',
                request_serializer=squareup_dot_ocrcard_dot_service__pb2.RecognizeDriverLicenseRequest.SerializeToString,
                response_deserializer=squareup_dot_ocrcard_dot_service__pb2.RecognizeDriverLicenseResponse.FromString,
                )


class OcrCardServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ImagesByFideliusToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OcrCard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OcrResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecognizeDriverLicense(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OcrCardServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ImagesByFideliusToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ImagesByFideliusToken,
                    request_deserializer=squareup_dot_ocrcard_dot_service__pb2.ImagesByFideliusTokenRequest.FromString,
                    response_serializer=squareup_dot_ocrcard_dot_service__pb2.ImagesByFideliusTokenResponse.SerializeToString,
            ),
            'OcrCard': grpc.unary_unary_rpc_method_handler(
                    servicer.OcrCard,
                    request_deserializer=squareup_dot_ocrcard_dot_service__pb2.OcrRequest.FromString,
                    response_serializer=squareup_dot_ocrcard_dot_service__pb2.OcrResponse.SerializeToString,
            ),
            'OcrResults': grpc.unary_unary_rpc_method_handler(
                    servicer.OcrResults,
                    request_deserializer=squareup_dot_ocrcard_dot_service__pb2.OcrResultRequest.FromString,
                    response_serializer=squareup_dot_ocrcard_dot_service__pb2.OcrResultResponse.SerializeToString,
            ),
            'RecognizeDriverLicense': grpc.unary_unary_rpc_method_handler(
                    servicer.RecognizeDriverLicense,
                    request_deserializer=squareup_dot_ocrcard_dot_service__pb2.RecognizeDriverLicenseRequest.FromString,
                    response_serializer=squareup_dot_ocrcard_dot_service__pb2.RecognizeDriverLicenseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.ocrcard.service.OcrCardService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OcrCardService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ImagesByFideliusToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ocrcard.service.OcrCardService/ImagesByFideliusToken',
            squareup_dot_ocrcard_dot_service__pb2.ImagesByFideliusTokenRequest.SerializeToString,
            squareup_dot_ocrcard_dot_service__pb2.ImagesByFideliusTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OcrCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ocrcard.service.OcrCardService/OcrCard',
            squareup_dot_ocrcard_dot_service__pb2.OcrRequest.SerializeToString,
            squareup_dot_ocrcard_dot_service__pb2.OcrResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OcrResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ocrcard.service.OcrCardService/OcrResults',
            squareup_dot_ocrcard_dot_service__pb2.OcrResultRequest.SerializeToString,
            squareup_dot_ocrcard_dot_service__pb2.OcrResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecognizeDriverLicense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ocrcard.service.OcrCardService/RecognizeDriverLicense',
            squareup_dot_ocrcard_dot_service__pb2.RecognizeDriverLicenseRequest.SerializeToString,
            squareup_dot_ocrcard_dot_service__pb2.RecognizeDriverLicenseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

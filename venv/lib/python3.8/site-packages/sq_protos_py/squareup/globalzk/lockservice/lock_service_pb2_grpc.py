# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.globalzk.lockservice import lock_service_pb2 as squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2


class LockServiceStub(object):
    """* A service for obtaining and administering locks. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AcquireOrRenewLock = channel.unary_unary(
                '/squareup.globalzk.lockservice.LockService/AcquireOrRenewLock',
                request_serializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.AcquireOrRenewLockRequest.SerializeToString,
                response_deserializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.AcquireOrRenewLockResponse.FromString,
                )
        self.ReleaseLock = channel.unary_unary(
                '/squareup.globalzk.lockservice.LockService/ReleaseLock',
                request_serializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.ReleaseLockRequest.SerializeToString,
                response_deserializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.ReleaseLockResponse.FromString,
                )
        self.GetLockInfo = channel.unary_unary(
                '/squareup.globalzk.lockservice.LockService/GetLockInfo',
                request_serializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.GetLockInfoRequest.SerializeToString,
                response_deserializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.GetLockInfoResponse.FromString,
                )


class LockServiceServicer(object):
    """* A service for obtaining and administering locks. 
    """

    def AcquireOrRenewLock(self, request, context):
        """* Acquire or Renew a lock 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseLock(self, request, context):
        """* Proactively release a currently held lock 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLockInfo(self, request, context):
        """* Retrieves a info for currently held locks 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LockServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AcquireOrRenewLock': grpc.unary_unary_rpc_method_handler(
                    servicer.AcquireOrRenewLock,
                    request_deserializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.AcquireOrRenewLockRequest.FromString,
                    response_serializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.AcquireOrRenewLockResponse.SerializeToString,
            ),
            'ReleaseLock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseLock,
                    request_deserializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.ReleaseLockRequest.FromString,
                    response_serializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.ReleaseLockResponse.SerializeToString,
            ),
            'GetLockInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLockInfo,
                    request_deserializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.GetLockInfoRequest.FromString,
                    response_serializer=squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.GetLockInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.globalzk.lockservice.LockService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LockService(object):
    """* A service for obtaining and administering locks. 
    """

    @staticmethod
    def AcquireOrRenewLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.globalzk.lockservice.LockService/AcquireOrRenewLock',
            squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.AcquireOrRenewLockRequest.SerializeToString,
            squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.AcquireOrRenewLockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.globalzk.lockservice.LockService/ReleaseLock',
            squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.ReleaseLockRequest.SerializeToString,
            squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.ReleaseLockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLockInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.globalzk.lockservice.LockService/GetLockInfo',
            squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.GetLockInfoRequest.SerializeToString,
            squareup_dot_globalzk_dot_lockservice_dot_lock__service__pb2.GetLockInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

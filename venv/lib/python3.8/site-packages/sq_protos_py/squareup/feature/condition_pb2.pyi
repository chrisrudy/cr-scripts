# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Condition(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    ConditionTypeValue = typing___NewType('ConditionTypeValue', builtin___int)
    type___ConditionTypeValue = ConditionTypeValue
    ConditionType: _ConditionType
    class _ConditionType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Condition.ConditionTypeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        ATTRIBUTE_TEST = typing___cast(Condition.ConditionTypeValue, 1)
        CONJUNCTION = typing___cast(Condition.ConditionTypeValue, 2)
        DISJUNCTION = typing___cast(Condition.ConditionTypeValue, 3)
    ATTRIBUTE_TEST = typing___cast(Condition.ConditionTypeValue, 1)
    CONJUNCTION = typing___cast(Condition.ConditionTypeValue, 2)
    DISJUNCTION = typing___cast(Condition.ConditionTypeValue, 3)
    type___ConditionType = ConditionType

    type: type___Condition.ConditionTypeValue = ...

    @property
    def attribute_test(self) -> type___AttributeTest: ...

    @property
    def conjunction(self) -> type___Conjunction: ...

    @property
    def disjunction(self) -> type___Disjunction: ...

    def __init__(self,
        *,
        type : typing___Optional[type___Condition.ConditionTypeValue] = None,
        attribute_test : typing___Optional[type___AttributeTest] = None,
        conjunction : typing___Optional[type___Conjunction] = None,
        disjunction : typing___Optional[type___Disjunction] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"attribute_test",b"attribute_test",u"condition",b"condition",u"conjunction",b"conjunction",u"disjunction",b"disjunction",u"type",b"type"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"attribute_test",b"attribute_test",u"condition",b"condition",u"conjunction",b"conjunction",u"disjunction",b"disjunction",u"type",b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"condition",b"condition"]) -> typing_extensions___Literal["attribute_test","conjunction","disjunction"]: ...
type___Condition = Condition

class AttributeTest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    ComparisonOpValue = typing___NewType('ComparisonOpValue', builtin___int)
    type___ComparisonOpValue = ComparisonOpValue
    ComparisonOp: _ComparisonOp
    class _ComparisonOp(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[AttributeTest.ComparisonOpValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        EQ = typing___cast(AttributeTest.ComparisonOpValue, 1)
        NE = typing___cast(AttributeTest.ComparisonOpValue, 2)
        GE = typing___cast(AttributeTest.ComparisonOpValue, 3)
        GT = typing___cast(AttributeTest.ComparisonOpValue, 4)
        LE = typing___cast(AttributeTest.ComparisonOpValue, 5)
        LT = typing___cast(AttributeTest.ComparisonOpValue, 6)
    EQ = typing___cast(AttributeTest.ComparisonOpValue, 1)
    NE = typing___cast(AttributeTest.ComparisonOpValue, 2)
    GE = typing___cast(AttributeTest.ComparisonOpValue, 3)
    GT = typing___cast(AttributeTest.ComparisonOpValue, 4)
    LE = typing___cast(AttributeTest.ComparisonOpValue, 5)
    LT = typing___cast(AttributeTest.ComparisonOpValue, 6)
    type___ComparisonOp = ComparisonOp

    attrib: typing___Text = ...
    operator: type___AttributeTest.ComparisonOpValue = ...
    value: typing___Text = ...

    def __init__(self,
        *,
        attrib : typing___Optional[typing___Text] = None,
        operator : typing___Optional[type___AttributeTest.ComparisonOpValue] = None,
        value : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"attrib",b"attrib",u"operator",b"operator",u"value",b"value"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"attrib",b"attrib",u"operator",b"operator",u"value",b"value"]) -> None: ...
type___AttributeTest = AttributeTest

class Conjunction(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def conjuncts(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Condition]: ...

    def __init__(self,
        *,
        conjuncts : typing___Optional[typing___Iterable[type___Condition]] = None,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"conjuncts",b"conjuncts"]) -> None: ...
type___Conjunction = Conjunction

class Disjunction(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def disjuncts(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___Condition]: ...

    def __init__(self,
        *,
        disjuncts : typing___Optional[typing___Iterable[type___Condition]] = None,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"disjuncts",b"disjuncts"]) -> None: ...
type___Disjunction = Disjunction

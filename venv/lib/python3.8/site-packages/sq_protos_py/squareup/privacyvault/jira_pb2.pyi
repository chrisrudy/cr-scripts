# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.privacyvault.model_pb2 import (
    PlumbingValue as squareup___privacyvault___model_pb2___PlumbingValue,
)

from typing import (
    Iterable as typing___Iterable,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

WorkTypeValue = typing___NewType('WorkTypeValue', builtin___int)
type___WorkTypeValue = WorkTypeValue
WorkType: _WorkType
class _WorkType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[WorkTypeValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    DO_NOT_USE = typing___cast(WorkTypeValue, 0)
    MANUAL = typing___cast(WorkTypeValue, 1)
    AUTOMATED_PRIVACY_VAULT = typing___cast(WorkTypeValue, 2)
    AUTOMATED_OTHER = typing___cast(WorkTypeValue, 3)
    MANUAL_VENDOR_NOTIFICATION = typing___cast(WorkTypeValue, 4)
DO_NOT_USE = typing___cast(WorkTypeValue, 0)
MANUAL = typing___cast(WorkTypeValue, 1)
AUTOMATED_PRIVACY_VAULT = typing___cast(WorkTypeValue, 2)
AUTOMATED_OTHER = typing___cast(WorkTypeValue, 3)
MANUAL_VENDOR_NOTIFICATION = typing___cast(WorkTypeValue, 4)
type___WorkType = WorkType

class JiraFields(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    summary: typing___Text = ...
    description: typing___Text = ...
    privacy_request_token: typing___Text = ...

    def __init__(self,
        *,
        summary : typing___Optional[typing___Text] = None,
        description : typing___Optional[typing___Text] = None,
        privacy_request_token : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"description",b"description",u"privacy_request_token",b"privacy_request_token",u"summary",b"summary"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"description",b"description",u"privacy_request_token",b"privacy_request_token",u"summary",b"summary"]) -> None: ...
type___JiraFields = JiraFields

class MasterTask(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    StateValue = typing___NewType('StateValue', builtin___int)
    type___StateValue = StateValue
    State: _State
    class _State(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[MasterTask.StateValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        DO_NOT_USE = typing___cast(MasterTask.StateValue, 0)
        DECLINED = typing___cast(MasterTask.StateValue, 1)
        RESOLVED = typing___cast(MasterTask.StateValue, 2)
        NEEDS_REVIEW = typing___cast(MasterTask.StateValue, 3)
        NEEDS_LEGAL_REVIEW = typing___cast(MasterTask.StateValue, 4)
        PENDING_DEACTIVATION = typing___cast(MasterTask.StateValue, 5)
        AWAITING_ENG_TEAMS = typing___cast(MasterTask.StateValue, 6)
        NEEDS_NOTIFICATION = typing___cast(MasterTask.StateValue, 7)
        WAITING_CUSTOMER_ACKNOWLEDGEMENT = typing___cast(MasterTask.StateValue, 8)
    DO_NOT_USE = typing___cast(MasterTask.StateValue, 0)
    DECLINED = typing___cast(MasterTask.StateValue, 1)
    RESOLVED = typing___cast(MasterTask.StateValue, 2)
    NEEDS_REVIEW = typing___cast(MasterTask.StateValue, 3)
    NEEDS_LEGAL_REVIEW = typing___cast(MasterTask.StateValue, 4)
    PENDING_DEACTIVATION = typing___cast(MasterTask.StateValue, 5)
    AWAITING_ENG_TEAMS = typing___cast(MasterTask.StateValue, 6)
    NEEDS_NOTIFICATION = typing___cast(MasterTask.StateValue, 7)
    WAITING_CUSTOMER_ACKNOWLEDGEMENT = typing___cast(MasterTask.StateValue, 8)
    type___State = State

    state: type___MasterTask.StateValue = ...
    legal_dri: typing___Text = ...
    cs_dri: typing___Text = ...

    @property
    def jira_fields(self) -> type___JiraFields: ...

    def __init__(self,
        *,
        jira_fields : typing___Optional[type___JiraFields] = None,
        state : typing___Optional[type___MasterTask.StateValue] = None,
        legal_dri : typing___Optional[typing___Text] = None,
        cs_dri : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"cs_dri",b"cs_dri",u"jira_fields",b"jira_fields",u"legal_dri",b"legal_dri",u"state",b"state"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"cs_dri",b"cs_dri",u"jira_fields",b"jira_fields",u"legal_dri",b"legal_dri",u"state",b"state"]) -> None: ...
type___MasterTask = MasterTask

class SubTask(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    StateValue = typing___NewType('StateValue', builtin___int)
    type___StateValue = StateValue
    State: _State
    class _State(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[SubTask.StateValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        DO_NOT_USE = typing___cast(SubTask.StateValue, 0)
        DECLINED = typing___cast(SubTask.StateValue, 1)
        RESOLVED = typing___cast(SubTask.StateValue, 2)
        NEEDS_ACKNOWLEDGEMENT = typing___cast(SubTask.StateValue, 3)
        ACKNOWLEDGED = typing___cast(SubTask.StateValue, 4)
        BLOCKED_PRIVACY_ENG = typing___cast(SubTask.StateValue, 5)
        BLOCKED_LEGAL = typing___cast(SubTask.StateValue, 6)
        IN_PROGRESS = typing___cast(SubTask.StateValue, 7)
    DO_NOT_USE = typing___cast(SubTask.StateValue, 0)
    DECLINED = typing___cast(SubTask.StateValue, 1)
    RESOLVED = typing___cast(SubTask.StateValue, 2)
    NEEDS_ACKNOWLEDGEMENT = typing___cast(SubTask.StateValue, 3)
    ACKNOWLEDGED = typing___cast(SubTask.StateValue, 4)
    BLOCKED_PRIVACY_ENG = typing___cast(SubTask.StateValue, 5)
    BLOCKED_LEGAL = typing___cast(SubTask.StateValue, 6)
    IN_PROGRESS = typing___cast(SubTask.StateValue, 7)
    type___State = State

    state: type___SubTask.StateValue = ...
    due_date_ms: builtin___int = ...
    plumbing: squareup___privacyvault___model_pb2___PlumbingValue = ...

    @property
    def jira_fields(self) -> type___JiraFields: ...

    @property
    def master_task(self) -> type___MasterTask: ...

    @property
    def service(self) -> type___Service: ...

    @property
    def vendor(self) -> type___Vendor: ...

    @property
    def dependencies(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___SubTask]: ...

    def __init__(self,
        *,
        jira_fields : typing___Optional[type___JiraFields] = None,
        state : typing___Optional[type___SubTask.StateValue] = None,
        master_task : typing___Optional[type___MasterTask] = None,
        service : typing___Optional[type___Service] = None,
        vendor : typing___Optional[type___Vendor] = None,
        dependencies : typing___Optional[typing___Iterable[type___SubTask]] = None,
        due_date_ms : typing___Optional[builtin___int] = None,
        plumbing : typing___Optional[squareup___privacyvault___model_pb2___PlumbingValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"affected",b"affected",u"due_date_ms",b"due_date_ms",u"jira_fields",b"jira_fields",u"master_task",b"master_task",u"plumbing",b"plumbing",u"service",b"service",u"state",b"state",u"vendor",b"vendor"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"affected",b"affected",u"dependencies",b"dependencies",u"due_date_ms",b"due_date_ms",u"jira_fields",b"jira_fields",u"master_task",b"master_task",u"plumbing",b"plumbing",u"service",b"service",u"state",b"state",u"vendor",b"vendor"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"affected",b"affected"]) -> typing_extensions___Literal["service","vendor"]: ...
type___SubTask = SubTask

class Service(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    slug: typing___Text = ...
    oncall_ldap: typing___Text = ...

    def __init__(self,
        *,
        slug : typing___Optional[typing___Text] = None,
        oncall_ldap : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"oncall_ldap",b"oncall_ldap",u"slug",b"slug"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"oncall_ldap",b"oncall_ldap",u"slug",b"slug"]) -> None: ...
type___Service = Service

class Vendor(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    name: typing___Text = ...
    oncall_ldap: typing___Text = ...

    def __init__(self,
        *,
        name : typing___Optional[typing___Text] = None,
        oncall_ldap : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"name",b"name",u"oncall_ldap",b"oncall_ldap"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"name",b"name",u"oncall_ldap",b"oncall_ldap"]) -> None: ...
type___Vendor = Vendor

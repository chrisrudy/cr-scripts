# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.common import messages_pb2 as squareup_dot_common_dot_messages__pb2
from sq_protos_py.squareup.foundry import service_pb2 as squareup_dot_foundry_dot_service__pb2


class FoundryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EvaluatePlainRiskInput = channel.unary_unary(
                '/squareup.foundry.service.FoundryService/EvaluatePlainRiskInput',
                request_serializer=squareup_dot_foundry_dot_service__pb2.EvaluatePlainRiskInputRequest.SerializeToString,
                response_deserializer=squareup_dot_foundry_dot_service__pb2.EvaluatePlainRiskInputResponse.FromString,
                )
        self.BatchPublishPlainRiskInput = channel.unary_unary(
                '/squareup.foundry.service.FoundryService/BatchPublishPlainRiskInput',
                request_serializer=squareup_dot_foundry_dot_service__pb2.BatchPublishPlainRiskInputRequest.SerializeToString,
                response_deserializer=squareup_dot_foundry_dot_service__pb2.BatchPublishPlainRiskInputResponse.FromString,
                )
        self.EvaluateKnowledgeEvent = channel.unary_unary(
                '/squareup.foundry.service.FoundryService/EvaluateKnowledgeEvent',
                request_serializer=squareup_dot_foundry_dot_service__pb2.EvaluateKnowledgeEventRequest.SerializeToString,
                response_deserializer=squareup_dot_foundry_dot_service__pb2.EvaluateKnowledgeEventResponse.FromString,
                )
        self.BatchPublishKnowledgeEvent = channel.unary_unary(
                '/squareup.foundry.service.FoundryService/BatchPublishKnowledgeEvent',
                request_serializer=squareup_dot_foundry_dot_service__pb2.BatchPublishKnowledgeEventRequest.SerializeToString,
                response_deserializer=squareup_dot_foundry_dot_service__pb2.BatchPublishKnowledgeEventResponse.FromString,
                )


class FoundryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EvaluatePlainRiskInput(self, request, context):
        """* Main integration point for KP consumers. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchPublishPlainRiskInput(self, request, context):
        """*
        Batch version of EvaluatePlainRiskInput.
        But it only supports persistence strategy GCS_AND_DOWNSTREAM_SERVICES and GCS_ONLY.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvaluateKnowledgeEvent(self, request, context):
        """*
        This is a mirror of EvaluatePlainRiskInput endpoint. Customers can use this to send KnowledgeEvent to
        Foundry, Foundry will convert it to RiskInput and call EvaluatePlainRiskInput for evaluation.
        You should use this endpoint over EvaluatePlainRiskInput if you would like to use KnowledgeEvent, which
        is binary equivalent to RiskInput. Benefits of using KnowledgeEvent is that it does not depend on
        all the event protos like RiskInput.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchPublishKnowledgeEvent(self, request, context):
        """*
        Batch version of EvaluateKnowledgeEvent.
        But it only supports persistence strategy GCS_AND_DOWNSTREAM_SERVICES and GCS_ONLY.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FoundryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EvaluatePlainRiskInput': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluatePlainRiskInput,
                    request_deserializer=squareup_dot_foundry_dot_service__pb2.EvaluatePlainRiskInputRequest.FromString,
                    response_serializer=squareup_dot_foundry_dot_service__pb2.EvaluatePlainRiskInputResponse.SerializeToString,
            ),
            'BatchPublishPlainRiskInput': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchPublishPlainRiskInput,
                    request_deserializer=squareup_dot_foundry_dot_service__pb2.BatchPublishPlainRiskInputRequest.FromString,
                    response_serializer=squareup_dot_foundry_dot_service__pb2.BatchPublishPlainRiskInputResponse.SerializeToString,
            ),
            'EvaluateKnowledgeEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateKnowledgeEvent,
                    request_deserializer=squareup_dot_foundry_dot_service__pb2.EvaluateKnowledgeEventRequest.FromString,
                    response_serializer=squareup_dot_foundry_dot_service__pb2.EvaluateKnowledgeEventResponse.SerializeToString,
            ),
            'BatchPublishKnowledgeEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchPublishKnowledgeEvent,
                    request_deserializer=squareup_dot_foundry_dot_service__pb2.BatchPublishKnowledgeEventRequest.FromString,
                    response_serializer=squareup_dot_foundry_dot_service__pb2.BatchPublishKnowledgeEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.foundry.service.FoundryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FoundryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EvaluatePlainRiskInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.foundry.service.FoundryService/EvaluatePlainRiskInput',
            squareup_dot_foundry_dot_service__pb2.EvaluatePlainRiskInputRequest.SerializeToString,
            squareup_dot_foundry_dot_service__pb2.EvaluatePlainRiskInputResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchPublishPlainRiskInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.foundry.service.FoundryService/BatchPublishPlainRiskInput',
            squareup_dot_foundry_dot_service__pb2.BatchPublishPlainRiskInputRequest.SerializeToString,
            squareup_dot_foundry_dot_service__pb2.BatchPublishPlainRiskInputResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EvaluateKnowledgeEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.foundry.service.FoundryService/EvaluateKnowledgeEvent',
            squareup_dot_foundry_dot_service__pb2.EvaluateKnowledgeEventRequest.SerializeToString,
            squareup_dot_foundry_dot_service__pb2.EvaluateKnowledgeEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchPublishKnowledgeEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.foundry.service.FoundryService/BatchPublishKnowledgeEvent',
            squareup_dot_foundry_dot_service__pb2.BatchPublishKnowledgeEventRequest.SerializeToString,
            squareup_dot_foundry_dot_service__pb2.BatchPublishKnowledgeEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FoundryAdminServiceStub(object):
    """Engineer- or KP-internally-facing endpoints for piping data into GCS and starting dataflow jobs.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessRiskInput = channel.unary_unary(
                '/squareup.foundry.service.FoundryAdminService/ProcessRiskInput',
                request_serializer=squareup_dot_foundry_dot_service__pb2.ProcessRiskInputRequest.SerializeToString,
                response_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                )


class FoundryAdminServiceServicer(object):
    """Engineer- or KP-internally-facing endpoints for piping data into GCS and starting dataflow jobs.
    """

    def ProcessRiskInput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FoundryAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessRiskInput': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessRiskInput,
                    request_deserializer=squareup_dot_foundry_dot_service__pb2.ProcessRiskInputRequest.FromString,
                    response_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.foundry.service.FoundryAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FoundryAdminService(object):
    """Engineer- or KP-internally-facing endpoints for piping data into GCS and starting dataflow jobs.
    """

    @staticmethod
    def ProcessRiskInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.foundry.service.FoundryAdminService/ProcessRiskInput',
            squareup_dot_foundry_dot_service__pb2.ProcessRiskInputRequest.SerializeToString,
            squareup_dot_common_dot_messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class SqlTablesRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    DialectValue = typing___NewType('DialectValue', builtin___int)
    type___DialectValue = DialectValue
    Dialect: _Dialect
    class _Dialect(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[SqlTablesRequest.DialectValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        SNOWFLAKE = typing___cast(SqlTablesRequest.DialectValue, 1)
        MYSQL = typing___cast(SqlTablesRequest.DialectValue, 2)
    SNOWFLAKE = typing___cast(SqlTablesRequest.DialectValue, 1)
    MYSQL = typing___cast(SqlTablesRequest.DialectValue, 2)
    type___Dialect = Dialect

    dialect: type___SqlTablesRequest.DialectValue = ...
    sql: typing___Text = ...

    def __init__(self,
        *,
        dialect : typing___Optional[type___SqlTablesRequest.DialectValue] = None,
        sql : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"dialect",b"dialect",u"sql",b"sql"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"dialect",b"dialect",u"sql",b"sql"]) -> None: ...
type___SqlTablesRequest = SqlTablesRequest

class SqlTablesResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    ResponseCodeValue = typing___NewType('ResponseCodeValue', builtin___int)
    type___ResponseCodeValue = ResponseCodeValue
    ResponseCode: _ResponseCode
    class _ResponseCode(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[SqlTablesResponse.ResponseCodeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        ERROR = typing___cast(SqlTablesResponse.ResponseCodeValue, 1)
        SUCCESS = typing___cast(SqlTablesResponse.ResponseCodeValue, 2)
        UNSUPPORTED = typing___cast(SqlTablesResponse.ResponseCodeValue, 3)
        TIMEOUT = typing___cast(SqlTablesResponse.ResponseCodeValue, 4)
    ERROR = typing___cast(SqlTablesResponse.ResponseCodeValue, 1)
    SUCCESS = typing___cast(SqlTablesResponse.ResponseCodeValue, 2)
    UNSUPPORTED = typing___cast(SqlTablesResponse.ResponseCodeValue, 3)
    TIMEOUT = typing___cast(SqlTablesResponse.ResponseCodeValue, 4)
    type___ResponseCode = ResponseCode

    StatementInstructionValue = typing___NewType('StatementInstructionValue', builtin___int)
    type___StatementInstructionValue = StatementInstructionValue
    StatementInstruction: _StatementInstruction
    class _StatementInstruction(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[SqlTablesResponse.StatementInstructionValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        SELECT = typing___cast(SqlTablesResponse.StatementInstructionValue, 1)
        INSERT = typing___cast(SqlTablesResponse.StatementInstructionValue, 2)
        UPDATE = typing___cast(SqlTablesResponse.StatementInstructionValue, 3)
        UPSERT = typing___cast(SqlTablesResponse.StatementInstructionValue, 4)
        DELETE = typing___cast(SqlTablesResponse.StatementInstructionValue, 5)
        ALTER = typing___cast(SqlTablesResponse.StatementInstructionValue, 6)
        COMMENT = typing___cast(SqlTablesResponse.StatementInstructionValue, 7)
        CREATE = typing___cast(SqlTablesResponse.StatementInstructionValue, 8)
        DROP = typing___cast(SqlTablesResponse.StatementInstructionValue, 9)
        TRUNCATE = typing___cast(SqlTablesResponse.StatementInstructionValue, 10)
        SHOW = typing___cast(SqlTablesResponse.StatementInstructionValue, 11)
        COMMIT = typing___cast(SqlTablesResponse.StatementInstructionValue, 12)
        EXECUTE = typing___cast(SqlTablesResponse.StatementInstructionValue, 13)
        MERGE = typing___cast(SqlTablesResponse.StatementInstructionValue, 14)
        SET = typing___cast(SqlTablesResponse.StatementInstructionValue, 15)
        USE = typing___cast(SqlTablesResponse.StatementInstructionValue, 16)
        DESCRIBE = typing___cast(SqlTablesResponse.StatementInstructionValue, 17)
        EXPLAIN = typing___cast(SqlTablesResponse.StatementInstructionValue, 18)
    SELECT = typing___cast(SqlTablesResponse.StatementInstructionValue, 1)
    INSERT = typing___cast(SqlTablesResponse.StatementInstructionValue, 2)
    UPDATE = typing___cast(SqlTablesResponse.StatementInstructionValue, 3)
    UPSERT = typing___cast(SqlTablesResponse.StatementInstructionValue, 4)
    DELETE = typing___cast(SqlTablesResponse.StatementInstructionValue, 5)
    ALTER = typing___cast(SqlTablesResponse.StatementInstructionValue, 6)
    COMMENT = typing___cast(SqlTablesResponse.StatementInstructionValue, 7)
    CREATE = typing___cast(SqlTablesResponse.StatementInstructionValue, 8)
    DROP = typing___cast(SqlTablesResponse.StatementInstructionValue, 9)
    TRUNCATE = typing___cast(SqlTablesResponse.StatementInstructionValue, 10)
    SHOW = typing___cast(SqlTablesResponse.StatementInstructionValue, 11)
    COMMIT = typing___cast(SqlTablesResponse.StatementInstructionValue, 12)
    EXECUTE = typing___cast(SqlTablesResponse.StatementInstructionValue, 13)
    MERGE = typing___cast(SqlTablesResponse.StatementInstructionValue, 14)
    SET = typing___cast(SqlTablesResponse.StatementInstructionValue, 15)
    USE = typing___cast(SqlTablesResponse.StatementInstructionValue, 16)
    DESCRIBE = typing___cast(SqlTablesResponse.StatementInstructionValue, 17)
    EXPLAIN = typing___cast(SqlTablesResponse.StatementInstructionValue, 18)
    type___StatementInstruction = StatementInstruction

    class Table(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        database_name: typing___Text = ...
        schema_name: typing___Text = ...
        table_name: typing___Text = ...

        def __init__(self,
            *,
            database_name : typing___Optional[typing___Text] = None,
            schema_name : typing___Optional[typing___Text] = None,
            table_name : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"database_name",b"database_name",u"schema_name",b"schema_name",u"table_name",b"table_name"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"database_name",b"database_name",u"schema_name",b"schema_name",u"table_name",b"table_name"]) -> None: ...
    type___Table = Table

    code: type___SqlTablesResponse.ResponseCodeValue = ...
    request_sql: typing___Text = ...
    error_message: typing___Text = ...
    statement_instruction: type___SqlTablesResponse.StatementInstructionValue = ...

    @property
    def tables(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___SqlTablesResponse.Table]: ...

    def __init__(self,
        *,
        code : typing___Optional[type___SqlTablesResponse.ResponseCodeValue] = None,
        request_sql : typing___Optional[typing___Text] = None,
        error_message : typing___Optional[typing___Text] = None,
        statement_instruction : typing___Optional[type___SqlTablesResponse.StatementInstructionValue] = None,
        tables : typing___Optional[typing___Iterable[type___SqlTablesResponse.Table]] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"code",b"code",u"error_message",b"error_message",u"request_sql",b"request_sql",u"statement_instruction",b"statement_instruction"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"code",b"code",u"error_message",b"error_message",u"request_sql",b"request_sql",u"statement_instruction",b"statement_instruction",u"tables",b"tables"]) -> None: ...
type___SqlTablesResponse = SqlTablesResponse

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.legitscriptproxy import service_pb2 as squareup_dot_legitscriptproxy_dot_service__pb2


class LegitScriptProxyServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ScreenMerchant = channel.unary_unary(
                '/squareup.legitscriptproxy.service.LegitScriptProxyService/ScreenMerchant',
                request_serializer=squareup_dot_legitscriptproxy_dot_service__pb2.ScreenMerchantRequest.SerializeToString,
                response_deserializer=squareup_dot_legitscriptproxy_dot_service__pb2.ScreenMerchantResponse.FromString,
                )
        self.FindScreenResult = channel.unary_unary(
                '/squareup.legitscriptproxy.service.LegitScriptProxyService/FindScreenResult',
                request_serializer=squareup_dot_legitscriptproxy_dot_service__pb2.FindScreenResultRequest.SerializeToString,
                response_deserializer=squareup_dot_legitscriptproxy_dot_service__pb2.FindScreenResultResponse.FromString,
                )
        self.ReportAction = channel.unary_unary(
                '/squareup.legitscriptproxy.service.LegitScriptProxyService/ReportAction',
                request_serializer=squareup_dot_legitscriptproxy_dot_service__pb2.ReportActionRequest.SerializeToString,
                response_deserializer=squareup_dot_legitscriptproxy_dot_service__pb2.ReportActionResponse.FromString,
                )


class LegitScriptProxyServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ScreenMerchant(self, request, context):
        """Submits a merchant for screening 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindScreenResult(self, request, context):
        """Fetches Screen Result against a customer 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportAction(self, request, context):
        """Reports an action that agents take on a merchant back to LegitScript. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LegitScriptProxyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ScreenMerchant': grpc.unary_unary_rpc_method_handler(
                    servicer.ScreenMerchant,
                    request_deserializer=squareup_dot_legitscriptproxy_dot_service__pb2.ScreenMerchantRequest.FromString,
                    response_serializer=squareup_dot_legitscriptproxy_dot_service__pb2.ScreenMerchantResponse.SerializeToString,
            ),
            'FindScreenResult': grpc.unary_unary_rpc_method_handler(
                    servicer.FindScreenResult,
                    request_deserializer=squareup_dot_legitscriptproxy_dot_service__pb2.FindScreenResultRequest.FromString,
                    response_serializer=squareup_dot_legitscriptproxy_dot_service__pb2.FindScreenResultResponse.SerializeToString,
            ),
            'ReportAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportAction,
                    request_deserializer=squareup_dot_legitscriptproxy_dot_service__pb2.ReportActionRequest.FromString,
                    response_serializer=squareup_dot_legitscriptproxy_dot_service__pb2.ReportActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.legitscriptproxy.service.LegitScriptProxyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LegitScriptProxyService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ScreenMerchant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.legitscriptproxy.service.LegitScriptProxyService/ScreenMerchant',
            squareup_dot_legitscriptproxy_dot_service__pb2.ScreenMerchantRequest.SerializeToString,
            squareup_dot_legitscriptproxy_dot_service__pb2.ScreenMerchantResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindScreenResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.legitscriptproxy.service.LegitScriptProxyService/FindScreenResult',
            squareup_dot_legitscriptproxy_dot_service__pb2.FindScreenResultRequest.SerializeToString,
            squareup_dot_legitscriptproxy_dot_service__pb2.FindScreenResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.legitscriptproxy.service.LegitScriptProxyService/ReportAction',
            squareup_dot_legitscriptproxy_dot_service__pb2.ReportActionRequest.SerializeToString,
            squareup_dot_legitscriptproxy_dot_service__pb2.ReportActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

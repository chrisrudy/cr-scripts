# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.common import messages_pb2 as squareup_dot_common_dot_messages__pb2
from sq_protos_py.squareup.skeptic import service_pb2 as squareup_dot_skeptic_dot_service__pb2


class SkepticServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BackfillReviewedPayment = channel.unary_unary(
                '/squareup.skeptic.SkepticService/BackfillReviewedPayment',
                request_serializer=squareup_dot_skeptic_dot_service__pb2.BackfillReviewedPaymentRequest.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.BackfillReviewedPaymentResponse.FromString,
                )
        self.ClearSuspicionsAndCloseCases = channel.unary_unary(
                '/squareup.skeptic.SkepticService/ClearSuspicionsAndCloseCases',
                request_serializer=squareup_dot_skeptic_dot_service__pb2.ClearSuspicionsAndCloseCasesRequest.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.ClearSuspicionsAndCloseCasesResponse.FromString,
                )
        self.GetMerchantFrozenBulk = channel.unary_unary(
                '/squareup.skeptic.SkepticService/GetMerchantFrozenBulk',
                request_serializer=squareup_dot_skeptic_dot_service__pb2.GetMerchantFrozenBulkRequest.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.GetMerchantFrozenBulkResponse.FromString,
                )
        self.SuspectHistory = channel.unary_unary(
                '/squareup.skeptic.SkepticService/SuspectHistory',
                request_serializer=squareup_dot_skeptic_dot_service__pb2.SuspectHistoryRequest.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.SuspectHistoryResponse.FromString,
                )
        self.CreateRowo = channel.unary_unary(
                '/squareup.skeptic.SkepticService/CreateRowo',
                request_serializer=squareup_dot_skeptic_dot_service__pb2.CreateRowoRequest.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.CreateRowoResponse.FromString,
                )
        self.GetRowo = channel.unary_unary(
                '/squareup.skeptic.SkepticService/GetRowo',
                request_serializer=squareup_dot_skeptic_dot_service__pb2.GetRowoRequest.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.GetRowoResponse.FromString,
                )
        self.GetRowoScoringRecommendation = channel.unary_unary(
                '/squareup.skeptic.SkepticService/GetRowoScoringRecommendation',
                request_serializer=squareup_dot_skeptic_dot_service__pb2.GetRowoScoringRecommendationRequest.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.GetRowoScoringRecommendationResponse.FromString,
                )
        self.GetSuspicionHistory = channel.unary_unary(
                '/squareup.skeptic.SkepticService/GetSuspicionHistory',
                request_serializer=squareup_dot_skeptic_dot_service__pb2.GetSuspicionHistoryRequest.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.GetSuspicionHistoryResponse.FromString,
                )
        self.ReceiveBuyerFraudEmailAnswerAction = channel.unary_unary(
                '/squareup.skeptic.SkepticService/ReceiveBuyerFraudEmailAnswerAction',
                request_serializer=squareup_dot_skeptic_dot_service__pb2.BuyerFraudFeedbackRequest.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.BuyerFraudFeedbackResponse.FromString,
                )
        self.ListConcerns = channel.unary_unary(
                '/squareup.skeptic.SkepticService/ListConcerns',
                request_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.ListConcernsResponse.FromString,
                )
        self.GetAutoClearCandidates = channel.unary_unary(
                '/squareup.skeptic.SkepticService/GetAutoClearCandidates',
                request_serializer=squareup_dot_skeptic_dot_service__pb2.GetAutoClearCandidatesRequest.SerializeToString,
                response_deserializer=squareup_dot_skeptic_dot_service__pb2.GetAutoClearCandidatesResponse.FromString,
                )


class SkepticServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BackfillReviewedPayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearSuspicionsAndCloseCases(self, request, context):
        """*
        This api is to be used for a situation where a bad rule has flagged a lot of payments.
        It is an async api that enqueues a job in the jobqueue to run immediately. The job will
        (1) Clear the suspicion generated by the input model from internal suspicions (mark is_reviewed = true)
        (2) It will publish the reviewed payment feed entry if there are no more unreviewed suspicions for that payment
        (3) It will also close the case if after removing the suspicion from the input model there are no other suspicions
        linked to the case.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMerchantFrozenBulk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SuspectHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRowo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRowo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRowoScoringRecommendation(self, request, context):
        """*
        Store rowos and get a freeze recommendation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSuspicionHistory(self, request, context):
        """*
        Retrieves internal suspicions for given entity
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveBuyerFraudEmailAnswerAction(self, request, context):
        """*
        Processes buyer fraud email response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConcerns(self, request, context):
        """*
        Enumerates the concerns Skeptic knows about to help enforce deploy order between skeptic and
        riskarbiter.

        The deploy order is important because Riskarbiter generating data skeptic does not understand
        can very easily result in bad data in skeptic internal_suspicions and overcasing visible to
        operations.

        This should be a temporary provision, until riskarbiter removes the dependency on Concern with
        the RA2020 "Hooks" proposal. See http://go/ra2020 for details.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAutoClearCandidates(self, request, context):
        """*
        For AutoClear cases where operations is falling behind on caseload and they need a set of candidates for
        autoclearing below a pending_balance threshold
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SkepticServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BackfillReviewedPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.BackfillReviewedPayment,
                    request_deserializer=squareup_dot_skeptic_dot_service__pb2.BackfillReviewedPaymentRequest.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.BackfillReviewedPaymentResponse.SerializeToString,
            ),
            'ClearSuspicionsAndCloseCases': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearSuspicionsAndCloseCases,
                    request_deserializer=squareup_dot_skeptic_dot_service__pb2.ClearSuspicionsAndCloseCasesRequest.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.ClearSuspicionsAndCloseCasesResponse.SerializeToString,
            ),
            'GetMerchantFrozenBulk': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMerchantFrozenBulk,
                    request_deserializer=squareup_dot_skeptic_dot_service__pb2.GetMerchantFrozenBulkRequest.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.GetMerchantFrozenBulkResponse.SerializeToString,
            ),
            'SuspectHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.SuspectHistory,
                    request_deserializer=squareup_dot_skeptic_dot_service__pb2.SuspectHistoryRequest.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.SuspectHistoryResponse.SerializeToString,
            ),
            'CreateRowo': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRowo,
                    request_deserializer=squareup_dot_skeptic_dot_service__pb2.CreateRowoRequest.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.CreateRowoResponse.SerializeToString,
            ),
            'GetRowo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRowo,
                    request_deserializer=squareup_dot_skeptic_dot_service__pb2.GetRowoRequest.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.GetRowoResponse.SerializeToString,
            ),
            'GetRowoScoringRecommendation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRowoScoringRecommendation,
                    request_deserializer=squareup_dot_skeptic_dot_service__pb2.GetRowoScoringRecommendationRequest.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.GetRowoScoringRecommendationResponse.SerializeToString,
            ),
            'GetSuspicionHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuspicionHistory,
                    request_deserializer=squareup_dot_skeptic_dot_service__pb2.GetSuspicionHistoryRequest.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.GetSuspicionHistoryResponse.SerializeToString,
            ),
            'ReceiveBuyerFraudEmailAnswerAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveBuyerFraudEmailAnswerAction,
                    request_deserializer=squareup_dot_skeptic_dot_service__pb2.BuyerFraudFeedbackRequest.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.BuyerFraudFeedbackResponse.SerializeToString,
            ),
            'ListConcerns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConcerns,
                    request_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.ListConcernsResponse.SerializeToString,
            ),
            'GetAutoClearCandidates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAutoClearCandidates,
                    request_deserializer=squareup_dot_skeptic_dot_service__pb2.GetAutoClearCandidatesRequest.FromString,
                    response_serializer=squareup_dot_skeptic_dot_service__pb2.GetAutoClearCandidatesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.skeptic.SkepticService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SkepticService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BackfillReviewedPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/BackfillReviewedPayment',
            squareup_dot_skeptic_dot_service__pb2.BackfillReviewedPaymentRequest.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.BackfillReviewedPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearSuspicionsAndCloseCases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/ClearSuspicionsAndCloseCases',
            squareup_dot_skeptic_dot_service__pb2.ClearSuspicionsAndCloseCasesRequest.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.ClearSuspicionsAndCloseCasesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMerchantFrozenBulk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/GetMerchantFrozenBulk',
            squareup_dot_skeptic_dot_service__pb2.GetMerchantFrozenBulkRequest.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.GetMerchantFrozenBulkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SuspectHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/SuspectHistory',
            squareup_dot_skeptic_dot_service__pb2.SuspectHistoryRequest.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.SuspectHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRowo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/CreateRowo',
            squareup_dot_skeptic_dot_service__pb2.CreateRowoRequest.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.CreateRowoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRowo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/GetRowo',
            squareup_dot_skeptic_dot_service__pb2.GetRowoRequest.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.GetRowoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRowoScoringRecommendation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/GetRowoScoringRecommendation',
            squareup_dot_skeptic_dot_service__pb2.GetRowoScoringRecommendationRequest.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.GetRowoScoringRecommendationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSuspicionHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/GetSuspicionHistory',
            squareup_dot_skeptic_dot_service__pb2.GetSuspicionHistoryRequest.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.GetSuspicionHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveBuyerFraudEmailAnswerAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/ReceiveBuyerFraudEmailAnswerAction',
            squareup_dot_skeptic_dot_service__pb2.BuyerFraudFeedbackRequest.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.BuyerFraudFeedbackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListConcerns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/ListConcerns',
            squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.ListConcernsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAutoClearCandidates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.skeptic.SkepticService/GetAutoClearCandidates',
            squareup_dot_skeptic_dot_service__pb2.GetAutoClearCandidatesRequest.SerializeToString,
            squareup_dot_skeptic_dot_service__pb2.GetAutoClearCandidatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

ActivationStateValue = typing___NewType('ActivationStateValue', builtin___int)
type___ActivationStateValue = ActivationStateValue
ActivationState: _ActivationState
class _ActivationState(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[ActivationStateValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    NOT_ACTIVE = typing___cast(ActivationStateValue, 0)
    PROVISIONAL = typing___cast(ActivationStateValue, 1)
    OPTIMISTIC = typing___cast(ActivationStateValue, 2)
    ACTIVATED = typing___cast(ActivationStateValue, 3)
    DEACTIVATED = typing___cast(ActivationStateValue, 4)
    ALMOST = typing___cast(ActivationStateValue, 5)
NOT_ACTIVE = typing___cast(ActivationStateValue, 0)
PROVISIONAL = typing___cast(ActivationStateValue, 1)
OPTIMISTIC = typing___cast(ActivationStateValue, 2)
ACTIVATED = typing___cast(ActivationStateValue, 3)
DEACTIVATED = typing___cast(ActivationStateValue, 4)
ALMOST = typing___cast(ActivationStateValue, 5)
type___ActivationState = ActivationState

class ActivationStateWithRequirements(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    state: type___ActivationStateValue = ...

    @property
    def requirements(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___RequirementAndResult]: ...

    def __init__(self,
        *,
        state : typing___Optional[type___ActivationStateValue] = None,
        requirements : typing___Optional[typing___Iterable[type___RequirementAndResult]] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"state",b"state"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"requirements",b"requirements",u"state",b"state"]) -> None: ...
type___ActivationStateWithRequirements = ActivationStateWithRequirements

class RequirementAndResult(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    requirement_id: typing___Text = ...
    met: builtin___bool = ...

    def __init__(self,
        *,
        requirement_id : typing___Optional[typing___Text] = None,
        met : typing___Optional[builtin___bool] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"met",b"met",u"requirement_id",b"requirement_id"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"met",b"met",u"requirement_id",b"requirement_id"]) -> None: ...
type___RequirementAndResult = RequirementAndResult

class Activation(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    unit_token: typing___Text = ...
    cohort: typing___Text = ...
    activation_state: type___ActivationStateValue = ...
    version: builtin___int = ...

    def __init__(self,
        *,
        unit_token : typing___Optional[typing___Text] = None,
        cohort : typing___Optional[typing___Text] = None,
        activation_state : typing___Optional[type___ActivationStateValue] = None,
        version : typing___Optional[builtin___int] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"activation_state",b"activation_state",u"cohort",b"cohort",u"unit_token",b"unit_token",u"version",b"version"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"activation_state",b"activation_state",u"cohort",b"cohort",u"unit_token",b"unit_token",u"version",b"version"]) -> None: ...
type___Activation = Activation

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.haas import service_pb2 as squareup_dot_haas_dot_service__pb2


class HaasServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ComputeMac = channel.unary_unary(
                '/squareup.haas.service.HaasService/ComputeMac',
                request_serializer=squareup_dot_haas_dot_service__pb2.ComputeMacRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.ComputeMacResponse.FromString,
                )
        self.Encrypt = channel.unary_unary(
                '/squareup.haas.service.HaasService/Encrypt',
                request_serializer=squareup_dot_haas_dot_service__pb2.EncryptRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.EncryptResponse.FromString,
                )
        self.Decrypt = channel.unary_unary(
                '/squareup.haas.service.HaasService/Decrypt',
                request_serializer=squareup_dot_haas_dot_service__pb2.DecryptRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.DecryptResponse.FromString,
                )
        self.DecryptCms = channel.unary_unary(
                '/squareup.haas.service.HaasService/DecryptCms',
                request_serializer=squareup_dot_haas_dot_service__pb2.DecryptCmsRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.DecryptCmsResponse.FromString,
                )
        self.Sign = channel.unary_unary(
                '/squareup.haas.service.HaasService/Sign',
                request_serializer=squareup_dot_haas_dot_service__pb2.SignRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.SignResponse.FromString,
                )
        self.DiffieHellman = channel.unary_unary(
                '/squareup.haas.service.HaasService/DiffieHellman',
                request_serializer=squareup_dot_haas_dot_service__pb2.DiffieHellmanRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.DiffieHellmanResponse.FromString,
                )
        self.CreateKeyPairs = channel.unary_unary(
                '/squareup.haas.service.HaasService/CreateKeyPairs',
                request_serializer=squareup_dot_haas_dot_service__pb2.CreateKeyPairsRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.CreateKeyPairsResponse.FromString,
                )
        self.GetPublicKey = channel.unary_unary(
                '/squareup.haas.service.HaasService/GetPublicKey',
                request_serializer=squareup_dot_haas_dot_service__pb2.GetPublicKeyRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.GetPublicKeyResponse.FromString,
                )
        self.Unwrap = channel.unary_unary(
                '/squareup.haas.service.HaasService/Unwrap',
                request_serializer=squareup_dot_haas_dot_service__pb2.UnwrapRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.UnwrapResponse.FromString,
                )
        self.QualcommAttest = channel.unary_unary(
                '/squareup.haas.service.HaasService/QualcommAttest',
                request_serializer=squareup_dot_haas_dot_service__pb2.QualcommAttestationRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.QualcommAttestationResponse.FromString,
                )
        self.GenerateFirmwareVerificationKey = channel.unary_unary(
                '/squareup.haas.service.HaasService/GenerateFirmwareVerificationKey',
                request_serializer=squareup_dot_haas_dot_service__pb2.GenerateFirmwareVerificationKeyRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.GenerateFirmwareVerificationKeyResponse.FromString,
                )


class HaasServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ComputeMac(self, request, context):
        """*
        Compute a MAC with a specific key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Encrypt(self, request, context):
        """*
        Encrypt and decrypt using symmetric cipher with specific keys.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Decrypt(self, request, context):
        """*
        Decrypt using symmetric or asymmetric cipher with specific keys.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptCms(self, request, context):
        """*
        DecryptCms using asymmetric cipher with specific keys.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sign(self, request, context):
        """*
        Sign using an asymmetric cipher with specific keys.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiffieHellman(self, request, context):
        """*
        Diffie-Hellman key agreement using a static private key and ephemeral counter-party public key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateKeyPairs(self, request, context):
        """*
        Create one or more key pairs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPublicKey(self, request, context):
        """*
        Retrieve public key portion of a key pair.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unwrap(self, request, context):
        """*
        Unwrap a key using RsaOaep. The underlying key is typically an AES key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QualcommAttest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateFirmwareVerificationKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HaasServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ComputeMac': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeMac,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.ComputeMacRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.ComputeMacResponse.SerializeToString,
            ),
            'Encrypt': grpc.unary_unary_rpc_method_handler(
                    servicer.Encrypt,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.EncryptRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.EncryptResponse.SerializeToString,
            ),
            'Decrypt': grpc.unary_unary_rpc_method_handler(
                    servicer.Decrypt,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.DecryptRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.DecryptResponse.SerializeToString,
            ),
            'DecryptCms': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptCms,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.DecryptCmsRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.DecryptCmsResponse.SerializeToString,
            ),
            'Sign': grpc.unary_unary_rpc_method_handler(
                    servicer.Sign,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.SignRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.SignResponse.SerializeToString,
            ),
            'DiffieHellman': grpc.unary_unary_rpc_method_handler(
                    servicer.DiffieHellman,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.DiffieHellmanRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.DiffieHellmanResponse.SerializeToString,
            ),
            'CreateKeyPairs': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKeyPairs,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.CreateKeyPairsRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.CreateKeyPairsResponse.SerializeToString,
            ),
            'GetPublicKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPublicKey,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.GetPublicKeyRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.GetPublicKeyResponse.SerializeToString,
            ),
            'Unwrap': grpc.unary_unary_rpc_method_handler(
                    servicer.Unwrap,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.UnwrapRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.UnwrapResponse.SerializeToString,
            ),
            'QualcommAttest': grpc.unary_unary_rpc_method_handler(
                    servicer.QualcommAttest,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.QualcommAttestationRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.QualcommAttestationResponse.SerializeToString,
            ),
            'GenerateFirmwareVerificationKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateFirmwareVerificationKey,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.GenerateFirmwareVerificationKeyRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.GenerateFirmwareVerificationKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.haas.service.HaasService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HaasService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ComputeMac(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/ComputeMac',
            squareup_dot_haas_dot_service__pb2.ComputeMacRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.ComputeMacResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Encrypt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/Encrypt',
            squareup_dot_haas_dot_service__pb2.EncryptRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.EncryptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Decrypt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/Decrypt',
            squareup_dot_haas_dot_service__pb2.DecryptRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.DecryptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecryptCms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/DecryptCms',
            squareup_dot_haas_dot_service__pb2.DecryptCmsRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.DecryptCmsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Sign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/Sign',
            squareup_dot_haas_dot_service__pb2.SignRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.SignResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiffieHellman(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/DiffieHellman',
            squareup_dot_haas_dot_service__pb2.DiffieHellmanRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.DiffieHellmanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateKeyPairs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/CreateKeyPairs',
            squareup_dot_haas_dot_service__pb2.CreateKeyPairsRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.CreateKeyPairsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPublicKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/GetPublicKey',
            squareup_dot_haas_dot_service__pb2.GetPublicKeyRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.GetPublicKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unwrap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/Unwrap',
            squareup_dot_haas_dot_service__pb2.UnwrapRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.UnwrapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QualcommAttest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/QualcommAttest',
            squareup_dot_haas_dot_service__pb2.QualcommAttestationRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.QualcommAttestationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateFirmwareVerificationKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.HaasService/GenerateFirmwareVerificationKey',
            squareup_dot_haas_dot_service__pb2.GenerateFirmwareVerificationKeyRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.GenerateFirmwareVerificationKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AppleMerchantKeysServiceStub(object):
    """*
    Apple merchant keys derivation service.

    Related documentation:
    - https://docs.google.com/document/d/1p5pZb3OwthAtXIz7N_ujaZPdG-wt2BqFav9LaSR0HMI
    - https://docs.google.com/document/d/1ntoEiaO6M58xAlVcU07VBhJ3bBxE9URTmAGtmAqL-sA
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DerivePublicKey = channel.unary_unary(
                '/squareup.haas.service.AppleMerchantKeysService/DerivePublicKey',
                request_serializer=squareup_dot_haas_dot_service__pb2.DerivePublicKeyRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.DerivePublicKeyResponse.FromString,
                )
        self.DeriveSharedSecret = channel.unary_unary(
                '/squareup.haas.service.AppleMerchantKeysService/DeriveSharedSecret',
                request_serializer=squareup_dot_haas_dot_service__pb2.DeriveSharedSecretRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.DeriveSharedSecretResponse.FromString,
                )


class AppleMerchantKeysServiceServicer(object):
    """*
    Apple merchant keys derivation service.

    Related documentation:
    - https://docs.google.com/document/d/1p5pZb3OwthAtXIz7N_ujaZPdG-wt2BqFav9LaSR0HMI
    - https://docs.google.com/document/d/1ntoEiaO6M58xAlVcU07VBhJ3bBxE9URTmAGtmAqL-sA
    """

    def DerivePublicKey(self, request, context):
        """*
        Derive public key (in CSR format) for a Square merchant wanting to use Apple Pay.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeriveSharedSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AppleMerchantKeysServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DerivePublicKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DerivePublicKey,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.DerivePublicKeyRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.DerivePublicKeyResponse.SerializeToString,
            ),
            'DeriveSharedSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.DeriveSharedSecret,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.DeriveSharedSecretRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.DeriveSharedSecretResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.haas.service.AppleMerchantKeysService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AppleMerchantKeysService(object):
    """*
    Apple merchant keys derivation service.

    Related documentation:
    - https://docs.google.com/document/d/1p5pZb3OwthAtXIz7N_ujaZPdG-wt2BqFav9LaSR0HMI
    - https://docs.google.com/document/d/1ntoEiaO6M58xAlVcU07VBhJ3bBxE9URTmAGtmAqL-sA
    """

    @staticmethod
    def DerivePublicKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.AppleMerchantKeysService/DerivePublicKey',
            squareup_dot_haas_dot_service__pb2.DerivePublicKeyRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.DerivePublicKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeriveSharedSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.AppleMerchantKeysService/DeriveSharedSecret',
            squareup_dot_haas_dot_service__pb2.DeriveSharedSecretRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.DeriveSharedSecretResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CodeTalkerServiceStub(object):
    """*
    CodeTalker service implements raw encrypt/decrypt operations for the CodeTalker protocol.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EncryptCodeTalker = channel.unary_unary(
                '/squareup.haas.service.CodeTalkerService/EncryptCodeTalker',
                request_serializer=squareup_dot_haas_dot_service__pb2.EncryptCodeTalkerRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.EncryptCodeTalkerResponse.FromString,
                )
        self.DecryptCodeTalker = channel.unary_unary(
                '/squareup.haas.service.CodeTalkerService/DecryptCodeTalker',
                request_serializer=squareup_dot_haas_dot_service__pb2.DecryptCodeTalkerRequest.SerializeToString,
                response_deserializer=squareup_dot_haas_dot_service__pb2.DecryptCodeTalkerResponse.FromString,
                )


class CodeTalkerServiceServicer(object):
    """*
    CodeTalker service implements raw encrypt/decrypt operations for the CodeTalker protocol.
    """

    def EncryptCodeTalker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptCodeTalker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CodeTalkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EncryptCodeTalker': grpc.unary_unary_rpc_method_handler(
                    servicer.EncryptCodeTalker,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.EncryptCodeTalkerRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.EncryptCodeTalkerResponse.SerializeToString,
            ),
            'DecryptCodeTalker': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptCodeTalker,
                    request_deserializer=squareup_dot_haas_dot_service__pb2.DecryptCodeTalkerRequest.FromString,
                    response_serializer=squareup_dot_haas_dot_service__pb2.DecryptCodeTalkerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.haas.service.CodeTalkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CodeTalkerService(object):
    """*
    CodeTalker service implements raw encrypt/decrypt operations for the CodeTalker protocol.
    """

    @staticmethod
    def EncryptCodeTalker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.CodeTalkerService/EncryptCodeTalker',
            squareup_dot_haas_dot_service__pb2.EncryptCodeTalkerRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.EncryptCodeTalkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecryptCodeTalker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.haas.service.CodeTalkerService/DecryptCodeTalker',
            squareup_dot_haas_dot_service__pb2.DecryptCodeTalkerRequest.SerializeToString,
            squareup_dot_haas_dot_service__pb2.DecryptCodeTalkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.maestro import service_pb2 as squareup_dot_maestro_dot_service__pb2


class MaestroWorkflowExecutionServiceStub(object):
    """*
    Service for starting and querying workflow executions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartExecution = channel.unary_unary(
                '/squareup.maestro.service.MaestroWorkflowExecutionService/StartExecution',
                request_serializer=squareup_dot_maestro_dot_service__pb2.StartWorkflowExecutionRequest.SerializeToString,
                response_deserializer=squareup_dot_maestro_dot_service__pb2.StartWorkflowExecutionResponse.FromString,
                )
        self.DescribeExecution = channel.unary_unary(
                '/squareup.maestro.service.MaestroWorkflowExecutionService/DescribeExecution',
                request_serializer=squareup_dot_maestro_dot_service__pb2.DescribeWorkflowExecutionRequest.SerializeToString,
                response_deserializer=squareup_dot_maestro_dot_service__pb2.DescribeWorkflowExecutionResponse.FromString,
                )
        self.StartSyncExecution = channel.unary_unary(
                '/squareup.maestro.service.MaestroWorkflowExecutionService/StartSyncExecution',
                request_serializer=squareup_dot_maestro_dot_service__pb2.StartSyncWorkflowExecutionRequest.SerializeToString,
                response_deserializer=squareup_dot_maestro_dot_service__pb2.StartSyncWorkflowExecutionResponse.FromString,
                )


class MaestroWorkflowExecutionServiceServicer(object):
    """*
    Service for starting and querying workflow executions
    """

    def StartExecution(self, request, context):
        """*
        Asynchronously start a new workflow execution. This will immediately return with the execution ID,
        which can then be used with {@link DescribeExecution}.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeExecution(self, request, context):
        """*
        Get the status and any other available details for an existing workflow execution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartSyncExecution(self, request, context):
        """*
        Synchronously start a new workflow execution. This will block and wait for the workflow to finish
        executing if possible. However, if the execution is taking too long for the RPC timeout, it will
        attempt to return the execution ID so that the caller may call {@link DescribeExecution}.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MaestroWorkflowExecutionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.StartExecution,
                    request_deserializer=squareup_dot_maestro_dot_service__pb2.StartWorkflowExecutionRequest.FromString,
                    response_serializer=squareup_dot_maestro_dot_service__pb2.StartWorkflowExecutionResponse.SerializeToString,
            ),
            'DescribeExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeExecution,
                    request_deserializer=squareup_dot_maestro_dot_service__pb2.DescribeWorkflowExecutionRequest.FromString,
                    response_serializer=squareup_dot_maestro_dot_service__pb2.DescribeWorkflowExecutionResponse.SerializeToString,
            ),
            'StartSyncExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSyncExecution,
                    request_deserializer=squareup_dot_maestro_dot_service__pb2.StartSyncWorkflowExecutionRequest.FromString,
                    response_serializer=squareup_dot_maestro_dot_service__pb2.StartSyncWorkflowExecutionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.maestro.service.MaestroWorkflowExecutionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MaestroWorkflowExecutionService(object):
    """*
    Service for starting and querying workflow executions
    """

    @staticmethod
    def StartExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.maestro.service.MaestroWorkflowExecutionService/StartExecution',
            squareup_dot_maestro_dot_service__pb2.StartWorkflowExecutionRequest.SerializeToString,
            squareup_dot_maestro_dot_service__pb2.StartWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.maestro.service.MaestroWorkflowExecutionService/DescribeExecution',
            squareup_dot_maestro_dot_service__pb2.DescribeWorkflowExecutionRequest.SerializeToString,
            squareup_dot_maestro_dot_service__pb2.DescribeWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartSyncExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.maestro.service.MaestroWorkflowExecutionService/StartSyncExecution',
            squareup_dot_maestro_dot_service__pb2.StartSyncWorkflowExecutionRequest.SerializeToString,
            squareup_dot_maestro_dot_service__pb2.StartSyncWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.lescreener.service.admin import admin_service_pb2 as squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2


class LegalEntitiesScreeningAdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateLegalEntityScreeningStatus = channel.unary_unary(
                '/squareup.lescreener.service.admin.LegalEntitiesScreeningAdminService/UpdateLegalEntityScreeningStatus',
                request_serializer=squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.UpdateLegalEntityScreeningStatusRequest.SerializeToString,
                response_deserializer=squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.UpdateLegalEntityScreeningStatusResponse.FromString,
                )
        self.ConvertLegalEntityToCustomer = channel.unary_unary(
                '/squareup.lescreener.service.admin.LegalEntitiesScreeningAdminService/ConvertLegalEntityToCustomer',
                request_serializer=squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.ConvertLegalEntityToCustomerRequest.SerializeToString,
                response_deserializer=squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.ConvertLegalEntityToCustomerResponse.FromString,
                )


class LegalEntitiesScreeningAdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdateLegalEntityScreeningStatus(self, request, context):
        """Force an update to the screening status for a Legal Entity. Synchronous call. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertLegalEntityToCustomer(self, request, context):
        """
        Convert a Legal Entity structure to its multiple Customer representations for inspection.
        There should be one Customer per Individual node in the Legal Entity structure, with the
        business information replicated across all of them.

        Does not cause any side effects.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LegalEntitiesScreeningAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateLegalEntityScreeningStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLegalEntityScreeningStatus,
                    request_deserializer=squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.UpdateLegalEntityScreeningStatusRequest.FromString,
                    response_serializer=squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.UpdateLegalEntityScreeningStatusResponse.SerializeToString,
            ),
            'ConvertLegalEntityToCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertLegalEntityToCustomer,
                    request_deserializer=squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.ConvertLegalEntityToCustomerRequest.FromString,
                    response_serializer=squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.ConvertLegalEntityToCustomerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.lescreener.service.admin.LegalEntitiesScreeningAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LegalEntitiesScreeningAdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdateLegalEntityScreeningStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lescreener.service.admin.LegalEntitiesScreeningAdminService/UpdateLegalEntityScreeningStatus',
            squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.UpdateLegalEntityScreeningStatusRequest.SerializeToString,
            squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.UpdateLegalEntityScreeningStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertLegalEntityToCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.lescreener.service.admin.LegalEntitiesScreeningAdminService/ConvertLegalEntityToCustomer',
            squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.ConvertLegalEntityToCustomerRequest.SerializeToString,
            squareup_dot_lescreener_dot_service_dot_admin_dot_admin__service__pb2.ConvertLegalEntityToCustomerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

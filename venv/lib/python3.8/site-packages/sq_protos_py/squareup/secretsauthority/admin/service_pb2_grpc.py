# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.secretsauthority.admin import service_pb2 as squareup_dot_secretsauthority_dot_admin_dot_service__pb2


class AdminServiceStub(object):
    """AdminService provides access to ad-hoc operations that might be needed for secinfra oncall tasks.
    The API is not guaranteed to be stable, and is primarily meant for use in the admin dashboard or
    via scripts calling the HTTP-RPC gateway interface via beyond-curl
    Other applications should not use these RPCs.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReissueS2S = channel.unary_unary(
                '/squareup.secretsauthority.admin.AdminService/ReissueS2S',
                request_serializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.ReissueS2SRequest.SerializeToString,
                response_deserializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.ReissueS2SResponse.FromString,
                )
        self.GenerateToken = channel.unary_unary(
                '/squareup.secretsauthority.admin.AdminService/GenerateToken',
                request_serializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.GenerateTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.GenerateTokenResponse.FromString,
                )
        self.RegisterApp = channel.unary_unary(
                '/squareup.secretsauthority.admin.AdminService/RegisterApp',
                request_serializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RegisterAppRequest.SerializeToString,
                response_deserializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RegisterAppResponse.FromString,
                )
        self.RemoveApp = channel.unary_unary(
                '/squareup.secretsauthority.admin.AdminService/RemoveApp',
                request_serializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RemoveAppRequest.SerializeToString,
                response_deserializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RemoveAppResponse.FromString,
                )


class AdminServiceServicer(object):
    """AdminService provides access to ad-hoc operations that might be needed for secinfra oncall tasks.
    The API is not guaranteed to be stable, and is primarily meant for use in the admin dashboard or
    via scripts calling the HTTP-RPC gateway interface via beyond-curl
    Other applications should not use these RPCs.
    """

    def ReissueS2S(self, request, context):
        """ReissueS2S replaces an existing S2S certificate with a new one
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateToken(self, request, context):
        """CreateSpireJoinToken returns a SPIRE join token without running the deploy or provisioning flow
        Can be used to manually re-bootstrap a spire-agent (eg, if its SVID expires)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterApp(self, request, context):
        """RegisterApp creates a registration entry in SPIRE for an app for given host
        -- essentially it creates a SPIFFE ID tied to a given SPIRE agent's SPIFFE ID
        Can be used to manually create a SPIFFE ID for a given app (e.g. if deploy flow failed)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveApp(self, request, context):
        """RemoveApp removes all registration entires in SPIRE for an app for given host
        -- essentially it removes all SPIFFE IDs tied to a given SPIRE agent's SPIFFE ID
        Can be used to manually remove a SPIFFE ID for a given app (e.g. if app uninstall flow failed)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReissueS2S': grpc.unary_unary_rpc_method_handler(
                    servicer.ReissueS2S,
                    request_deserializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.ReissueS2SRequest.FromString,
                    response_serializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.ReissueS2SResponse.SerializeToString,
            ),
            'GenerateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateToken,
                    request_deserializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.GenerateTokenRequest.FromString,
                    response_serializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.GenerateTokenResponse.SerializeToString,
            ),
            'RegisterApp': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterApp,
                    request_deserializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RegisterAppRequest.FromString,
                    response_serializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RegisterAppResponse.SerializeToString,
            ),
            'RemoveApp': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveApp,
                    request_deserializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RemoveAppRequest.FromString,
                    response_serializer=squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RemoveAppResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.secretsauthority.admin.AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminService(object):
    """AdminService provides access to ad-hoc operations that might be needed for secinfra oncall tasks.
    The API is not guaranteed to be stable, and is primarily meant for use in the admin dashboard or
    via scripts calling the HTTP-RPC gateway interface via beyond-curl
    Other applications should not use these RPCs.
    """

    @staticmethod
    def ReissueS2S(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.secretsauthority.admin.AdminService/ReissueS2S',
            squareup_dot_secretsauthority_dot_admin_dot_service__pb2.ReissueS2SRequest.SerializeToString,
            squareup_dot_secretsauthority_dot_admin_dot_service__pb2.ReissueS2SResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.secretsauthority.admin.AdminService/GenerateToken',
            squareup_dot_secretsauthority_dot_admin_dot_service__pb2.GenerateTokenRequest.SerializeToString,
            squareup_dot_secretsauthority_dot_admin_dot_service__pb2.GenerateTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.secretsauthority.admin.AdminService/RegisterApp',
            squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RegisterAppRequest.SerializeToString,
            squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RegisterAppResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.secretsauthority.admin.AdminService/RemoveApp',
            squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RemoveAppRequest.SerializeToString,
            squareup_dot_secretsauthority_dot_admin_dot_service__pb2.RemoveAppResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Entry(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class Owner(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        ldap: typing___Text = ...
        registry_role: typing___Text = ...

        def __init__(self,
            *,
            ldap : typing___Optional[typing___Text] = None,
            registry_role : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"ldap",b"ldap",u"owner",b"owner",u"registry_role",b"registry_role"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"ldap",b"ldap",u"owner",b"owner",u"registry_role",b"registry_role"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions___Literal[u"owner",b"owner"]) -> typing_extensions___Literal["ldap","registry_role"]: ...
    type___Owner = Owner

    pan_prefix: typing___Text = ...
    length: builtin___int = ...
    comment: typing___Text = ...

    @property
    def owner(self) -> type___Entry.Owner: ...

    def __init__(self,
        *,
        owner : typing___Optional[type___Entry.Owner] = None,
        pan_prefix : typing___Optional[typing___Text] = None,
        length : typing___Optional[builtin___int] = None,
        comment : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"comment",b"comment",u"length",b"length",u"owner",b"owner",u"pan_prefix",b"pan_prefix"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"comment",b"comment",u"length",b"length",u"owner",b"owner",u"pan_prefix",b"pan_prefix"]) -> None: ...
type___Entry = Entry

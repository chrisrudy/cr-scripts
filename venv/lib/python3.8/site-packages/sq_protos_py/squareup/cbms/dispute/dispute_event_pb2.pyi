# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FieldDescriptor as google___protobuf___descriptor___FieldDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.cbms.dispute.common_pb2 import (
    ResolutionValue as squareup___cbms___dispute___common_pb2___ResolutionValue,
)

from sq_protos_py.squareup.cbms.dispute.dispute_reason_pb2 import (
    DisputeReason as squareup___cbms___dispute___dispute_reason_pb2___DisputeReason,
)

from sq_protos_py.squareup.cbms.dispute.internal_pb2 import (
    Dispute as squareup___cbms___dispute___internal_pb2___Dispute,
)

from sq_protos_py.squareup.common.currency_pb2 import (
    Money as squareup___common___currency_pb2___Money,
)

from sq_protos_py.squareup.common.entry_method_pb2 import (
    PayWithSquareEntryMethodValue as squareup___common___entry_method_pb2___PayWithSquareEntryMethodValue,
)

from sq_protos_py.squareup.common.time_pb2 import (
    DateTime as squareup___common___time_pb2___DateTime,
    YearMonthDay as squareup___common___time_pb2___YearMonthDay,
)

from typing import (
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class DisputeEvent(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    DisputeTypeValue = typing___NewType('DisputeTypeValue', builtin___int)
    type___DisputeTypeValue = DisputeTypeValue
    DisputeType: _DisputeType
    class _DisputeType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[DisputeEvent.DisputeTypeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(DisputeEvent.DisputeTypeValue, 0)
        CHARGEBACK = typing___cast(DisputeEvent.DisputeTypeValue, 1)
        CHARGEBACK_FROM_INQUIRY = typing___cast(DisputeEvent.DisputeTypeValue, 2)
        INQUIRY = typing___cast(DisputeEvent.DisputeTypeValue, 3)
        RETRIEVAL = typing___cast(DisputeEvent.DisputeTypeValue, 4)
        UPFRONT_CHARGEBACK = typing___cast(DisputeEvent.DisputeTypeValue, 5)
    UNKNOWN = typing___cast(DisputeEvent.DisputeTypeValue, 0)
    CHARGEBACK = typing___cast(DisputeEvent.DisputeTypeValue, 1)
    CHARGEBACK_FROM_INQUIRY = typing___cast(DisputeEvent.DisputeTypeValue, 2)
    INQUIRY = typing___cast(DisputeEvent.DisputeTypeValue, 3)
    RETRIEVAL = typing___cast(DisputeEvent.DisputeTypeValue, 4)
    UPFRONT_CHARGEBACK = typing___cast(DisputeEvent.DisputeTypeValue, 5)
    type___DisputeType = DisputeType

    dispute_event_token: typing___Text = ...
    payment_token: typing___Text = ...
    user_token: typing___Text = ...
    sequence_number: typing___Text = ...
    merchant_order_number: typing___Text = ...
    card_number_fidelius_token: typing___Text = ...
    card_bin: typing___Text = ...
    dispute_type: type___DisputeEvent.DisputeTypeValue = ...
    protection_state: squareup___cbms___dispute___internal_pb2___Dispute.ProtectionStateValue = ...
    documentation_state: squareup___cbms___dispute___internal_pb2___Dispute.DocumentationStateValue = ...
    is_fraud: builtin___bool = ...
    prev_is_fraud: builtin___bool = ...
    prev_is_fraud_for_payment: builtin___bool = ...
    is_blacklisted_for_cbp: builtin___bool = ...
    prev_is_blacklisted_for_cbp: builtin___bool = ...
    is_sq_cash: builtin___bool = ...
    entry_method: squareup___common___entry_method_pb2___PayWithSquareEntryMethodValue = ...
    resolution: squareup___cbms___dispute___common_pb2___ResolutionValue = ...
    dispute_event_id: typing___Text = ...

    @property
    def payment_amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def disputed_amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def prev_disputed_amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def prev_disputed_amount_for_payment(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def current_amount_held(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def prev_amount_held(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def prev_amount_held_for_payment(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def payment_created_at(self) -> squareup___common___time_pb2___DateTime: ...

    @property
    def dispute_created_at(self) -> squareup___common___time_pb2___DateTime: ...

    @property
    def dispute_due_at(self) -> squareup___common___time_pb2___YearMonthDay: ...

    @property
    def dispute_reported_at(self) -> squareup___common___time_pb2___YearMonthDay: ...

    @property
    def created_at(self) -> squareup___common___time_pb2___DateTime: ...

    @property
    def dispute_reason(self) -> squareup___cbms___dispute___dispute_reason_pb2___DisputeReason: ...

    @property
    def prev_dispute_reason(self) -> squareup___cbms___dispute___dispute_reason_pb2___DisputeReason: ...

    @property
    def prev_dispute_reason_for_payment(self) -> squareup___cbms___dispute___dispute_reason_pb2___DisputeReason: ...

    def __init__(self,
        *,
        dispute_event_token : typing___Optional[typing___Text] = None,
        payment_token : typing___Optional[typing___Text] = None,
        user_token : typing___Optional[typing___Text] = None,
        payment_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        disputed_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        prev_disputed_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        prev_disputed_amount_for_payment : typing___Optional[squareup___common___currency_pb2___Money] = None,
        current_amount_held : typing___Optional[squareup___common___currency_pb2___Money] = None,
        prev_amount_held : typing___Optional[squareup___common___currency_pb2___Money] = None,
        prev_amount_held_for_payment : typing___Optional[squareup___common___currency_pb2___Money] = None,
        sequence_number : typing___Optional[typing___Text] = None,
        merchant_order_number : typing___Optional[typing___Text] = None,
        card_number_fidelius_token : typing___Optional[typing___Text] = None,
        card_bin : typing___Optional[typing___Text] = None,
        dispute_type : typing___Optional[type___DisputeEvent.DisputeTypeValue] = None,
        payment_created_at : typing___Optional[squareup___common___time_pb2___DateTime] = None,
        dispute_created_at : typing___Optional[squareup___common___time_pb2___DateTime] = None,
        dispute_due_at : typing___Optional[squareup___common___time_pb2___YearMonthDay] = None,
        dispute_reported_at : typing___Optional[squareup___common___time_pb2___YearMonthDay] = None,
        created_at : typing___Optional[squareup___common___time_pb2___DateTime] = None,
        protection_state : typing___Optional[squareup___cbms___dispute___internal_pb2___Dispute.ProtectionStateValue] = None,
        documentation_state : typing___Optional[squareup___cbms___dispute___internal_pb2___Dispute.DocumentationStateValue] = None,
        dispute_reason : typing___Optional[squareup___cbms___dispute___dispute_reason_pb2___DisputeReason] = None,
        prev_dispute_reason : typing___Optional[squareup___cbms___dispute___dispute_reason_pb2___DisputeReason] = None,
        prev_dispute_reason_for_payment : typing___Optional[squareup___cbms___dispute___dispute_reason_pb2___DisputeReason] = None,
        is_fraud : typing___Optional[builtin___bool] = None,
        prev_is_fraud : typing___Optional[builtin___bool] = None,
        prev_is_fraud_for_payment : typing___Optional[builtin___bool] = None,
        is_blacklisted_for_cbp : typing___Optional[builtin___bool] = None,
        prev_is_blacklisted_for_cbp : typing___Optional[builtin___bool] = None,
        is_sq_cash : typing___Optional[builtin___bool] = None,
        entry_method : typing___Optional[squareup___common___entry_method_pb2___PayWithSquareEntryMethodValue] = None,
        resolution : typing___Optional[squareup___cbms___dispute___common_pb2___ResolutionValue] = None,
        dispute_event_id : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"card_bin",b"card_bin",u"card_number_fidelius_token",b"card_number_fidelius_token",u"created_at",b"created_at",u"current_amount_held",b"current_amount_held",u"dispute_created_at",b"dispute_created_at",u"dispute_due_at",b"dispute_due_at",u"dispute_event_id",b"dispute_event_id",u"dispute_event_token",b"dispute_event_token",u"dispute_reason",b"dispute_reason",u"dispute_reported_at",b"dispute_reported_at",u"dispute_type",b"dispute_type",u"disputed_amount",b"disputed_amount",u"documentation_state",b"documentation_state",u"entry_method",b"entry_method",u"is_blacklisted_for_cbp",b"is_blacklisted_for_cbp",u"is_fraud",b"is_fraud",u"is_sq_cash",b"is_sq_cash",u"merchant_order_number",b"merchant_order_number",u"payment_amount",b"payment_amount",u"payment_created_at",b"payment_created_at",u"payment_token",b"payment_token",u"prev_amount_held",b"prev_amount_held",u"prev_amount_held_for_payment",b"prev_amount_held_for_payment",u"prev_dispute_reason",b"prev_dispute_reason",u"prev_dispute_reason_for_payment",b"prev_dispute_reason_for_payment",u"prev_disputed_amount",b"prev_disputed_amount",u"prev_disputed_amount_for_payment",b"prev_disputed_amount_for_payment",u"prev_is_blacklisted_for_cbp",b"prev_is_blacklisted_for_cbp",u"prev_is_fraud",b"prev_is_fraud",u"prev_is_fraud_for_payment",b"prev_is_fraud_for_payment",u"protection_state",b"protection_state",u"resolution",b"resolution",u"sequence_number",b"sequence_number",u"user_token",b"user_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"card_bin",b"card_bin",u"card_number_fidelius_token",b"card_number_fidelius_token",u"created_at",b"created_at",u"current_amount_held",b"current_amount_held",u"dispute_created_at",b"dispute_created_at",u"dispute_due_at",b"dispute_due_at",u"dispute_event_id",b"dispute_event_id",u"dispute_event_token",b"dispute_event_token",u"dispute_reason",b"dispute_reason",u"dispute_reported_at",b"dispute_reported_at",u"dispute_type",b"dispute_type",u"disputed_amount",b"disputed_amount",u"documentation_state",b"documentation_state",u"entry_method",b"entry_method",u"is_blacklisted_for_cbp",b"is_blacklisted_for_cbp",u"is_fraud",b"is_fraud",u"is_sq_cash",b"is_sq_cash",u"merchant_order_number",b"merchant_order_number",u"payment_amount",b"payment_amount",u"payment_created_at",b"payment_created_at",u"payment_token",b"payment_token",u"prev_amount_held",b"prev_amount_held",u"prev_amount_held_for_payment",b"prev_amount_held_for_payment",u"prev_dispute_reason",b"prev_dispute_reason",u"prev_dispute_reason_for_payment",b"prev_dispute_reason_for_payment",u"prev_disputed_amount",b"prev_disputed_amount",u"prev_disputed_amount_for_payment",b"prev_disputed_amount_for_payment",u"prev_is_blacklisted_for_cbp",b"prev_is_blacklisted_for_cbp",u"prev_is_fraud",b"prev_is_fraud",u"prev_is_fraud_for_payment",b"prev_is_fraud_for_payment",u"protection_state",b"protection_state",u"resolution",b"resolution",u"sequence_number",b"sequence_number",u"user_token",b"user_token"]) -> None: ...
type___DisputeEvent = DisputeEvent

ext_cbms_dispute_event: google___protobuf___descriptor___FieldDescriptor = ...

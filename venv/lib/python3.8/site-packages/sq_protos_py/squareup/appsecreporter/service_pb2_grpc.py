# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.appsecreporter import service_pb2 as squareup_dot_appsecreporter_dot_service__pb2


class CspServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LogCsp = channel.unary_unary(
                '/squareup.appsecreporter.service.CspService/LogCsp',
                request_serializer=squareup_dot_appsecreporter_dot_service__pb2.LogCspRequest.SerializeToString,
                response_deserializer=squareup_dot_appsecreporter_dot_service__pb2.LogCspResponse.FromString,
                )


class CspServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LogCsp(self, request, context):
        """*
        Logs the CSP header value (the policy) for the given app+url combo
        in AppSec Reporter's database for evaluation/reporting.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CspServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LogCsp': grpc.unary_unary_rpc_method_handler(
                    servicer.LogCsp,
                    request_deserializer=squareup_dot_appsecreporter_dot_service__pb2.LogCspRequest.FromString,
                    response_serializer=squareup_dot_appsecreporter_dot_service__pb2.LogCspResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.appsecreporter.service.CspService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CspService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LogCsp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.appsecreporter.service.CspService/LogCsp',
            squareup_dot_appsecreporter_dot_service__pb2.LogCspRequest.SerializeToString,
            squareup_dot_appsecreporter_dot_service__pb2.LogCspResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AppsecreporterAdminServiceStub(object):
    """*
    Admin-only actions used in the admin panel of Appsecreporter
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateIssueState = channel.unary_unary(
                '/squareup.appsecreporter.service.AppsecreporterAdminService/UpdateIssueState',
                request_serializer=squareup_dot_appsecreporter_dot_service__pb2.UpdateIssueStateRequest.SerializeToString,
                response_deserializer=squareup_dot_appsecreporter_dot_service__pb2.UpdateIssueStateResponse.FromString,
                )


class AppsecreporterAdminServiceServicer(object):
    """*
    Admin-only actions used in the admin panel of Appsecreporter
    """

    def UpdateIssueState(self, request, context):
        """Sets the issue state of an existing issue 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AppsecreporterAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateIssueState': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateIssueState,
                    request_deserializer=squareup_dot_appsecreporter_dot_service__pb2.UpdateIssueStateRequest.FromString,
                    response_serializer=squareup_dot_appsecreporter_dot_service__pb2.UpdateIssueStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.appsecreporter.service.AppsecreporterAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AppsecreporterAdminService(object):
    """*
    Admin-only actions used in the admin panel of Appsecreporter
    """

    @staticmethod
    def UpdateIssueState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.appsecreporter.service.AppsecreporterAdminService/UpdateIssueState',
            squareup_dot_appsecreporter_dot_service__pb2.UpdateIssueStateRequest.SerializeToString,
            squareup_dot_appsecreporter_dot_service__pb2.UpdateIssueStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

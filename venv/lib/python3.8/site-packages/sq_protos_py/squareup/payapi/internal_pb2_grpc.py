# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.payapi import internal_pb2 as squareup_dot_payapi_dot_internal__pb2


class InternalPayapiServiceStub(object):
    """*
    To make other e-commerce integrations PCI compliant,
    we can have external developers use the payapi tokenize endpoint.
    This service provides internal Square services with a way to exchange a payapi nonce
    for a tender object generated by the panhandler service
    that it can use to create charges and link credit card instruments with customers.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CaptureTransaction = channel.unary_unary(
                '/squareup.payapi.InternalPayapiService/CaptureTransaction',
                request_serializer=squareup_dot_payapi_dot_internal__pb2.CaptureTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_internal__pb2.CaptureTransactionResponse.FromString,
                )
        self.VoidTransaction = channel.unary_unary(
                '/squareup.payapi.InternalPayapiService/VoidTransaction',
                request_serializer=squareup_dot_payapi_dot_internal__pb2.VoidTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_internal__pb2.VoidTransactionResponse.FromString,
                )
        self.GetCheckoutData = channel.unary_unary(
                '/squareup.payapi.InternalPayapiService/GetCheckoutData',
                request_serializer=squareup_dot_payapi_dot_internal__pb2.GetCheckoutDataRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_internal__pb2.GetCheckoutDataResponse.FromString,
                )


class InternalPayapiServiceServicer(object):
    """*
    To make other e-commerce integrations PCI compliant,
    we can have external developers use the payapi tokenize endpoint.
    This service provides internal Square services with a way to exchange a payapi nonce
    for a tender object generated by the panhandler service
    that it can use to create charges and link credit card instruments with customers.
    """

    def CaptureTransaction(self, request, context):
        """*
        Captures a transaction that was created with the Charge endpoint w/ delayed capture.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoidTransaction(self, request, context):
        """*
        Voids a transaction that was created with the Charge endpoint w/ delayed capture.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCheckoutData(self, request, context):
        """*
        Returns a Checkout object data if one exists in payapi's database.
        Used while Checkouts are migrated to payapi-checkouts
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InternalPayapiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CaptureTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CaptureTransaction,
                    request_deserializer=squareup_dot_payapi_dot_internal__pb2.CaptureTransactionRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_internal__pb2.CaptureTransactionResponse.SerializeToString,
            ),
            'VoidTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.VoidTransaction,
                    request_deserializer=squareup_dot_payapi_dot_internal__pb2.VoidTransactionRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_internal__pb2.VoidTransactionResponse.SerializeToString,
            ),
            'GetCheckoutData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCheckoutData,
                    request_deserializer=squareup_dot_payapi_dot_internal__pb2.GetCheckoutDataRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_internal__pb2.GetCheckoutDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.payapi.InternalPayapiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InternalPayapiService(object):
    """*
    To make other e-commerce integrations PCI compliant,
    we can have external developers use the payapi tokenize endpoint.
    This service provides internal Square services with a way to exchange a payapi nonce
    for a tender object generated by the panhandler service
    that it can use to create charges and link credit card instruments with customers.
    """

    @staticmethod
    def CaptureTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.InternalPayapiService/CaptureTransaction',
            squareup_dot_payapi_dot_internal__pb2.CaptureTransactionRequest.SerializeToString,
            squareup_dot_payapi_dot_internal__pb2.CaptureTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoidTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.InternalPayapiService/VoidTransaction',
            squareup_dot_payapi_dot_internal__pb2.VoidTransactionRequest.SerializeToString,
            squareup_dot_payapi_dot_internal__pb2.VoidTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCheckoutData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.InternalPayapiService/GetCheckoutData',
            squareup_dot_payapi_dot_internal__pb2.GetCheckoutDataRequest.SerializeToString,
            squareup_dot_payapi_dot_internal__pb2.GetCheckoutDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

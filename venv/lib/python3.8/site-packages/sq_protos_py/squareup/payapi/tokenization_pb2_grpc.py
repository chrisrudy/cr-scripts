# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.payapi.actions import bank_nonce_pb2 as squareup_dot_payapi_dot_actions_dot_bank__nonce__pb2
from sq_protos_py.squareup.payapi.actions import card_nonce_pb2 as squareup_dot_payapi_dot_actions_dot_card__nonce__pb2
from sq_protos_py.squareup.payapi.actions import wallet_nonce_pb2 as squareup_dot_payapi_dot_actions_dot_wallet__nonce__pb2
from sq_protos_py.squareup.payapi import internal_pb2 as squareup_dot_payapi_dot_internal__pb2


class TokenizationStub(object):
    """*
    In order to provide PCI-compliant payment processing for customers,
    we handle payment tokenization on their behalf.

    This service provides endpoints for developers and Square services to:
    - generate tokens [http]
    - exchange a nonce token for a payment tender [Square-only]
    - mark a token as consumed [Square-only]
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCardNonce = channel.unary_unary(
                '/squareup.payapi.Tokenization/CreateCardNonce',
                request_serializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateCardNonceRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateCardNonceResponse.FromString,
                )
        self.CreateBankNonce = channel.unary_unary(
                '/squareup.payapi.Tokenization/CreateBankNonce',
                request_serializer=squareup_dot_payapi_dot_actions_dot_bank__nonce__pb2.CreateBankNonceRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_actions_dot_bank__nonce__pb2.CreateBankNonceResponse.FromString,
                )
        self.CreateWalletNonce = channel.unary_unary(
                '/squareup.payapi.Tokenization/CreateWalletNonce',
                request_serializer=squareup_dot_payapi_dot_actions_dot_wallet__nonce__pb2.CreateWalletNonceRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_actions_dot_wallet__nonce__pb2.CreateWalletNonceResponse.FromString,
                )
        self.CreateMobileCardNonce = channel.unary_unary(
                '/squareup.payapi.Tokenization/CreateMobileCardNonce',
                request_serializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateMobileCardNonceRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateMobileCardNonceResponse.FromString,
                )
        self.CreateServerCardNonce = channel.unary_unary(
                '/squareup.payapi.Tokenization/CreateServerCardNonce',
                request_serializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateServerCardNonceRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateServerCardNonceResponse.FromString,
                )
        self.CreateNonce = channel.unary_unary(
                '/squareup.payapi.Tokenization/CreateNonce',
                request_serializer=squareup_dot_payapi_dot_internal__pb2.CreateNonceRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_internal__pb2.CreateNonceResponse.FromString,
                )
        self.ExchangeNonceForEncryptedTender = channel.unary_unary(
                '/squareup.payapi.Tokenization/ExchangeNonceForEncryptedTender',
                request_serializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForEncryptedTenderRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForEncryptedTenderResponse.FromString,
                )
        self.MarkNonceUsed = channel.unary_unary(
                '/squareup.payapi.Tokenization/MarkNonceUsed',
                request_serializer=squareup_dot_payapi_dot_internal__pb2.MarkNonceUsedRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_internal__pb2.MarkNonceUsedResponse.FromString,
                )
        self.ExchangeNonceForBankAccount = channel.unary_unary(
                '/squareup.payapi.Tokenization/ExchangeNonceForBankAccount',
                request_serializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForBankAccountRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForBankAccountResponse.FromString,
                )
        self.MarkBankNonceUsed = channel.unary_unary(
                '/squareup.payapi.Tokenization/MarkBankNonceUsed',
                request_serializer=squareup_dot_payapi_dot_internal__pb2.MarkBankNonceUsedRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_internal__pb2.MarkBankNonceUsedResponse.FromString,
                )
        self.ExchangeNonceForServerCompletedTender = channel.unary_unary(
                '/squareup.payapi.Tokenization/ExchangeNonceForServerCompletedTender',
                request_serializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForServerCompletedTenderRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForServerCompletedTenderResponse.FromString,
                )


class TokenizationServicer(object):
    """*
    In order to provide PCI-compliant payment processing for customers,
    we handle payment tokenization on their behalf.

    This service provides endpoints for developers and Square services to:
    - generate tokens [http]
    - exchange a nonce token for a payment tender [Square-only]
    - mark a token as consumed [Square-only]
    """

    def CreateCardNonce(self, request, context):
        """
        Make a one time use token (nonce) to return to the seller's site which is
        separate and distinct from the card PAN. (Nonce is safe to persist, as it
        is not a payment card, although it can only be used one time.)

        HTTP only, API velocity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBankNonce(self, request, context):
        """
        Make a one time use bank token (nonce) to return to the seller's site which is
        separate and distinct from the Bank Account details. (Nonce is safe to persist, as it
        is not a bank account, although it can only be used one time.)

        HTTP only, API velocity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWalletNonce(self, request, context):
        """
        Make a one time use wallet token (nonce) to return to the seller's site

        HTTP only, API velocity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateMobileCardNonce(self, request, context):
        """
        Make a one time use token (nonce) to return to the seller's mobile app which is
        separate and distinct from the card PAN. (Nonce is safe to persist, as it
        is not a payment card, although it can only be used one time.)
        Not intended for direct use. Please ask about the mobile payments sdk.

        HTTP only, API velocity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateServerCardNonce(self, request, context):
        """
        Make a one time use token (nonce) to return to the application's backend
        which is separate and distinct from the card PAN. (Nonce is safe to persist,
        as it is not a payment card, although it can only be used one time.)

        HTTP only, API velocity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNonce(self, request, context):
        """*
        CreateNonce tokenizes a tender in exchange for a nonce that is tied to a specified external developer application id.
        Currently it would only tokenize Capital cards.

        Square RPC only.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeNonceForEncryptedTender(self, request, context):
        """*
        ExchangeNonceForEncryptedTender returns a panhandler encrypted tender alongside
        with a ClientDetails object for a given nonce if it is not expired.

        Square RPC only.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkNonceUsed(self, request, context):
        """*
        Mark the payapi nonce as used. It is intended to be single use.
        If it is already used, return.

        Square RPC only.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeNonceForBankAccount(self, request, context):
        """*
        ExchangeNonceForBankAccount returns a Gringotts bank account
        alonside a ClientDetails object for a given nonce if it is not expired.

        Square RPC only.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkBankNonceUsed(self, request, context):
        """*
        Mark the payapi bank nonce as used. It is intended to be single use.
        If it is already used, return.

        Square RPC only.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeNonceForServerCompletedTender(self, request, context):
        """*
        ExchangeNonceForServerCompletedTender returns a ServerCompleted tender.

        Square RPC only.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TokenizationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCardNonce': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCardNonce,
                    request_deserializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateCardNonceRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateCardNonceResponse.SerializeToString,
            ),
            'CreateBankNonce': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBankNonce,
                    request_deserializer=squareup_dot_payapi_dot_actions_dot_bank__nonce__pb2.CreateBankNonceRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_actions_dot_bank__nonce__pb2.CreateBankNonceResponse.SerializeToString,
            ),
            'CreateWalletNonce': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWalletNonce,
                    request_deserializer=squareup_dot_payapi_dot_actions_dot_wallet__nonce__pb2.CreateWalletNonceRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_actions_dot_wallet__nonce__pb2.CreateWalletNonceResponse.SerializeToString,
            ),
            'CreateMobileCardNonce': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMobileCardNonce,
                    request_deserializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateMobileCardNonceRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateMobileCardNonceResponse.SerializeToString,
            ),
            'CreateServerCardNonce': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateServerCardNonce,
                    request_deserializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateServerCardNonceRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateServerCardNonceResponse.SerializeToString,
            ),
            'CreateNonce': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNonce,
                    request_deserializer=squareup_dot_payapi_dot_internal__pb2.CreateNonceRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_internal__pb2.CreateNonceResponse.SerializeToString,
            ),
            'ExchangeNonceForEncryptedTender': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeNonceForEncryptedTender,
                    request_deserializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForEncryptedTenderRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForEncryptedTenderResponse.SerializeToString,
            ),
            'MarkNonceUsed': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkNonceUsed,
                    request_deserializer=squareup_dot_payapi_dot_internal__pb2.MarkNonceUsedRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_internal__pb2.MarkNonceUsedResponse.SerializeToString,
            ),
            'ExchangeNonceForBankAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeNonceForBankAccount,
                    request_deserializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForBankAccountRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForBankAccountResponse.SerializeToString,
            ),
            'MarkBankNonceUsed': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkBankNonceUsed,
                    request_deserializer=squareup_dot_payapi_dot_internal__pb2.MarkBankNonceUsedRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_internal__pb2.MarkBankNonceUsedResponse.SerializeToString,
            ),
            'ExchangeNonceForServerCompletedTender': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeNonceForServerCompletedTender,
                    request_deserializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForServerCompletedTenderRequest.FromString,
                    response_serializer=squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForServerCompletedTenderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.payapi.Tokenization', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tokenization(object):
    """*
    In order to provide PCI-compliant payment processing for customers,
    we handle payment tokenization on their behalf.

    This service provides endpoints for developers and Square services to:
    - generate tokens [http]
    - exchange a nonce token for a payment tender [Square-only]
    - mark a token as consumed [Square-only]
    """

    @staticmethod
    def CreateCardNonce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/CreateCardNonce',
            squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateCardNonceRequest.SerializeToString,
            squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateCardNonceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBankNonce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/CreateBankNonce',
            squareup_dot_payapi_dot_actions_dot_bank__nonce__pb2.CreateBankNonceRequest.SerializeToString,
            squareup_dot_payapi_dot_actions_dot_bank__nonce__pb2.CreateBankNonceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateWalletNonce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/CreateWalletNonce',
            squareup_dot_payapi_dot_actions_dot_wallet__nonce__pb2.CreateWalletNonceRequest.SerializeToString,
            squareup_dot_payapi_dot_actions_dot_wallet__nonce__pb2.CreateWalletNonceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateMobileCardNonce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/CreateMobileCardNonce',
            squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateMobileCardNonceRequest.SerializeToString,
            squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateMobileCardNonceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateServerCardNonce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/CreateServerCardNonce',
            squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateServerCardNonceRequest.SerializeToString,
            squareup_dot_payapi_dot_actions_dot_card__nonce__pb2.CreateServerCardNonceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateNonce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/CreateNonce',
            squareup_dot_payapi_dot_internal__pb2.CreateNonceRequest.SerializeToString,
            squareup_dot_payapi_dot_internal__pb2.CreateNonceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeNonceForEncryptedTender(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/ExchangeNonceForEncryptedTender',
            squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForEncryptedTenderRequest.SerializeToString,
            squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForEncryptedTenderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkNonceUsed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/MarkNonceUsed',
            squareup_dot_payapi_dot_internal__pb2.MarkNonceUsedRequest.SerializeToString,
            squareup_dot_payapi_dot_internal__pb2.MarkNonceUsedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeNonceForBankAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/ExchangeNonceForBankAccount',
            squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForBankAccountRequest.SerializeToString,
            squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForBankAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkBankNonceUsed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/MarkBankNonceUsed',
            squareup_dot_payapi_dot_internal__pb2.MarkBankNonceUsedRequest.SerializeToString,
            squareup_dot_payapi_dot_internal__pb2.MarkBankNonceUsedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeNonceForServerCompletedTender(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi.Tokenization/ExchangeNonceForServerCompletedTender',
            squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForServerCompletedTenderRequest.SerializeToString,
            squareup_dot_payapi_dot_internal__pb2.ExchangeNonceForServerCompletedTenderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.franklin import login_pb2 as squareup_dot_franklin_dot_login__pb2


class LoginServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthenticationChallenge = channel.unary_unary(
                '/squareup.franklin.login.LoginService/AuthenticationChallenge',
                request_serializer=squareup_dot_franklin_dot_login__pb2.AuthenticationChallengeRequest.SerializeToString,
                response_deserializer=squareup_dot_franklin_dot_login__pb2.AuthenticationChallengeResponse.FromString,
                )
        self.Authenticate = channel.unary_unary(
                '/squareup.franklin.login.LoginService/Authenticate',
                request_serializer=squareup_dot_franklin_dot_login__pb2.AuthenticateRequest.SerializeToString,
                response_deserializer=squareup_dot_franklin_dot_login__pb2.AuthenticateResponse.FromString,
                )


class LoginServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AuthenticationChallenge(self, request, context):
        """*
        Requests that a login authentication code is sent to an alias. At the moment
        the supported alias are email or SMS.

        On error, this returns an ErrorResponse with one of the values of AuthenticationCodeErrorType.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Authenticate(self, request, context):
        """*
        Authenticates the customer using the received authentication code and alias.

        On error, this returns an ErrorResponse with one of the values of AuthenticateErrorType.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoginServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuthenticationChallenge': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticationChallenge,
                    request_deserializer=squareup_dot_franklin_dot_login__pb2.AuthenticationChallengeRequest.FromString,
                    response_serializer=squareup_dot_franklin_dot_login__pb2.AuthenticationChallengeResponse.SerializeToString,
            ),
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=squareup_dot_franklin_dot_login__pb2.AuthenticateRequest.FromString,
                    response_serializer=squareup_dot_franklin_dot_login__pb2.AuthenticateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.franklin.login.LoginService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LoginService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AuthenticationChallenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.franklin.login.LoginService/AuthenticationChallenge',
            squareup_dot_franklin_dot_login__pb2.AuthenticationChallengeRequest.SerializeToString,
            squareup_dot_franklin_dot_login__pb2.AuthenticationChallengeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.franklin.login.LoginService/Authenticate',
            squareup_dot_franklin_dot_login__pb2.AuthenticateRequest.SerializeToString,
            squareup_dot_franklin_dot_login__pb2.AuthenticateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.banklin.movement_reason_pb2 import (
    MovementReasonValue as squareup___banklin___movement_reason_pb2___MovementReasonValue,
)

from sq_protos_py.squareup.banklin.octopus_pb2 import (
    OctopusResultValue as squareup___banklin___octopus_pb2___OctopusResultValue,
)

from sq_protos_py.squareup.cash.p2p.RecipientBalanceDenialReasonProto_pb2 import (
    RecipientBalanceDenialReasonValue as squareup___cash___p2p___RecipientBalanceDenialReasonProto_pb2___RecipientBalanceDenialReasonValue,
)

from sq_protos_py.squareup.common.currency_pb2 import (
    Money as squareup___common___currency_pb2___Money,
)

from sq_protos_py.squareup.common.location_pb2 import (
    GeoLocation as squareup___common___location_pb2___GeoLocation,
)

from sq_protos_py.squareup.common.protocols_pb2 import (
    Headers as squareup___common___protocols_pb2___Headers,
)

from sq_protos_py.squareup.franklin.accounts_pb2 import (
    Account as squareup___franklin___accounts_pb2___Account,
)

from sq_protos_py.squareup.franklin.alias_pb2 import (
    Alias as squareup___franklin___alias_pb2___Alias,
)

from sq_protos_py.squareup.franklin.bank_account_pb2 import (
    BankAccount as squareup___franklin___bank_account_pb2___BankAccount,
)

from sq_protos_py.squareup.franklin.browser_interaction_pb2 import (
    BrowserInteraction as squareup___franklin___browser_interaction_pb2___BrowserInteraction,
)

from sq_protos_py.squareup.franklin.customer_pb2 import (
    Customer as squareup___franklin___customer_pb2___Customer,
)

from sq_protos_py.squareup.franklin.deposit_preference_pb2 import (
    DepositPreferenceValue as squareup___franklin___deposit_preference_pb2___DepositPreferenceValue,
)

from sq_protos_py.squareup.franklin.instrument_link_pb2 import (
    InstrumentLink as squareup___franklin___instrument_link_pb2___InstrumentLink,
)

from sq_protos_py.squareup.franklin.orientation_pb2 import (
    OrientationValue as squareup___franklin___orientation_pb2___OrientationValue,
)

from sq_protos_py.squareup.franklin.payment_card_pb2 import (
    PaymentCard as squareup___franklin___payment_card_pb2___PaymentCard,
)

from sq_protos_py.squareup.franklin.payment_pull_state_pb2 import (
    PaymentPullStateValue as squareup___franklin___payment_pull_state_pb2___PaymentPullStateValue,
)

from sq_protos_py.squareup.franklin.payment_push_state_pb2 import (
    PaymentPushStateValue as squareup___franklin___payment_push_state_pb2___PaymentPushStateValue,
)

from sq_protos_py.squareup.franklin.rate_plan_pb2 import (
    RatePlanValue as squareup___franklin___rate_plan_pb2___RatePlanValue,
)

from sq_protos_py.squareup.franklin.sca.three_domain_secure_pb2 import (
    ThreeDomainSecureAuthentication as squareup___franklin___sca___three_domain_secure_pb2___ThreeDomainSecureAuthentication,
)

from sq_protos_py.squareup.franklin.signal_pb2 import (
    SignalsContext as squareup___franklin___signal_pb2___SignalsContext,
)

from sq_protos_py.squareup.franklin.stored_value_pb2 import (
    StoredValue as squareup___franklin___stored_value_pb2___StoredValue,
)

from sq_protos_py.squareup.payments.auth_pb2 import (
    AuthorizationErrorValue as squareup___payments___auth_pb2___AuthorizationErrorValue,
)

from typing import (
    Iterable as typing___Iterable,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

DirectionValue = typing___NewType('DirectionValue', builtin___int)
type___DirectionValue = DirectionValue
Direction: _Direction
class _Direction(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[DirectionValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    PULL = typing___cast(DirectionValue, 1)
    PUSH = typing___cast(DirectionValue, 2)
PULL = typing___cast(DirectionValue, 1)
PUSH = typing___cast(DirectionValue, 2)
type___Direction = Direction

CrossBorderPaymentTypeValue = typing___NewType('CrossBorderPaymentTypeValue', builtin___int)
type___CrossBorderPaymentTypeValue = CrossBorderPaymentTypeValue
CrossBorderPaymentType: _CrossBorderPaymentType
class _CrossBorderPaymentType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[CrossBorderPaymentTypeValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    CROSS_BORDER = typing___cast(CrossBorderPaymentTypeValue, 1)
    DOMESTIC = typing___cast(CrossBorderPaymentTypeValue, 2)
    INCONCLUSIVE = typing___cast(CrossBorderPaymentTypeValue, 3)
CROSS_BORDER = typing___cast(CrossBorderPaymentTypeValue, 1)
DOMESTIC = typing___cast(CrossBorderPaymentTypeValue, 2)
INCONCLUSIVE = typing___cast(CrossBorderPaymentTypeValue, 3)
type___CrossBorderPaymentType = CrossBorderPaymentType

class Payment(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    CreationMechanismValue = typing___NewType('CreationMechanismValue', builtin___int)
    type___CreationMechanismValue = CreationMechanismValue
    CreationMechanism: _CreationMechanism
    class _CreationMechanism(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Payment.CreationMechanismValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        EMAIL = typing___cast(Payment.CreationMechanismValue, 0)
        RPC = typing___cast(Payment.CreationMechanismValue, 1)
        TPP = typing___cast(Payment.CreationMechanismValue, 2)
        APP = typing___cast(Payment.CreationMechanismValue, 3)
        TRY_IT_NOW = typing___cast(Payment.CreationMechanismValue, 4)
        REFERRAL_BOUNTY = typing___cast(Payment.CreationMechanismValue, 5)
        BUSINESS_REFERRAL_BOUNTY = typing___cast(Payment.CreationMechanismValue, 19)
        WELCOME_BONUS = typing___cast(Payment.CreationMechanismValue, 8)
        REWARD = typing___cast(Payment.CreationMechanismValue, 18)
        WEB_SIGNUP = typing___cast(Payment.CreationMechanismValue, 14)
        WEB = typing___cast(Payment.CreationMechanismValue, 15)
        CASHBOARD = typing___cast(Payment.CreationMechanismValue, 21)
        RECURRING_PAYMENTS = typing___cast(Payment.CreationMechanismValue, 16)
        REIMBURSEMENT = typing___cast(Payment.CreationMechanismValue, 17)
        BANKSY = typing___cast(Payment.CreationMechanismValue, 20)
        CLAIMABLE = typing___cast(Payment.CreationMechanismValue, 39)
        IMESSAGE = typing___cast(Payment.CreationMechanismValue, 22)
        PAY_WITH_CASH = typing___cast(Payment.CreationMechanismValue, 40)
        ISSUED_CARD = typing___cast(Payment.CreationMechanismValue, 23)
        CASH_ADVANCE = typing___cast(Payment.CreationMechanismValue, 25)
        DDA_ACH = typing___cast(Payment.CreationMechanismValue, 31)
        CLAWBACK = typing___cast(Payment.CreationMechanismValue, 32)
        P2P_BANKLIN = typing___cast(Payment.CreationMechanismValue, 33)
        DISCOUNT = typing___cast(Payment.CreationMechanismValue, 34)
        PURCHASE = typing___cast(Payment.CreationMechanismValue, 38)
        PAYROLL = typing___cast(Payment.CreationMechanismValue, 6)
        YELLOW = typing___cast(Payment.CreationMechanismValue, 7)
        KEY_BANK = typing___cast(Payment.CreationMechanismValue, 9)
        ROBINHOOD = typing___cast(Payment.CreationMechanismValue, 10)
        BUTTERCOIN = typing___cast(Payment.CreationMechanismValue, 11)
        LEDGER = typing___cast(Payment.CreationMechanismValue, 12)
        THX = typing___cast(Payment.CreationMechanismValue, 13)
        CAVIAR = typing___cast(Payment.CreationMechanismValue, 24)
        CAVIAR_RESTAURANT = typing___cast(Payment.CreationMechanismValue, 27)
        CAVIAR_COURIER = typing___cast(Payment.CreationMechanismValue, 28)
        CAVIAR_DINER = typing___cast(Payment.CreationMechanismValue, 37)
        SQCAPITAL = typing___cast(Payment.CreationMechanismValue, 29)
        SQPAYROLL = typing___cast(Payment.CreationMechanismValue, 30)
        SQPAYROLL_TO_EMPLOYER = typing___cast(Payment.CreationMechanismValue, 35)
        SQPAYROLL_TO_EMPLOYEE = typing___cast(Payment.CreationMechanismValue, 36)
        CASHBOT = typing___cast(Payment.CreationMechanismValue, 26)
        PAYMENT_SCHEDULER = typing___cast(Payment.CreationMechanismValue, 41)
        INSTRUMENT_VERIFICATION = typing___cast(Payment.CreationMechanismValue, 42)
        QR_CODE = typing___cast(Payment.CreationMechanismValue, 43)
        NFC_TAG = typing___cast(Payment.CreationMechanismValue, 44)
        COLLEGE_BONUS = typing___cast(Payment.CreationMechanismValue, 45)
        INVEST_TRADE_ERROR = typing___cast(Payment.CreationMechanismValue, 46)
        MARKETING = typing___cast(Payment.CreationMechanismValue, 47)
        STOCK_PURCHASE = typing___cast(Payment.CreationMechanismValue, 48)
        ASYNC_CASH_OUT = typing___cast(Payment.CreationMechanismValue, 49)
        PLAID_UPSELL_BONUS = typing___cast(Payment.CreationMechanismValue, 50)
        LOAN_PAYMENT = typing___cast(Payment.CreationMechanismValue, 51)
        CROSS_BORDER_CASH_IN = typing___cast(Payment.CreationMechanismValue, 52)
        BITCOIN_PURCHASE = typing___cast(Payment.CreationMechanismValue, 53)
        CHECK = typing___cast(Payment.CreationMechanismValue, 54)
        SUPPORT_BALANCE_TRANSFER = typing___cast(Payment.CreationMechanismValue, 55)
    EMAIL = typing___cast(Payment.CreationMechanismValue, 0)
    RPC = typing___cast(Payment.CreationMechanismValue, 1)
    TPP = typing___cast(Payment.CreationMechanismValue, 2)
    APP = typing___cast(Payment.CreationMechanismValue, 3)
    TRY_IT_NOW = typing___cast(Payment.CreationMechanismValue, 4)
    REFERRAL_BOUNTY = typing___cast(Payment.CreationMechanismValue, 5)
    BUSINESS_REFERRAL_BOUNTY = typing___cast(Payment.CreationMechanismValue, 19)
    WELCOME_BONUS = typing___cast(Payment.CreationMechanismValue, 8)
    REWARD = typing___cast(Payment.CreationMechanismValue, 18)
    WEB_SIGNUP = typing___cast(Payment.CreationMechanismValue, 14)
    WEB = typing___cast(Payment.CreationMechanismValue, 15)
    CASHBOARD = typing___cast(Payment.CreationMechanismValue, 21)
    RECURRING_PAYMENTS = typing___cast(Payment.CreationMechanismValue, 16)
    REIMBURSEMENT = typing___cast(Payment.CreationMechanismValue, 17)
    BANKSY = typing___cast(Payment.CreationMechanismValue, 20)
    CLAIMABLE = typing___cast(Payment.CreationMechanismValue, 39)
    IMESSAGE = typing___cast(Payment.CreationMechanismValue, 22)
    PAY_WITH_CASH = typing___cast(Payment.CreationMechanismValue, 40)
    ISSUED_CARD = typing___cast(Payment.CreationMechanismValue, 23)
    CASH_ADVANCE = typing___cast(Payment.CreationMechanismValue, 25)
    DDA_ACH = typing___cast(Payment.CreationMechanismValue, 31)
    CLAWBACK = typing___cast(Payment.CreationMechanismValue, 32)
    P2P_BANKLIN = typing___cast(Payment.CreationMechanismValue, 33)
    DISCOUNT = typing___cast(Payment.CreationMechanismValue, 34)
    PURCHASE = typing___cast(Payment.CreationMechanismValue, 38)
    PAYROLL = typing___cast(Payment.CreationMechanismValue, 6)
    YELLOW = typing___cast(Payment.CreationMechanismValue, 7)
    KEY_BANK = typing___cast(Payment.CreationMechanismValue, 9)
    ROBINHOOD = typing___cast(Payment.CreationMechanismValue, 10)
    BUTTERCOIN = typing___cast(Payment.CreationMechanismValue, 11)
    LEDGER = typing___cast(Payment.CreationMechanismValue, 12)
    THX = typing___cast(Payment.CreationMechanismValue, 13)
    CAVIAR = typing___cast(Payment.CreationMechanismValue, 24)
    CAVIAR_RESTAURANT = typing___cast(Payment.CreationMechanismValue, 27)
    CAVIAR_COURIER = typing___cast(Payment.CreationMechanismValue, 28)
    CAVIAR_DINER = typing___cast(Payment.CreationMechanismValue, 37)
    SQCAPITAL = typing___cast(Payment.CreationMechanismValue, 29)
    SQPAYROLL = typing___cast(Payment.CreationMechanismValue, 30)
    SQPAYROLL_TO_EMPLOYER = typing___cast(Payment.CreationMechanismValue, 35)
    SQPAYROLL_TO_EMPLOYEE = typing___cast(Payment.CreationMechanismValue, 36)
    CASHBOT = typing___cast(Payment.CreationMechanismValue, 26)
    PAYMENT_SCHEDULER = typing___cast(Payment.CreationMechanismValue, 41)
    INSTRUMENT_VERIFICATION = typing___cast(Payment.CreationMechanismValue, 42)
    QR_CODE = typing___cast(Payment.CreationMechanismValue, 43)
    NFC_TAG = typing___cast(Payment.CreationMechanismValue, 44)
    COLLEGE_BONUS = typing___cast(Payment.CreationMechanismValue, 45)
    INVEST_TRADE_ERROR = typing___cast(Payment.CreationMechanismValue, 46)
    MARKETING = typing___cast(Payment.CreationMechanismValue, 47)
    STOCK_PURCHASE = typing___cast(Payment.CreationMechanismValue, 48)
    ASYNC_CASH_OUT = typing___cast(Payment.CreationMechanismValue, 49)
    PLAID_UPSELL_BONUS = typing___cast(Payment.CreationMechanismValue, 50)
    LOAN_PAYMENT = typing___cast(Payment.CreationMechanismValue, 51)
    CROSS_BORDER_CASH_IN = typing___cast(Payment.CreationMechanismValue, 52)
    BITCOIN_PURCHASE = typing___cast(Payment.CreationMechanismValue, 53)
    CHECK = typing___cast(Payment.CreationMechanismValue, 54)
    SUPPORT_BALANCE_TRANSFER = typing___cast(Payment.CreationMechanismValue, 55)
    type___CreationMechanism = CreationMechanism

    StateValue = typing___NewType('StateValue', builtin___int)
    type___StateValue = StateValue
    State: _State
    class _State(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Payment.StateValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        VALIDATING = typing___cast(Payment.StateValue, 0)
        SCHEDULED = typing___cast(Payment.StateValue, 15)
        WAITING_ON_SENDER = typing___cast(Payment.StateValue, 8)
        CAPTURING = typing___cast(Payment.StateValue, 1)
        WAITING_ON_RECIPIENT = typing___cast(Payment.StateValue, 2)
        WAITING_ON_RISK = typing___cast(Payment.StateValue, 3)
        WAITING_TO_PAY_OUT = typing___cast(Payment.StateValue, 9)
        PAYING_OUT = typing___cast(Payment.StateValue, 4)
        PAID_OUT = typing___cast(Payment.StateValue, 5)
        WAITING_ON_REFUNDER = typing___cast(Payment.StateValue, 10)
        PULLING_REFUND = typing___cast(Payment.StateValue, 11)
        WAITING_TO_REFUND = typing___cast(Payment.StateValue, 12)
        REFUNDING = typing___cast(Payment.StateValue, 6)
        FAILED = typing___cast(Payment.StateValue, 7)
        RECLAIMING_CAPTURE = typing___cast(Payment.StateValue, 13)
        RECLAIMING_REFUND_PUSH = typing___cast(Payment.StateValue, 14)
    VALIDATING = typing___cast(Payment.StateValue, 0)
    SCHEDULED = typing___cast(Payment.StateValue, 15)
    WAITING_ON_SENDER = typing___cast(Payment.StateValue, 8)
    CAPTURING = typing___cast(Payment.StateValue, 1)
    WAITING_ON_RECIPIENT = typing___cast(Payment.StateValue, 2)
    WAITING_ON_RISK = typing___cast(Payment.StateValue, 3)
    WAITING_TO_PAY_OUT = typing___cast(Payment.StateValue, 9)
    PAYING_OUT = typing___cast(Payment.StateValue, 4)
    PAID_OUT = typing___cast(Payment.StateValue, 5)
    WAITING_ON_REFUNDER = typing___cast(Payment.StateValue, 10)
    PULLING_REFUND = typing___cast(Payment.StateValue, 11)
    WAITING_TO_REFUND = typing___cast(Payment.StateValue, 12)
    REFUNDING = typing___cast(Payment.StateValue, 6)
    FAILED = typing___cast(Payment.StateValue, 7)
    RECLAIMING_CAPTURE = typing___cast(Payment.StateValue, 13)
    RECLAIMING_REFUND_PUSH = typing___cast(Payment.StateValue, 14)
    type___State = State

    FailureReasonValue = typing___NewType('FailureReasonValue', builtin___int)
    type___FailureReasonValue = FailureReasonValue
    FailureReason: _FailureReason
    class _FailureReason(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Payment.FailureReasonValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        EXPIRED = typing___cast(Payment.FailureReasonValue, 0)
        REJECTED = typing___cast(Payment.FailureReasonValue, 1)
        REVOKED = typing___cast(Payment.FailureReasonValue, 2)
        BLOCKED = typing___cast(Payment.FailureReasonValue, 3)
        DECLINED = typing___cast(Payment.FailureReasonValue, 4)
        SENDER_NOT_INVITED = typing___cast(Payment.FailureReasonValue, 5)
        SENDER_NO_LINKED_CARD = typing___cast(Payment.FailureReasonValue, 6)
        SENDER_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 7)
        SENDER_DENYLISTED = typing___cast(Payment.FailureReasonValue, 106)
        RECIPIENT_INVALID = typing___cast(Payment.FailureReasonValue, 8)
        RECIPIENT_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 9)
        RECIPIENT_DENYLISTED = typing___cast(Payment.FailureReasonValue, 107)
        RECIPIENT_NOT_FOUND = typing___cast(Payment.FailureReasonValue, 10)
        RECIPIENT_TOO_MANY = typing___cast(Payment.FailureReasonValue, 11)
        SUBJECT_INVALID = typing___cast(Payment.FailureReasonValue, 12)
        AMOUNT_EXCEEDED_SINGLE_TRANSACTION_LIMIT = typing___cast(Payment.FailureReasonValue, 13)
        AMOUNT_BELOW_MINIMUM_TRANSACTION_LIMIT = typing___cast(Payment.FailureReasonValue, 14)
        AMOUNT_EXCEEDED_DAILY_TRANSACTION_LIMIT = typing___cast(Payment.FailureReasonValue, 15)
        SENDER_DENIED = typing___cast(Payment.FailureReasonValue, 16)
        SENDER_NON_MTL = typing___cast(Payment.FailureReasonValue, 17)
        AMOUNT_EXCEEDED_WEEKLY_TRANSACTION_LIMIT = typing___cast(Payment.FailureReasonValue, 18)
        AMOUNT_EXCEEDED_MONTHLY_TRANSACTION_LIMIT = typing___cast(Payment.FailureReasonValue, 86)
        RECIPIENT_NOT_IN_PILOT = typing___cast(Payment.FailureReasonValue, 19)
        SENDER_CARD_EXPIRED = typing___cast(Payment.FailureReasonValue, 20)
        SENDER_NOT_IN_PILOT = typing___cast(Payment.FailureReasonValue, 21)
        EMAIL_IS_A_BOUNCE = typing___cast(Payment.FailureReasonValue, 22)
        EMAIL_WAS_SENT_FROM_LIST = typing___cast(Payment.FailureReasonValue, 23)
        EMAIL_WAS_AN_AUTORESPONSE = typing___cast(Payment.FailureReasonValue, 24)
        EMAIL_WAS_SPOOFED = typing___cast(Payment.FailureReasonValue, 25)
        CUSTOMER_CANNOT_INITIATE_VIA_EMAIL = typing___cast(Payment.FailureReasonValue, 72)
        PAY_SQUAREUP_EMPLOYEE = typing___cast(Payment.FailureReasonValue, 26)
        EMAIL_TO_RECIPIENT_BOUNCED = typing___cast(Payment.FailureReasonValue, 27)
        UPGRADE_WITH_TLO_REJECTED = typing___cast(Payment.FailureReasonValue, 28)
        SENDER_FAILED_IDENTITY_VERIFICATION = typing___cast(Payment.FailureReasonValue, 63)
        RECIPIENT_FAILED_IDENTITY_VERIFICATION = typing___cast(Payment.FailureReasonValue, 64)
        SENDER_NO_MORE_IDV_ATTEMPTS_LEFT = typing___cast(Payment.FailureReasonValue, 70)
        RECIPIENT_NO_MORE_IDV_ATTEMPTS_LEFT = typing___cast(Payment.FailureReasonValue, 71)
        SENT_TO_SELF = typing___cast(Payment.FailureReasonValue, 29)
        SYSTEM_OFFLINE = typing___cast(Payment.FailureReasonValue, 30)
        SENDER_CHARGEBACK = typing___cast(Payment.FailureReasonValue, 31)
        EXCEEDED_PASSCODE_ATTEMPTS = typing___cast(Payment.FailureReasonValue, 32)
        BLOCKED_BY_CVV_ATTEMPTS = typing___cast(Payment.FailureReasonValue, 33)
        LACKS_BILL_FEATURE = typing___cast(Payment.FailureReasonValue, 34)
        BILL_GETTER_REFUSED = typing___cast(Payment.FailureReasonValue, 35)
        BILL_INITIATOR_RETRACT = typing___cast(Payment.FailureReasonValue, 36)
        SQUAREUP_DOMAIN = typing___cast(Payment.FailureReasonValue, 37)
        MANUALLY_REVERSED = typing___cast(Payment.FailureReasonValue, 38)
        EXCEEDED_SENDER_STATE_LIMIT = typing___cast(Payment.FailureReasonValue, 39)
        EXCEEDED_RECIPIENT_STATE_LIMIT = typing___cast(Payment.FailureReasonValue, 40)
        SENDER_NOT_FOUND = typing___cast(Payment.FailureReasonValue, 41)
        ACH_PAYOUT_FAILED_ASYNCHRONOUSLY = typing___cast(Payment.FailureReasonValue, 42)
        EXPIRED_WAITING_ON_SENDER = typing___cast(Payment.FailureReasonValue, 43)
        EXPIRED_ON_SENDER_WITH_RISK_BLOCKERS = typing___cast(Payment.FailureReasonValue, 76)
        EXPIRED_WAITING_ON_RECIPIENT = typing___cast(Payment.FailureReasonValue, 44)
        EXPIRED_ON_RECIPIENT_WITH_RISK_BLOCKERS = typing___cast(Payment.FailureReasonValue, 77)
        NO_SQUARE_ADDRESS = typing___cast(Payment.FailureReasonValue, 45)
        TRY_IT_NOW_CUSTOMER_ALREADY_A_CUSTOMER = typing___cast(Payment.FailureReasonValue, 46)
        TRY_IT_NOW_PAYMENT_ABOVE_LIMIT = typing___cast(Payment.FailureReasonValue, 47)
        CASH_PAYMENT_WITH_REQUEST_SUBJECT = typing___cast(Payment.FailureReasonValue, 48)
        EXCEEDED_BILL_OUTSTANDING_LIMIT = typing___cast(Payment.FailureReasonValue, 49)
        RECIPIENT_FIDELIUS_TOKEN_TOO_MANY_PAYMENTS = typing___cast(Payment.FailureReasonValue, 50)
        TRY_IT_NOW_PAYMENT_NOT_VALID_FOR_ACH = typing___cast(Payment.FailureReasonValue, 51)
        BILL_GETTER_INVALID = typing___cast(Payment.FailureReasonValue, 52)
        BILL_GETTER_UNSUPPORTED = typing___cast(Payment.FailureReasonValue, 68)
        DEPOSIT_MECHANISMS_EXHAUSTED = typing___cast(Payment.FailureReasonValue, 53)
        BOUNTY_REFERRER_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 54)
        BOUNTY_REFERRER_DENYLISTED = typing___cast(Payment.FailureReasonValue, 108)
        RECIPIENT_CARD_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 55)
        RECIPIENT_CARD_DENYLISTED = typing___cast(Payment.FailureReasonValue, 109)
        RECIPIENT_BANK_ACCOUNT_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 65)
        RECIPIENT_BANK_ACCOUNT_DENYLISTED = typing___cast(Payment.FailureReasonValue, 110)
        SENDER_CARD_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 56)
        SENDER_CARD_DENYLISTED = typing___cast(Payment.FailureReasonValue, 111)
        EMAIL_DOMAIN_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 57)
        EMAIL_DOMAIN_DENYLISTED = typing___cast(Payment.FailureReasonValue, 112)
        AUTOMATICALLY_BLOCKED = typing___cast(Payment.FailureReasonValue, 58)
        MANUALLY_BLOCKED = typing___cast(Payment.FailureReasonValue, 59)
        AMOUNT_EXCEEDED_BUSINESS_LIMIT = typing___cast(Payment.FailureReasonValue, 60)
        SENDER_EXCEEDED_VERIFICATION_ATTEMPTS = typing___cast(Payment.FailureReasonValue, 61)
        RECIPIENT_EXCEEDED_VERIFICATION_ATTEMPTS = typing___cast(Payment.FailureReasonValue, 62)
        RECIPIENT_REFUNDED = typing___cast(Payment.FailureReasonValue, 66)
        MANUALLY_REFUNDED = typing___cast(Payment.FailureReasonValue, 67)
        CHARGEBACK_REFUNDED = typing___cast(Payment.FailureReasonValue, 69)
        CHARGEBACK_REFUNDED_FORCED_STORED_VALUE = typing___cast(Payment.FailureReasonValue, 82)
        UNLINKED_REFUND_ASYNCHRONOUSLY_FAILED = typing___cast(Payment.FailureReasonValue, 73)
        MANUALLY_FAILED_PAYMENT = typing___cast(Payment.FailureReasonValue, 74)
        SENDER_BALANCE_NEGATIVE = typing___cast(Payment.FailureReasonValue, 75)
        SENDER_WAS_REPORTED_ABUSIVE = typing___cast(Payment.FailureReasonValue, 78)
        RECIPIENT_WAS_REPORTED_ABUSIVE = typing___cast(Payment.FailureReasonValue, 79)
        SENDER_ORPHANED = typing___cast(Payment.FailureReasonValue, 80)
        RECIPIENT_ORPHANED = typing___cast(Payment.FailureReasonValue, 81)
        REFUNDING_TO_BALANCE = typing___cast(Payment.FailureReasonValue, 83)
        EXCEEDED_RETRY_EXPIRATION = typing___cast(Payment.FailureReasonValue, 84)
        CROSS_BORDER = typing___cast(Payment.FailureReasonValue, 85)
        EXCEEDED_PULL_ATTEMPTS = typing___cast(Payment.FailureReasonValue, 87)
        REQUIRES_PREVIOUS_SUCCESS = typing___cast(Payment.FailureReasonValue, 88)
        TOO_MANY_REFERRAL_REWARDS = typing___cast(Payment.FailureReasonValue, 89)
        SENDER_SUSPENDED = typing___cast(Payment.FailureReasonValue, 90)
        RECIPIENT_SUSPENDED = typing___cast(Payment.FailureReasonValue, 91)
        ENFORCED_CROSS_BORDER_TRAVEL_RULE = typing___cast(Payment.FailureReasonValue, 92)
        NOT_IN_CROSS_BORDER_EXPERIMENT = typing___cast(Payment.FailureReasonValue, 93)
        CROSS_BORDER_NOT_ALLOWED_FOR_BUSINESS = typing___cast(Payment.FailureReasonValue, 94)
        INITIATOR_NOT_VERIFIED_FOR_CROSS_BORDER = typing___cast(Payment.FailureReasonValue, 95)
        CANNOT_CREATE_EXCHANGE_QUOTE = typing___cast(Payment.FailureReasonValue, 96)
        CROSS_BORDER_APP_RELEASE_TOO_OLD = typing___cast(Payment.FailureReasonValue, 97)
        CROSS_BORDER_CASH_IN_FAILED = typing___cast(Payment.FailureReasonValue, 98)
        CROSS_BORDER_CREDIT_CARD_FUNDING_NOT_ALLOWED = typing___cast(Payment.FailureReasonValue, 99)
        CROSS_BORDER_TO_AUTO_CASH_OUT_RECIPIENT = typing___cast(Payment.FailureReasonValue, 100)
        AMOUNT_EXCEEDED_CROSS_BORDER_WEEKLY_SEND_LIMIT = typing___cast(Payment.FailureReasonValue, 101)
        AMOUNT_EXCEEDED_CROSS_BORDER_WEEKLY_RECEIVE_LIMIT = typing___cast(Payment.FailureReasonValue, 102)
        API_HARD_FAIL = typing___cast(Payment.FailureReasonValue, 103)
        AMOUNT_EXCEEDED_TIPPING_MONTHLY_SEND_LIMIT = typing___cast(Payment.FailureReasonValue, 104)
        THREE_DOMAIN_SECURE_CHALLENGE_WEB_UNSUPPORTED = typing___cast(Payment.FailureReasonValue, 105)
    EXPIRED = typing___cast(Payment.FailureReasonValue, 0)
    REJECTED = typing___cast(Payment.FailureReasonValue, 1)
    REVOKED = typing___cast(Payment.FailureReasonValue, 2)
    BLOCKED = typing___cast(Payment.FailureReasonValue, 3)
    DECLINED = typing___cast(Payment.FailureReasonValue, 4)
    SENDER_NOT_INVITED = typing___cast(Payment.FailureReasonValue, 5)
    SENDER_NO_LINKED_CARD = typing___cast(Payment.FailureReasonValue, 6)
    SENDER_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 7)
    SENDER_DENYLISTED = typing___cast(Payment.FailureReasonValue, 106)
    RECIPIENT_INVALID = typing___cast(Payment.FailureReasonValue, 8)
    RECIPIENT_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 9)
    RECIPIENT_DENYLISTED = typing___cast(Payment.FailureReasonValue, 107)
    RECIPIENT_NOT_FOUND = typing___cast(Payment.FailureReasonValue, 10)
    RECIPIENT_TOO_MANY = typing___cast(Payment.FailureReasonValue, 11)
    SUBJECT_INVALID = typing___cast(Payment.FailureReasonValue, 12)
    AMOUNT_EXCEEDED_SINGLE_TRANSACTION_LIMIT = typing___cast(Payment.FailureReasonValue, 13)
    AMOUNT_BELOW_MINIMUM_TRANSACTION_LIMIT = typing___cast(Payment.FailureReasonValue, 14)
    AMOUNT_EXCEEDED_DAILY_TRANSACTION_LIMIT = typing___cast(Payment.FailureReasonValue, 15)
    SENDER_DENIED = typing___cast(Payment.FailureReasonValue, 16)
    SENDER_NON_MTL = typing___cast(Payment.FailureReasonValue, 17)
    AMOUNT_EXCEEDED_WEEKLY_TRANSACTION_LIMIT = typing___cast(Payment.FailureReasonValue, 18)
    AMOUNT_EXCEEDED_MONTHLY_TRANSACTION_LIMIT = typing___cast(Payment.FailureReasonValue, 86)
    RECIPIENT_NOT_IN_PILOT = typing___cast(Payment.FailureReasonValue, 19)
    SENDER_CARD_EXPIRED = typing___cast(Payment.FailureReasonValue, 20)
    SENDER_NOT_IN_PILOT = typing___cast(Payment.FailureReasonValue, 21)
    EMAIL_IS_A_BOUNCE = typing___cast(Payment.FailureReasonValue, 22)
    EMAIL_WAS_SENT_FROM_LIST = typing___cast(Payment.FailureReasonValue, 23)
    EMAIL_WAS_AN_AUTORESPONSE = typing___cast(Payment.FailureReasonValue, 24)
    EMAIL_WAS_SPOOFED = typing___cast(Payment.FailureReasonValue, 25)
    CUSTOMER_CANNOT_INITIATE_VIA_EMAIL = typing___cast(Payment.FailureReasonValue, 72)
    PAY_SQUAREUP_EMPLOYEE = typing___cast(Payment.FailureReasonValue, 26)
    EMAIL_TO_RECIPIENT_BOUNCED = typing___cast(Payment.FailureReasonValue, 27)
    UPGRADE_WITH_TLO_REJECTED = typing___cast(Payment.FailureReasonValue, 28)
    SENDER_FAILED_IDENTITY_VERIFICATION = typing___cast(Payment.FailureReasonValue, 63)
    RECIPIENT_FAILED_IDENTITY_VERIFICATION = typing___cast(Payment.FailureReasonValue, 64)
    SENDER_NO_MORE_IDV_ATTEMPTS_LEFT = typing___cast(Payment.FailureReasonValue, 70)
    RECIPIENT_NO_MORE_IDV_ATTEMPTS_LEFT = typing___cast(Payment.FailureReasonValue, 71)
    SENT_TO_SELF = typing___cast(Payment.FailureReasonValue, 29)
    SYSTEM_OFFLINE = typing___cast(Payment.FailureReasonValue, 30)
    SENDER_CHARGEBACK = typing___cast(Payment.FailureReasonValue, 31)
    EXCEEDED_PASSCODE_ATTEMPTS = typing___cast(Payment.FailureReasonValue, 32)
    BLOCKED_BY_CVV_ATTEMPTS = typing___cast(Payment.FailureReasonValue, 33)
    LACKS_BILL_FEATURE = typing___cast(Payment.FailureReasonValue, 34)
    BILL_GETTER_REFUSED = typing___cast(Payment.FailureReasonValue, 35)
    BILL_INITIATOR_RETRACT = typing___cast(Payment.FailureReasonValue, 36)
    SQUAREUP_DOMAIN = typing___cast(Payment.FailureReasonValue, 37)
    MANUALLY_REVERSED = typing___cast(Payment.FailureReasonValue, 38)
    EXCEEDED_SENDER_STATE_LIMIT = typing___cast(Payment.FailureReasonValue, 39)
    EXCEEDED_RECIPIENT_STATE_LIMIT = typing___cast(Payment.FailureReasonValue, 40)
    SENDER_NOT_FOUND = typing___cast(Payment.FailureReasonValue, 41)
    ACH_PAYOUT_FAILED_ASYNCHRONOUSLY = typing___cast(Payment.FailureReasonValue, 42)
    EXPIRED_WAITING_ON_SENDER = typing___cast(Payment.FailureReasonValue, 43)
    EXPIRED_ON_SENDER_WITH_RISK_BLOCKERS = typing___cast(Payment.FailureReasonValue, 76)
    EXPIRED_WAITING_ON_RECIPIENT = typing___cast(Payment.FailureReasonValue, 44)
    EXPIRED_ON_RECIPIENT_WITH_RISK_BLOCKERS = typing___cast(Payment.FailureReasonValue, 77)
    NO_SQUARE_ADDRESS = typing___cast(Payment.FailureReasonValue, 45)
    TRY_IT_NOW_CUSTOMER_ALREADY_A_CUSTOMER = typing___cast(Payment.FailureReasonValue, 46)
    TRY_IT_NOW_PAYMENT_ABOVE_LIMIT = typing___cast(Payment.FailureReasonValue, 47)
    CASH_PAYMENT_WITH_REQUEST_SUBJECT = typing___cast(Payment.FailureReasonValue, 48)
    EXCEEDED_BILL_OUTSTANDING_LIMIT = typing___cast(Payment.FailureReasonValue, 49)
    RECIPIENT_FIDELIUS_TOKEN_TOO_MANY_PAYMENTS = typing___cast(Payment.FailureReasonValue, 50)
    TRY_IT_NOW_PAYMENT_NOT_VALID_FOR_ACH = typing___cast(Payment.FailureReasonValue, 51)
    BILL_GETTER_INVALID = typing___cast(Payment.FailureReasonValue, 52)
    BILL_GETTER_UNSUPPORTED = typing___cast(Payment.FailureReasonValue, 68)
    DEPOSIT_MECHANISMS_EXHAUSTED = typing___cast(Payment.FailureReasonValue, 53)
    BOUNTY_REFERRER_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 54)
    BOUNTY_REFERRER_DENYLISTED = typing___cast(Payment.FailureReasonValue, 108)
    RECIPIENT_CARD_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 55)
    RECIPIENT_CARD_DENYLISTED = typing___cast(Payment.FailureReasonValue, 109)
    RECIPIENT_BANK_ACCOUNT_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 65)
    RECIPIENT_BANK_ACCOUNT_DENYLISTED = typing___cast(Payment.FailureReasonValue, 110)
    SENDER_CARD_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 56)
    SENDER_CARD_DENYLISTED = typing___cast(Payment.FailureReasonValue, 111)
    EMAIL_DOMAIN_BLACKLISTED = typing___cast(Payment.FailureReasonValue, 57)
    EMAIL_DOMAIN_DENYLISTED = typing___cast(Payment.FailureReasonValue, 112)
    AUTOMATICALLY_BLOCKED = typing___cast(Payment.FailureReasonValue, 58)
    MANUALLY_BLOCKED = typing___cast(Payment.FailureReasonValue, 59)
    AMOUNT_EXCEEDED_BUSINESS_LIMIT = typing___cast(Payment.FailureReasonValue, 60)
    SENDER_EXCEEDED_VERIFICATION_ATTEMPTS = typing___cast(Payment.FailureReasonValue, 61)
    RECIPIENT_EXCEEDED_VERIFICATION_ATTEMPTS = typing___cast(Payment.FailureReasonValue, 62)
    RECIPIENT_REFUNDED = typing___cast(Payment.FailureReasonValue, 66)
    MANUALLY_REFUNDED = typing___cast(Payment.FailureReasonValue, 67)
    CHARGEBACK_REFUNDED = typing___cast(Payment.FailureReasonValue, 69)
    CHARGEBACK_REFUNDED_FORCED_STORED_VALUE = typing___cast(Payment.FailureReasonValue, 82)
    UNLINKED_REFUND_ASYNCHRONOUSLY_FAILED = typing___cast(Payment.FailureReasonValue, 73)
    MANUALLY_FAILED_PAYMENT = typing___cast(Payment.FailureReasonValue, 74)
    SENDER_BALANCE_NEGATIVE = typing___cast(Payment.FailureReasonValue, 75)
    SENDER_WAS_REPORTED_ABUSIVE = typing___cast(Payment.FailureReasonValue, 78)
    RECIPIENT_WAS_REPORTED_ABUSIVE = typing___cast(Payment.FailureReasonValue, 79)
    SENDER_ORPHANED = typing___cast(Payment.FailureReasonValue, 80)
    RECIPIENT_ORPHANED = typing___cast(Payment.FailureReasonValue, 81)
    REFUNDING_TO_BALANCE = typing___cast(Payment.FailureReasonValue, 83)
    EXCEEDED_RETRY_EXPIRATION = typing___cast(Payment.FailureReasonValue, 84)
    CROSS_BORDER = typing___cast(Payment.FailureReasonValue, 85)
    EXCEEDED_PULL_ATTEMPTS = typing___cast(Payment.FailureReasonValue, 87)
    REQUIRES_PREVIOUS_SUCCESS = typing___cast(Payment.FailureReasonValue, 88)
    TOO_MANY_REFERRAL_REWARDS = typing___cast(Payment.FailureReasonValue, 89)
    SENDER_SUSPENDED = typing___cast(Payment.FailureReasonValue, 90)
    RECIPIENT_SUSPENDED = typing___cast(Payment.FailureReasonValue, 91)
    ENFORCED_CROSS_BORDER_TRAVEL_RULE = typing___cast(Payment.FailureReasonValue, 92)
    NOT_IN_CROSS_BORDER_EXPERIMENT = typing___cast(Payment.FailureReasonValue, 93)
    CROSS_BORDER_NOT_ALLOWED_FOR_BUSINESS = typing___cast(Payment.FailureReasonValue, 94)
    INITIATOR_NOT_VERIFIED_FOR_CROSS_BORDER = typing___cast(Payment.FailureReasonValue, 95)
    CANNOT_CREATE_EXCHANGE_QUOTE = typing___cast(Payment.FailureReasonValue, 96)
    CROSS_BORDER_APP_RELEASE_TOO_OLD = typing___cast(Payment.FailureReasonValue, 97)
    CROSS_BORDER_CASH_IN_FAILED = typing___cast(Payment.FailureReasonValue, 98)
    CROSS_BORDER_CREDIT_CARD_FUNDING_NOT_ALLOWED = typing___cast(Payment.FailureReasonValue, 99)
    CROSS_BORDER_TO_AUTO_CASH_OUT_RECIPIENT = typing___cast(Payment.FailureReasonValue, 100)
    AMOUNT_EXCEEDED_CROSS_BORDER_WEEKLY_SEND_LIMIT = typing___cast(Payment.FailureReasonValue, 101)
    AMOUNT_EXCEEDED_CROSS_BORDER_WEEKLY_RECEIVE_LIMIT = typing___cast(Payment.FailureReasonValue, 102)
    API_HARD_FAIL = typing___cast(Payment.FailureReasonValue, 103)
    AMOUNT_EXCEEDED_TIPPING_MONTHLY_SEND_LIMIT = typing___cast(Payment.FailureReasonValue, 104)
    THREE_DOMAIN_SECURE_CHALLENGE_WEB_UNSUPPORTED = typing___cast(Payment.FailureReasonValue, 105)
    type___FailureReason = FailureReason

    RefundFailureReasonValue = typing___NewType('RefundFailureReasonValue', builtin___int)
    type___RefundFailureReasonValue = RefundFailureReasonValue
    RefundFailureReason: _RefundFailureReason
    class _RefundFailureReason(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Payment.RefundFailureReasonValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        BANK_DECLINED = typing___cast(Payment.RefundFailureReasonValue, 1)
        REFUNDER_BLACKLISTED = typing___cast(Payment.RefundFailureReasonValue, 2)
        REFUNDER_DENYLISTED = typing___cast(Payment.RefundFailureReasonValue, 12)
        NO_VALID_PULL_INSTRUMENT = typing___cast(Payment.RefundFailureReasonValue, 3)
        INSTRUMENT_CHANGED = typing___cast(Payment.RefundFailureReasonValue, 4)
        INSTRUMENT_EXPIRED = typing___cast(Payment.RefundFailureReasonValue, 5)
        INSTRUMENT_INVALID = typing___cast(Payment.RefundFailureReasonValue, 6)
        REFUNDEE_BLACKLISTED = typing___cast(Payment.RefundFailureReasonValue, 7)
        REFUNDEE_DENYLISTED = typing___cast(Payment.RefundFailureReasonValue, 13)
        MANUALLY_FAILED = typing___cast(Payment.RefundFailureReasonValue, 8)
        REFUNDED_TO_BALANCE = typing___cast(Payment.RefundFailureReasonValue, 9)
        REFUNDEE_SUSPENDED = typing___cast(Payment.RefundFailureReasonValue, 10)
        REFUNDER_SUSPENDED = typing___cast(Payment.RefundFailureReasonValue, 11)
    BANK_DECLINED = typing___cast(Payment.RefundFailureReasonValue, 1)
    REFUNDER_BLACKLISTED = typing___cast(Payment.RefundFailureReasonValue, 2)
    REFUNDER_DENYLISTED = typing___cast(Payment.RefundFailureReasonValue, 12)
    NO_VALID_PULL_INSTRUMENT = typing___cast(Payment.RefundFailureReasonValue, 3)
    INSTRUMENT_CHANGED = typing___cast(Payment.RefundFailureReasonValue, 4)
    INSTRUMENT_EXPIRED = typing___cast(Payment.RefundFailureReasonValue, 5)
    INSTRUMENT_INVALID = typing___cast(Payment.RefundFailureReasonValue, 6)
    REFUNDEE_BLACKLISTED = typing___cast(Payment.RefundFailureReasonValue, 7)
    REFUNDEE_DENYLISTED = typing___cast(Payment.RefundFailureReasonValue, 13)
    MANUALLY_FAILED = typing___cast(Payment.RefundFailureReasonValue, 8)
    REFUNDED_TO_BALANCE = typing___cast(Payment.RefundFailureReasonValue, 9)
    REFUNDEE_SUSPENDED = typing___cast(Payment.RefundFailureReasonValue, 10)
    REFUNDER_SUSPENDED = typing___cast(Payment.RefundFailureReasonValue, 11)
    type___RefundFailureReason = RefundFailureReason

    MoneyMovingMechanismValue = typing___NewType('MoneyMovingMechanismValue', builtin___int)
    type___MoneyMovingMechanismValue = MoneyMovingMechanismValue
    MoneyMovingMechanism: _MoneyMovingMechanism
    class _MoneyMovingMechanism(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Payment.MoneyMovingMechanismValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(Payment.MoneyMovingMechanismValue, 1)
        ADAPTIVE = typing___cast(Payment.MoneyMovingMechanismValue, 2)
        EDJE = typing___cast(Payment.MoneyMovingMechanismValue, 3)
        ACH = typing___cast(Payment.MoneyMovingMechanismValue, 4)
        MAESTRO = typing___cast(Payment.MoneyMovingMechanismValue, 6)
        SQUARE_BALANCE = typing___cast(Payment.MoneyMovingMechanismValue, 7)
        ESPERANTO = typing___cast(Payment.MoneyMovingMechanismValue, 8)
        ESPERANTO_DUAL_MESSAGE_AFT = typing___cast(Payment.MoneyMovingMechanismValue, 9)
        ESPERANTO_VISA_OCT = typing___cast(Payment.MoneyMovingMechanismValue, 10)
        TELLER_ACH = typing___cast(Payment.MoneyMovingMechanismValue, 11)
        ESPERANTO_VISA_OCT_FF = typing___cast(Payment.MoneyMovingMechanismValue, 13)
        ESPERANTO_STAR = typing___cast(Payment.MoneyMovingMechanismValue, 14)
        ACCULYNK = typing___cast(Payment.MoneyMovingMechanismValue, 15)
        ESPERANTO_SHAZAM = typing___cast(Payment.MoneyMovingMechanismValue, 16)
        ESPERANTO_NYCE_OVER_STAR = typing___cast(Payment.MoneyMovingMechanismValue, 17)
        BANKLIN = typing___cast(Payment.MoneyMovingMechanismValue, 18)
        LOB = typing___cast(Payment.MoneyMovingMechanismValue, 19)
        STORED_VALUE = typing___cast(Payment.MoneyMovingMechanismValue, 20)
        ESPERANTO_SHAZAM_56 = typing___cast(Payment.MoneyMovingMechanismValue, 21)
        MASTERCARD_SEND = typing___cast(Payment.MoneyMovingMechanismValue, 22)
        ACCULYNK_PAYSECURE = typing___cast(Payment.MoneyMovingMechanismValue, 23)
        MARQETA_ISSUED_CARD = typing___cast(Payment.MoneyMovingMechanismValue, 24)
        SHAZAM_ISSUED_CARD = typing___cast(Payment.MoneyMovingMechanismValue, 25)
        CORE_PRO_ACH = typing___cast(Payment.MoneyMovingMechanismValue, 26)
        ESPERANTO_OMNIPAY_OCT = typing___cast(Payment.MoneyMovingMechanismValue, 27)
        XTS = typing___cast(Payment.MoneyMovingMechanismValue, 28)
        MARQETA_ACH = typing___cast(Payment.MoneyMovingMechanismValue, 29)
        PANAMA = typing___cast(Payment.MoneyMovingMechanismValue, 30)
        ESPERANTO_NYCE = typing___cast(Payment.MoneyMovingMechanismValue, 31)
    UNKNOWN = typing___cast(Payment.MoneyMovingMechanismValue, 1)
    ADAPTIVE = typing___cast(Payment.MoneyMovingMechanismValue, 2)
    EDJE = typing___cast(Payment.MoneyMovingMechanismValue, 3)
    ACH = typing___cast(Payment.MoneyMovingMechanismValue, 4)
    MAESTRO = typing___cast(Payment.MoneyMovingMechanismValue, 6)
    SQUARE_BALANCE = typing___cast(Payment.MoneyMovingMechanismValue, 7)
    ESPERANTO = typing___cast(Payment.MoneyMovingMechanismValue, 8)
    ESPERANTO_DUAL_MESSAGE_AFT = typing___cast(Payment.MoneyMovingMechanismValue, 9)
    ESPERANTO_VISA_OCT = typing___cast(Payment.MoneyMovingMechanismValue, 10)
    TELLER_ACH = typing___cast(Payment.MoneyMovingMechanismValue, 11)
    ESPERANTO_VISA_OCT_FF = typing___cast(Payment.MoneyMovingMechanismValue, 13)
    ESPERANTO_STAR = typing___cast(Payment.MoneyMovingMechanismValue, 14)
    ACCULYNK = typing___cast(Payment.MoneyMovingMechanismValue, 15)
    ESPERANTO_SHAZAM = typing___cast(Payment.MoneyMovingMechanismValue, 16)
    ESPERANTO_NYCE_OVER_STAR = typing___cast(Payment.MoneyMovingMechanismValue, 17)
    BANKLIN = typing___cast(Payment.MoneyMovingMechanismValue, 18)
    LOB = typing___cast(Payment.MoneyMovingMechanismValue, 19)
    STORED_VALUE = typing___cast(Payment.MoneyMovingMechanismValue, 20)
    ESPERANTO_SHAZAM_56 = typing___cast(Payment.MoneyMovingMechanismValue, 21)
    MASTERCARD_SEND = typing___cast(Payment.MoneyMovingMechanismValue, 22)
    ACCULYNK_PAYSECURE = typing___cast(Payment.MoneyMovingMechanismValue, 23)
    MARQETA_ISSUED_CARD = typing___cast(Payment.MoneyMovingMechanismValue, 24)
    SHAZAM_ISSUED_CARD = typing___cast(Payment.MoneyMovingMechanismValue, 25)
    CORE_PRO_ACH = typing___cast(Payment.MoneyMovingMechanismValue, 26)
    ESPERANTO_OMNIPAY_OCT = typing___cast(Payment.MoneyMovingMechanismValue, 27)
    XTS = typing___cast(Payment.MoneyMovingMechanismValue, 28)
    MARQETA_ACH = typing___cast(Payment.MoneyMovingMechanismValue, 29)
    PANAMA = typing___cast(Payment.MoneyMovingMechanismValue, 30)
    ESPERANTO_NYCE = typing___cast(Payment.MoneyMovingMechanismValue, 31)
    type___MoneyMovingMechanism = MoneyMovingMechanism

    PaymentCodingCategoryValue = typing___NewType('PaymentCodingCategoryValue', builtin___int)
    type___PaymentCodingCategoryValue = PaymentCodingCategoryValue
    PaymentCodingCategory: _PaymentCodingCategory
    class _PaymentCodingCategory(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Payment.PaymentCodingCategoryValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        P2P = typing___cast(Payment.PaymentCodingCategoryValue, 0)
        DISBURSEMENT = typing___cast(Payment.PaymentCodingCategoryValue, 1)
        MERCHANT_SETTLEMENT = typing___cast(Payment.PaymentCodingCategoryValue, 2)
        COMMERCIAL = typing___cast(Payment.PaymentCodingCategoryValue, 3)
        PAYROLL_DISBURSEMENT = typing___cast(Payment.PaymentCodingCategoryValue, 4)
        REFERRAL = typing___cast(Payment.PaymentCodingCategoryValue, 5)
        COMMERCIAL_SETTLEMENT = typing___cast(Payment.PaymentCodingCategoryValue, 6)
        ISSUED_CARD_TRANSACTION = typing___cast(Payment.PaymentCodingCategoryValue, 7)
        CAVIAR_SETTLEMENT = typing___cast(Payment.PaymentCodingCategoryValue, 8)
        ACH_TRANSACTION = typing___cast(Payment.PaymentCodingCategoryValue, 9)
        CHECK_DEPOSIT = typing___cast(Payment.PaymentCodingCategoryValue, 10)
    P2P = typing___cast(Payment.PaymentCodingCategoryValue, 0)
    DISBURSEMENT = typing___cast(Payment.PaymentCodingCategoryValue, 1)
    MERCHANT_SETTLEMENT = typing___cast(Payment.PaymentCodingCategoryValue, 2)
    COMMERCIAL = typing___cast(Payment.PaymentCodingCategoryValue, 3)
    PAYROLL_DISBURSEMENT = typing___cast(Payment.PaymentCodingCategoryValue, 4)
    REFERRAL = typing___cast(Payment.PaymentCodingCategoryValue, 5)
    COMMERCIAL_SETTLEMENT = typing___cast(Payment.PaymentCodingCategoryValue, 6)
    ISSUED_CARD_TRANSACTION = typing___cast(Payment.PaymentCodingCategoryValue, 7)
    CAVIAR_SETTLEMENT = typing___cast(Payment.PaymentCodingCategoryValue, 8)
    ACH_TRANSACTION = typing___cast(Payment.PaymentCodingCategoryValue, 9)
    CHECK_DEPOSIT = typing___cast(Payment.PaymentCodingCategoryValue, 10)
    type___PaymentCodingCategory = PaymentCodingCategory

    id: typing___Text = ...
    external_id: typing___Text = ...
    orientation: squareup___franklin___orientation_pb2___OrientationValue = ...
    deposit_preference: squareup___franklin___deposit_preference_pb2___DepositPreferenceValue = ...
    state: type___Payment.StateValue = ...
    failure_reason: type___Payment.FailureReasonValue = ...
    created_at: builtin___int = ...
    client_created_at: builtin___int = ...
    updated_at: builtin___int = ...
    edje_decline_reason: squareup___payments___auth_pb2___AuthorizationErrorValue = ...
    last_recipient_reminder_sent_at: builtin___int = ...
    email_body: typing___Text = ...
    creation_mechanism: type___Payment.CreationMechanismValue = ...
    pack_size: builtin___int = ...
    pack_index: builtin___int = ...
    payment_schedule_token: typing___Text = ...
    send_at: builtin___int = ...
    creation_user_agent: typing___Text = ...
    dispute_reason_code: typing___Text = ...
    dispute_user_comments: typing___Text = ...
    sender_transaction_id: typing___Text = ...
    edje_authorization_result_reason: typing___Text = ...
    recipient_transaction_id: typing___Text = ...
    sender_charged_at: builtin___int = ...
    recipient_paid_at: builtin___int = ...
    edje_gateway_id: typing___Text = ...
    capture_mechanism: type___Payment.MoneyMovingMechanismValue = ...
    deposit_mechanism: type___Payment.MoneyMovingMechanismValue = ...
    is_refund_to_balance: builtin___bool = ...
    sender_opaque_app_token: typing___Text = ...
    sender_device_uuid: typing___Text = ...
    requires_passcode_confirmation: builtin___bool = ...
    referrer_id: typing___Text = ...
    original_sender_id: typing___Text = ...
    original_sender_token: typing___Text = ...
    original_recipient_id: typing___Text = ...
    original_recipient_token: typing___Text = ...
    initiator_notes: typing___Text = ...
    custom_id: typing___Text = ...
    client_id: typing___Text = ...
    rate_plan: squareup___franklin___rate_plan_pb2___RatePlanValue = ...
    refund_failure_reason: type___Payment.RefundFailureReasonValue = ...
    reached_sender_at: builtin___int = ...
    reached_recipient_at: builtin___int = ...
    refund_reached_sender_at: builtin___int = ...
    display_id: typing___Text = ...
    recipient_balance_denial_reason: squareup___cash___p2p___RecipientBalanceDenialReasonProto_pb2___RecipientBalanceDenialReasonValue = ...
    is_transfer: builtin___bool = ...
    state_transition_count: builtin___int = ...
    sender_version: builtin___int = ...
    recipient_version: builtin___int = ...
    twin_lock_version: builtin___int = ...
    sender_reported_abuse_at: builtin___int = ...
    recipient_reported_abuse_at: builtin___int = ...
    estimated_arrival_at: builtin___int = ...
    forced_instant_deposit_with_fee_at: builtin___int = ...
    cross_border: builtin___bool = ...
    movement_exchange_rate: typing___Text = ...
    refund_requested_at: builtin___int = ...
    refund_request_reason: typing___Text = ...
    refund_request_declined_at: builtin___int = ...
    money_mover_migration_step: typing___Text = ...

    @property
    def sender(self) -> squareup___franklin___customer_pb2___Customer: ...

    @property
    def recipient(self) -> squareup___franklin___customer_pb2___Customer: ...

    @property
    def amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def pull_amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def push_amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def amount_with_fee(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def source_email_headers(self) -> squareup___common___protocols_pb2___Headers: ...

    @property
    def sender_card(self) -> squareup___franklin___payment_card_pb2___PaymentCard: ...

    @property
    def recipient_card(self) -> squareup___franklin___payment_card_pb2___PaymentCard: ...

    @property
    def recipient_bank_account(self) -> squareup___franklin___bank_account_pb2___BankAccount: ...

    @property
    def pull(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___PaymentPull]: ...

    @property
    def push(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___PaymentPush]: ...

    @property
    def refund_pulls(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___PaymentPull]: ...

    @property
    def refund_pushes(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___PaymentPush]: ...

    @property
    def reclaim_pulls(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___PaymentPull]: ...

    @property
    def incoming_email(self) -> type___IncomingEmail: ...

    @property
    def geo_location(self) -> squareup___common___location_pb2___GeoLocation: ...

    @property
    def sender_alias(self) -> squareup___franklin___alias_pb2___Alias: ...

    @property
    def recipient_alias(self) -> squareup___franklin___alias_pb2___Alias: ...

    @property
    def creating_browser_interaction(self) -> squareup___franklin___browser_interaction_pb2___BrowserInteraction: ...

    @property
    def sender_account(self) -> squareup___franklin___accounts_pb2___Account: ...

    @property
    def recipient_account(self) -> squareup___franklin___accounts_pb2___Account: ...

    @property
    def pull_instrument(self) -> squareup___franklin___instrument_link_pb2___InstrumentLink: ...

    @property
    def push_instrument(self) -> squareup___franklin___instrument_link_pb2___InstrumentLink: ...

    @property
    def sender_payment_amount_in_default_currency(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def recipient_payment_amount_in_default_currency(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def signals_context(self) -> squareup___franklin___signal_pb2___SignalsContext: ...

    @property
    def state_transitions(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[type___PaymentStateTransition]: ...

    @property
    def three_domain_secure_authentication(self) -> squareup___franklin___sca___three_domain_secure_pb2___ThreeDomainSecureAuthentication: ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        external_id : typing___Optional[typing___Text] = None,
        sender : typing___Optional[squareup___franklin___customer_pb2___Customer] = None,
        recipient : typing___Optional[squareup___franklin___customer_pb2___Customer] = None,
        orientation : typing___Optional[squareup___franklin___orientation_pb2___OrientationValue] = None,
        amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        pull_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        push_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        deposit_preference : typing___Optional[squareup___franklin___deposit_preference_pb2___DepositPreferenceValue] = None,
        amount_with_fee : typing___Optional[squareup___common___currency_pb2___Money] = None,
        source_email_headers : typing___Optional[squareup___common___protocols_pb2___Headers] = None,
        state : typing___Optional[type___Payment.StateValue] = None,
        failure_reason : typing___Optional[type___Payment.FailureReasonValue] = None,
        created_at : typing___Optional[builtin___int] = None,
        client_created_at : typing___Optional[builtin___int] = None,
        updated_at : typing___Optional[builtin___int] = None,
        edje_decline_reason : typing___Optional[squareup___payments___auth_pb2___AuthorizationErrorValue] = None,
        last_recipient_reminder_sent_at : typing___Optional[builtin___int] = None,
        email_body : typing___Optional[typing___Text] = None,
        creation_mechanism : typing___Optional[type___Payment.CreationMechanismValue] = None,
        pack_size : typing___Optional[builtin___int] = None,
        pack_index : typing___Optional[builtin___int] = None,
        payment_schedule_token : typing___Optional[typing___Text] = None,
        send_at : typing___Optional[builtin___int] = None,
        creation_user_agent : typing___Optional[typing___Text] = None,
        dispute_reason_code : typing___Optional[typing___Text] = None,
        dispute_user_comments : typing___Optional[typing___Text] = None,
        sender_transaction_id : typing___Optional[typing___Text] = None,
        sender_card : typing___Optional[squareup___franklin___payment_card_pb2___PaymentCard] = None,
        recipient_card : typing___Optional[squareup___franklin___payment_card_pb2___PaymentCard] = None,
        recipient_bank_account : typing___Optional[squareup___franklin___bank_account_pb2___BankAccount] = None,
        edje_authorization_result_reason : typing___Optional[typing___Text] = None,
        recipient_transaction_id : typing___Optional[typing___Text] = None,
        sender_charged_at : typing___Optional[builtin___int] = None,
        recipient_paid_at : typing___Optional[builtin___int] = None,
        edje_gateway_id : typing___Optional[typing___Text] = None,
        capture_mechanism : typing___Optional[type___Payment.MoneyMovingMechanismValue] = None,
        deposit_mechanism : typing___Optional[type___Payment.MoneyMovingMechanismValue] = None,
        pull : typing___Optional[typing___Iterable[type___PaymentPull]] = None,
        push : typing___Optional[typing___Iterable[type___PaymentPush]] = None,
        refund_pulls : typing___Optional[typing___Iterable[type___PaymentPull]] = None,
        refund_pushes : typing___Optional[typing___Iterable[type___PaymentPush]] = None,
        reclaim_pulls : typing___Optional[typing___Iterable[type___PaymentPull]] = None,
        is_refund_to_balance : typing___Optional[builtin___bool] = None,
        sender_opaque_app_token : typing___Optional[typing___Text] = None,
        sender_device_uuid : typing___Optional[typing___Text] = None,
        incoming_email : typing___Optional[type___IncomingEmail] = None,
        geo_location : typing___Optional[squareup___common___location_pb2___GeoLocation] = None,
        requires_passcode_confirmation : typing___Optional[builtin___bool] = None,
        referrer_id : typing___Optional[typing___Text] = None,
        original_sender_id : typing___Optional[typing___Text] = None,
        original_sender_token : typing___Optional[typing___Text] = None,
        original_recipient_id : typing___Optional[typing___Text] = None,
        original_recipient_token : typing___Optional[typing___Text] = None,
        sender_alias : typing___Optional[squareup___franklin___alias_pb2___Alias] = None,
        recipient_alias : typing___Optional[squareup___franklin___alias_pb2___Alias] = None,
        initiator_notes : typing___Optional[typing___Text] = None,
        custom_id : typing___Optional[typing___Text] = None,
        client_id : typing___Optional[typing___Text] = None,
        creating_browser_interaction : typing___Optional[squareup___franklin___browser_interaction_pb2___BrowserInteraction] = None,
        rate_plan : typing___Optional[squareup___franklin___rate_plan_pb2___RatePlanValue] = None,
        refund_failure_reason : typing___Optional[type___Payment.RefundFailureReasonValue] = None,
        reached_sender_at : typing___Optional[builtin___int] = None,
        reached_recipient_at : typing___Optional[builtin___int] = None,
        refund_reached_sender_at : typing___Optional[builtin___int] = None,
        display_id : typing___Optional[typing___Text] = None,
        recipient_balance_denial_reason : typing___Optional[squareup___cash___p2p___RecipientBalanceDenialReasonProto_pb2___RecipientBalanceDenialReasonValue] = None,
        sender_account : typing___Optional[squareup___franklin___accounts_pb2___Account] = None,
        recipient_account : typing___Optional[squareup___franklin___accounts_pb2___Account] = None,
        pull_instrument : typing___Optional[squareup___franklin___instrument_link_pb2___InstrumentLink] = None,
        push_instrument : typing___Optional[squareup___franklin___instrument_link_pb2___InstrumentLink] = None,
        is_transfer : typing___Optional[builtin___bool] = None,
        state_transition_count : typing___Optional[builtin___int] = None,
        sender_version : typing___Optional[builtin___int] = None,
        recipient_version : typing___Optional[builtin___int] = None,
        twin_lock_version : typing___Optional[builtin___int] = None,
        sender_reported_abuse_at : typing___Optional[builtin___int] = None,
        recipient_reported_abuse_at : typing___Optional[builtin___int] = None,
        estimated_arrival_at : typing___Optional[builtin___int] = None,
        forced_instant_deposit_with_fee_at : typing___Optional[builtin___int] = None,
        cross_border : typing___Optional[builtin___bool] = None,
        sender_payment_amount_in_default_currency : typing___Optional[squareup___common___currency_pb2___Money] = None,
        recipient_payment_amount_in_default_currency : typing___Optional[squareup___common___currency_pb2___Money] = None,
        movement_exchange_rate : typing___Optional[typing___Text] = None,
        signals_context : typing___Optional[squareup___franklin___signal_pb2___SignalsContext] = None,
        refund_requested_at : typing___Optional[builtin___int] = None,
        refund_request_reason : typing___Optional[typing___Text] = None,
        refund_request_declined_at : typing___Optional[builtin___int] = None,
        state_transitions : typing___Optional[typing___Iterable[type___PaymentStateTransition]] = None,
        money_mover_migration_step : typing___Optional[typing___Text] = None,
        three_domain_secure_authentication : typing___Optional[squareup___franklin___sca___three_domain_secure_pb2___ThreeDomainSecureAuthentication] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"amount",b"amount",u"amount_with_fee",b"amount_with_fee",u"capture_mechanism",b"capture_mechanism",u"client_created_at",b"client_created_at",u"client_id",b"client_id",u"created_at",b"created_at",u"creating_browser_interaction",b"creating_browser_interaction",u"creation_mechanism",b"creation_mechanism",u"creation_user_agent",b"creation_user_agent",u"cross_border",b"cross_border",u"custom_id",b"custom_id",u"deposit_mechanism",b"deposit_mechanism",u"deposit_preference",b"deposit_preference",u"display_id",b"display_id",u"dispute_reason_code",b"dispute_reason_code",u"dispute_user_comments",b"dispute_user_comments",u"edje_authorization_result_reason",b"edje_authorization_result_reason",u"edje_decline_reason",b"edje_decline_reason",u"edje_gateway_id",b"edje_gateway_id",u"email_body",b"email_body",u"estimated_arrival_at",b"estimated_arrival_at",u"external_id",b"external_id",u"failure_reason",b"failure_reason",u"forced_instant_deposit_with_fee_at",b"forced_instant_deposit_with_fee_at",u"geo_location",b"geo_location",u"id",b"id",u"incoming_email",b"incoming_email",u"initiator_notes",b"initiator_notes",u"is_refund_to_balance",b"is_refund_to_balance",u"is_transfer",b"is_transfer",u"last_recipient_reminder_sent_at",b"last_recipient_reminder_sent_at",u"money_mover_migration_step",b"money_mover_migration_step",u"movement_exchange_rate",b"movement_exchange_rate",u"orientation",b"orientation",u"original_recipient_id",b"original_recipient_id",u"original_recipient_token",b"original_recipient_token",u"original_sender_id",b"original_sender_id",u"original_sender_token",b"original_sender_token",u"pack_index",b"pack_index",u"pack_size",b"pack_size",u"payment_schedule_token",b"payment_schedule_token",u"pull_amount",b"pull_amount",u"pull_instrument",b"pull_instrument",u"push_amount",b"push_amount",u"push_instrument",b"push_instrument",u"rate_plan",b"rate_plan",u"reached_recipient_at",b"reached_recipient_at",u"reached_sender_at",b"reached_sender_at",u"recipient",b"recipient",u"recipient_account",b"recipient_account",u"recipient_alias",b"recipient_alias",u"recipient_balance_denial_reason",b"recipient_balance_denial_reason",u"recipient_bank_account",b"recipient_bank_account",u"recipient_card",b"recipient_card",u"recipient_paid_at",b"recipient_paid_at",u"recipient_payment_amount_in_default_currency",b"recipient_payment_amount_in_default_currency",u"recipient_reported_abuse_at",b"recipient_reported_abuse_at",u"recipient_transaction_id",b"recipient_transaction_id",u"recipient_version",b"recipient_version",u"referrer_id",b"referrer_id",u"refund_failure_reason",b"refund_failure_reason",u"refund_reached_sender_at",b"refund_reached_sender_at",u"refund_request_declined_at",b"refund_request_declined_at",u"refund_request_reason",b"refund_request_reason",u"refund_requested_at",b"refund_requested_at",u"requires_passcode_confirmation",b"requires_passcode_confirmation",u"send_at",b"send_at",u"sender",b"sender",u"sender_account",b"sender_account",u"sender_alias",b"sender_alias",u"sender_card",b"sender_card",u"sender_charged_at",b"sender_charged_at",u"sender_device_uuid",b"sender_device_uuid",u"sender_opaque_app_token",b"sender_opaque_app_token",u"sender_payment_amount_in_default_currency",b"sender_payment_amount_in_default_currency",u"sender_reported_abuse_at",b"sender_reported_abuse_at",u"sender_transaction_id",b"sender_transaction_id",u"sender_version",b"sender_version",u"signals_context",b"signals_context",u"source_email_headers",b"source_email_headers",u"state",b"state",u"state_transition_count",b"state_transition_count",u"three_domain_secure_authentication",b"three_domain_secure_authentication",u"twin_lock_version",b"twin_lock_version",u"updated_at",b"updated_at"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"amount",b"amount",u"amount_with_fee",b"amount_with_fee",u"capture_mechanism",b"capture_mechanism",u"client_created_at",b"client_created_at",u"client_id",b"client_id",u"created_at",b"created_at",u"creating_browser_interaction",b"creating_browser_interaction",u"creation_mechanism",b"creation_mechanism",u"creation_user_agent",b"creation_user_agent",u"cross_border",b"cross_border",u"custom_id",b"custom_id",u"deposit_mechanism",b"deposit_mechanism",u"deposit_preference",b"deposit_preference",u"display_id",b"display_id",u"dispute_reason_code",b"dispute_reason_code",u"dispute_user_comments",b"dispute_user_comments",u"edje_authorization_result_reason",b"edje_authorization_result_reason",u"edje_decline_reason",b"edje_decline_reason",u"edje_gateway_id",b"edje_gateway_id",u"email_body",b"email_body",u"estimated_arrival_at",b"estimated_arrival_at",u"external_id",b"external_id",u"failure_reason",b"failure_reason",u"forced_instant_deposit_with_fee_at",b"forced_instant_deposit_with_fee_at",u"geo_location",b"geo_location",u"id",b"id",u"incoming_email",b"incoming_email",u"initiator_notes",b"initiator_notes",u"is_refund_to_balance",b"is_refund_to_balance",u"is_transfer",b"is_transfer",u"last_recipient_reminder_sent_at",b"last_recipient_reminder_sent_at",u"money_mover_migration_step",b"money_mover_migration_step",u"movement_exchange_rate",b"movement_exchange_rate",u"orientation",b"orientation",u"original_recipient_id",b"original_recipient_id",u"original_recipient_token",b"original_recipient_token",u"original_sender_id",b"original_sender_id",u"original_sender_token",b"original_sender_token",u"pack_index",b"pack_index",u"pack_size",b"pack_size",u"payment_schedule_token",b"payment_schedule_token",u"pull",b"pull",u"pull_amount",b"pull_amount",u"pull_instrument",b"pull_instrument",u"push",b"push",u"push_amount",b"push_amount",u"push_instrument",b"push_instrument",u"rate_plan",b"rate_plan",u"reached_recipient_at",b"reached_recipient_at",u"reached_sender_at",b"reached_sender_at",u"recipient",b"recipient",u"recipient_account",b"recipient_account",u"recipient_alias",b"recipient_alias",u"recipient_balance_denial_reason",b"recipient_balance_denial_reason",u"recipient_bank_account",b"recipient_bank_account",u"recipient_card",b"recipient_card",u"recipient_paid_at",b"recipient_paid_at",u"recipient_payment_amount_in_default_currency",b"recipient_payment_amount_in_default_currency",u"recipient_reported_abuse_at",b"recipient_reported_abuse_at",u"recipient_transaction_id",b"recipient_transaction_id",u"recipient_version",b"recipient_version",u"reclaim_pulls",b"reclaim_pulls",u"referrer_id",b"referrer_id",u"refund_failure_reason",b"refund_failure_reason",u"refund_pulls",b"refund_pulls",u"refund_pushes",b"refund_pushes",u"refund_reached_sender_at",b"refund_reached_sender_at",u"refund_request_declined_at",b"refund_request_declined_at",u"refund_request_reason",b"refund_request_reason",u"refund_requested_at",b"refund_requested_at",u"requires_passcode_confirmation",b"requires_passcode_confirmation",u"send_at",b"send_at",u"sender",b"sender",u"sender_account",b"sender_account",u"sender_alias",b"sender_alias",u"sender_card",b"sender_card",u"sender_charged_at",b"sender_charged_at",u"sender_device_uuid",b"sender_device_uuid",u"sender_opaque_app_token",b"sender_opaque_app_token",u"sender_payment_amount_in_default_currency",b"sender_payment_amount_in_default_currency",u"sender_reported_abuse_at",b"sender_reported_abuse_at",u"sender_transaction_id",b"sender_transaction_id",u"sender_version",b"sender_version",u"signals_context",b"signals_context",u"source_email_headers",b"source_email_headers",u"state",b"state",u"state_transition_count",b"state_transition_count",u"state_transitions",b"state_transitions",u"three_domain_secure_authentication",b"three_domain_secure_authentication",u"twin_lock_version",b"twin_lock_version",u"updated_at",b"updated_at"]) -> None: ...
type___Payment = Payment

class PaymentStateTransition(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    id: typing___Text = ...
    payment_id: typing___Text = ...
    transitioned_at: builtin___int = ...
    from_state: type___Payment.StateValue = ...
    to_state: type___Payment.StateValue = ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        payment_id : typing___Optional[typing___Text] = None,
        transitioned_at : typing___Optional[builtin___int] = None,
        from_state : typing___Optional[type___Payment.StateValue] = None,
        to_state : typing___Optional[type___Payment.StateValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"from_state",b"from_state",u"id",b"id",u"payment_id",b"payment_id",u"to_state",b"to_state",u"transitioned_at",b"transitioned_at"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"from_state",b"from_state",u"id",b"id",u"payment_id",b"payment_id",u"to_state",b"to_state",u"transitioned_at",b"transitioned_at"]) -> None: ...
type___PaymentStateTransition = PaymentStateTransition

class PaymentSummary(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    id: typing___Text = ...
    client_id: typing___Text = ...
    external_id: typing___Text = ...
    creation_mechanism: type___Payment.CreationMechanismValue = ...
    created_at: builtin___int = ...
    display_id: typing___Text = ...
    state: type___Payment.StateValue = ...
    failure_reason: type___Payment.FailureReasonValue = ...
    refund_failure_reason: type___Payment.RefundFailureReasonValue = ...
    orientation: squareup___franklin___orientation_pb2___OrientationValue = ...
    rate_plan: squareup___franklin___rate_plan_pb2___RatePlanValue = ...
    sender_customer_token: typing___Text = ...
    recipient_customer_token: typing___Text = ...
    initiator_notes: typing___Text = ...

    @property
    def amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def pull_amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def push_amount(self) -> squareup___common___currency_pb2___Money: ...

    @property
    def sender_alias(self) -> squareup___franklin___alias_pb2___Alias: ...

    @property
    def recipient_alias(self) -> squareup___franklin___alias_pb2___Alias: ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        client_id : typing___Optional[typing___Text] = None,
        external_id : typing___Optional[typing___Text] = None,
        creation_mechanism : typing___Optional[type___Payment.CreationMechanismValue] = None,
        created_at : typing___Optional[builtin___int] = None,
        display_id : typing___Optional[typing___Text] = None,
        state : typing___Optional[type___Payment.StateValue] = None,
        failure_reason : typing___Optional[type___Payment.FailureReasonValue] = None,
        refund_failure_reason : typing___Optional[type___Payment.RefundFailureReasonValue] = None,
        orientation : typing___Optional[squareup___franklin___orientation_pb2___OrientationValue] = None,
        amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        pull_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        push_amount : typing___Optional[squareup___common___currency_pb2___Money] = None,
        rate_plan : typing___Optional[squareup___franklin___rate_plan_pb2___RatePlanValue] = None,
        sender_alias : typing___Optional[squareup___franklin___alias_pb2___Alias] = None,
        recipient_alias : typing___Optional[squareup___franklin___alias_pb2___Alias] = None,
        sender_customer_token : typing___Optional[typing___Text] = None,
        recipient_customer_token : typing___Optional[typing___Text] = None,
        initiator_notes : typing___Optional[typing___Text] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"amount",b"amount",u"client_id",b"client_id",u"created_at",b"created_at",u"creation_mechanism",b"creation_mechanism",u"display_id",b"display_id",u"external_id",b"external_id",u"failure_reason",b"failure_reason",u"id",b"id",u"initiator_notes",b"initiator_notes",u"orientation",b"orientation",u"pull_amount",b"pull_amount",u"push_amount",b"push_amount",u"rate_plan",b"rate_plan",u"recipient_alias",b"recipient_alias",u"recipient_customer_token",b"recipient_customer_token",u"refund_failure_reason",b"refund_failure_reason",u"sender_alias",b"sender_alias",u"sender_customer_token",b"sender_customer_token",u"state",b"state"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"amount",b"amount",u"client_id",b"client_id",u"created_at",b"created_at",u"creation_mechanism",b"creation_mechanism",u"display_id",b"display_id",u"external_id",b"external_id",u"failure_reason",b"failure_reason",u"id",b"id",u"initiator_notes",b"initiator_notes",u"orientation",b"orientation",u"pull_amount",b"pull_amount",u"push_amount",b"push_amount",u"rate_plan",b"rate_plan",u"recipient_alias",b"recipient_alias",u"recipient_customer_token",b"recipient_customer_token",u"refund_failure_reason",b"refund_failure_reason",u"sender_alias",b"sender_alias",u"sender_customer_token",b"sender_customer_token",u"state",b"state"]) -> None: ...
type___PaymentSummary = PaymentSummary

class PaymentPull(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    FailureReasonValue = typing___NewType('FailureReasonValue', builtin___int)
    type___FailureReasonValue = FailureReasonValue
    FailureReason: _FailureReason
    class _FailureReason(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[PaymentPull.FailureReasonValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        FAILED = typing___cast(PaymentPull.FailureReasonValue, 1)
        CANCELED = typing___cast(PaymentPull.FailureReasonValue, 2)
    FAILED = typing___cast(PaymentPull.FailureReasonValue, 1)
    CANCELED = typing___cast(PaymentPull.FailureReasonValue, 2)
    type___FailureReason = FailureReason

    RefundTypeValue = typing___NewType('RefundTypeValue', builtin___int)
    type___RefundTypeValue = RefundTypeValue
    RefundType: _RefundType
    class _RefundType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[PaymentPull.RefundTypeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        REFUND_TO_INSTRUMENT = typing___cast(PaymentPull.RefundTypeValue, 1)
        REFUND_TO_INSTRUMENT_WITHOUT_SUCCESSFUL_AUTH = typing___cast(PaymentPull.RefundTypeValue, 2)
        REFUND_TO_INSTRUMENT_WITHOUT_SUCCESSFUL_CAPTURE = typing___cast(PaymentPull.RefundTypeValue, 3)
        REFUND_TO_BALANCE = typing___cast(PaymentPull.RefundTypeValue, 4)
        CAPTURE_AND_THEN_REFUND_TO_BALANCE = typing___cast(PaymentPull.RefundTypeValue, 5)
        CANCEL_ACH = typing___cast(PaymentPull.RefundTypeValue, 6)
        REFUND_TO_INSTRUMENT_FAILED_NO_SUCH_TRANSACTION = typing___cast(PaymentPull.RefundTypeValue, 7)
        SKIP = typing___cast(PaymentPull.RefundTypeValue, 8)
    REFUND_TO_INSTRUMENT = typing___cast(PaymentPull.RefundTypeValue, 1)
    REFUND_TO_INSTRUMENT_WITHOUT_SUCCESSFUL_AUTH = typing___cast(PaymentPull.RefundTypeValue, 2)
    REFUND_TO_INSTRUMENT_WITHOUT_SUCCESSFUL_CAPTURE = typing___cast(PaymentPull.RefundTypeValue, 3)
    REFUND_TO_BALANCE = typing___cast(PaymentPull.RefundTypeValue, 4)
    CAPTURE_AND_THEN_REFUND_TO_BALANCE = typing___cast(PaymentPull.RefundTypeValue, 5)
    CANCEL_ACH = typing___cast(PaymentPull.RefundTypeValue, 6)
    REFUND_TO_INSTRUMENT_FAILED_NO_SUCH_TRANSACTION = typing___cast(PaymentPull.RefundTypeValue, 7)
    SKIP = typing___cast(PaymentPull.RefundTypeValue, 8)
    type___RefundType = RefundType

    id: typing___Text = ...
    token: typing___Text = ...
    mechanism: type___Payment.MoneyMovingMechanismValue = ...
    transaction_id: typing___Text = ...
    state: squareup___franklin___payment_pull_state_pb2___PaymentPullStateValue = ...
    result: squareup___banklin___octopus_pb2___OctopusResultValue = ...
    pull_failure_reason: type___PaymentPull.FailureReasonValue = ...
    refund_type: type___PaymentPull.RefundTypeValue = ...
    message: typing___Text = ...
    authorize_result: typing___Text = ...
    gateway: typing___Text = ...
    authorized_at: builtin___int = ...
    captured_at: builtin___int = ...
    refunded_at: builtin___int = ...
    chargeback_at: builtin___int = ...
    chargeback_won_at: builtin___int = ...
    chargeback_lost_at: builtin___int = ...
    gateway_transaction_id: typing___Text = ...
    created_at: builtin___int = ...
    updated_at: builtin___int = ...
    statement_description: typing___Text = ...
    movement_reason: squareup___banklin___movement_reason_pb2___MovementReasonValue = ...

    @property
    def bank_account(self) -> squareup___franklin___bank_account_pb2___BankAccount: ...

    @property
    def card(self) -> squareup___franklin___payment_card_pb2___PaymentCard: ...

    @property
    def stored_value(self) -> squareup___franklin___stored_value_pb2___StoredValue: ...

    @property
    def three_domain_secure_authentication(self) -> squareup___franklin___sca___three_domain_secure_pb2___ThreeDomainSecureAuthentication: ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        token : typing___Optional[typing___Text] = None,
        mechanism : typing___Optional[type___Payment.MoneyMovingMechanismValue] = None,
        transaction_id : typing___Optional[typing___Text] = None,
        bank_account : typing___Optional[squareup___franklin___bank_account_pb2___BankAccount] = None,
        card : typing___Optional[squareup___franklin___payment_card_pb2___PaymentCard] = None,
        stored_value : typing___Optional[squareup___franklin___stored_value_pb2___StoredValue] = None,
        state : typing___Optional[squareup___franklin___payment_pull_state_pb2___PaymentPullStateValue] = None,
        result : typing___Optional[squareup___banklin___octopus_pb2___OctopusResultValue] = None,
        pull_failure_reason : typing___Optional[type___PaymentPull.FailureReasonValue] = None,
        refund_type : typing___Optional[type___PaymentPull.RefundTypeValue] = None,
        message : typing___Optional[typing___Text] = None,
        authorize_result : typing___Optional[typing___Text] = None,
        gateway : typing___Optional[typing___Text] = None,
        authorized_at : typing___Optional[builtin___int] = None,
        captured_at : typing___Optional[builtin___int] = None,
        refunded_at : typing___Optional[builtin___int] = None,
        chargeback_at : typing___Optional[builtin___int] = None,
        chargeback_won_at : typing___Optional[builtin___int] = None,
        chargeback_lost_at : typing___Optional[builtin___int] = None,
        gateway_transaction_id : typing___Optional[typing___Text] = None,
        created_at : typing___Optional[builtin___int] = None,
        updated_at : typing___Optional[builtin___int] = None,
        statement_description : typing___Optional[typing___Text] = None,
        movement_reason : typing___Optional[squareup___banklin___movement_reason_pb2___MovementReasonValue] = None,
        three_domain_secure_authentication : typing___Optional[squareup___franklin___sca___three_domain_secure_pb2___ThreeDomainSecureAuthentication] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"authorize_result",b"authorize_result",u"authorized_at",b"authorized_at",u"bank_account",b"bank_account",u"captured_at",b"captured_at",u"card",b"card",u"chargeback_at",b"chargeback_at",u"chargeback_lost_at",b"chargeback_lost_at",u"chargeback_won_at",b"chargeback_won_at",u"created_at",b"created_at",u"gateway",b"gateway",u"gateway_transaction_id",b"gateway_transaction_id",u"id",b"id",u"mechanism",b"mechanism",u"message",b"message",u"movement_reason",b"movement_reason",u"pull_failure_reason",b"pull_failure_reason",u"refund_type",b"refund_type",u"refunded_at",b"refunded_at",u"result",b"result",u"state",b"state",u"statement_description",b"statement_description",u"stored_value",b"stored_value",u"three_domain_secure_authentication",b"three_domain_secure_authentication",u"token",b"token",u"transaction_id",b"transaction_id",u"updated_at",b"updated_at"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"authorize_result",b"authorize_result",u"authorized_at",b"authorized_at",u"bank_account",b"bank_account",u"captured_at",b"captured_at",u"card",b"card",u"chargeback_at",b"chargeback_at",u"chargeback_lost_at",b"chargeback_lost_at",u"chargeback_won_at",b"chargeback_won_at",u"created_at",b"created_at",u"gateway",b"gateway",u"gateway_transaction_id",b"gateway_transaction_id",u"id",b"id",u"mechanism",b"mechanism",u"message",b"message",u"movement_reason",b"movement_reason",u"pull_failure_reason",b"pull_failure_reason",u"refund_type",b"refund_type",u"refunded_at",b"refunded_at",u"result",b"result",u"state",b"state",u"statement_description",b"statement_description",u"stored_value",b"stored_value",u"three_domain_secure_authentication",b"three_domain_secure_authentication",u"token",b"token",u"transaction_id",b"transaction_id",u"updated_at",b"updated_at"]) -> None: ...
type___PaymentPull = PaymentPull

class PaymentPush(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    FailureReasonValue = typing___NewType('FailureReasonValue', builtin___int)
    type___FailureReasonValue = FailureReasonValue
    FailureReason: _FailureReason
    class _FailureReason(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[PaymentPush.FailureReasonValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        FAILED = typing___cast(PaymentPush.FailureReasonValue, 1)
        CANCELED = typing___cast(PaymentPush.FailureReasonValue, 2)
    FAILED = typing___cast(PaymentPush.FailureReasonValue, 1)
    CANCELED = typing___cast(PaymentPush.FailureReasonValue, 2)
    type___FailureReason = FailureReason

    id: typing___Text = ...
    token: typing___Text = ...
    mechanism: type___Payment.MoneyMovingMechanismValue = ...
    transaction_id: typing___Text = ...
    state: squareup___franklin___payment_push_state_pb2___PaymentPushStateValue = ...
    result: squareup___banklin___octopus_pb2___OctopusResultValue = ...
    push_failure_reason: type___PaymentPush.FailureReasonValue = ...
    failure_reason: typing___Text = ...
    message: typing___Text = ...
    paid_out_at: builtin___int = ...
    reversed_at: builtin___int = ...
    gateway_transaction_id: typing___Text = ...
    created_at: builtin___int = ...
    updated_at: builtin___int = ...
    statement_description: typing___Text = ...
    movement_reason: squareup___banklin___movement_reason_pb2___MovementReasonValue = ...

    @property
    def bank_account(self) -> squareup___franklin___bank_account_pb2___BankAccount: ...

    @property
    def card(self) -> squareup___franklin___payment_card_pb2___PaymentCard: ...

    @property
    def stored_value(self) -> squareup___franklin___stored_value_pb2___StoredValue: ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        token : typing___Optional[typing___Text] = None,
        mechanism : typing___Optional[type___Payment.MoneyMovingMechanismValue] = None,
        transaction_id : typing___Optional[typing___Text] = None,
        bank_account : typing___Optional[squareup___franklin___bank_account_pb2___BankAccount] = None,
        card : typing___Optional[squareup___franklin___payment_card_pb2___PaymentCard] = None,
        stored_value : typing___Optional[squareup___franklin___stored_value_pb2___StoredValue] = None,
        state : typing___Optional[squareup___franklin___payment_push_state_pb2___PaymentPushStateValue] = None,
        result : typing___Optional[squareup___banklin___octopus_pb2___OctopusResultValue] = None,
        push_failure_reason : typing___Optional[type___PaymentPush.FailureReasonValue] = None,
        failure_reason : typing___Optional[typing___Text] = None,
        message : typing___Optional[typing___Text] = None,
        paid_out_at : typing___Optional[builtin___int] = None,
        reversed_at : typing___Optional[builtin___int] = None,
        gateway_transaction_id : typing___Optional[typing___Text] = None,
        created_at : typing___Optional[builtin___int] = None,
        updated_at : typing___Optional[builtin___int] = None,
        statement_description : typing___Optional[typing___Text] = None,
        movement_reason : typing___Optional[squareup___banklin___movement_reason_pb2___MovementReasonValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"bank_account",b"bank_account",u"card",b"card",u"created_at",b"created_at",u"failure_reason",b"failure_reason",u"gateway_transaction_id",b"gateway_transaction_id",u"id",b"id",u"mechanism",b"mechanism",u"message",b"message",u"movement_reason",b"movement_reason",u"paid_out_at",b"paid_out_at",u"push_failure_reason",b"push_failure_reason",u"result",b"result",u"reversed_at",b"reversed_at",u"state",b"state",u"statement_description",b"statement_description",u"stored_value",b"stored_value",u"token",b"token",u"transaction_id",b"transaction_id",u"updated_at",b"updated_at"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"bank_account",b"bank_account",u"card",b"card",u"created_at",b"created_at",u"failure_reason",b"failure_reason",u"gateway_transaction_id",b"gateway_transaction_id",u"id",b"id",u"mechanism",b"mechanism",u"message",b"message",u"movement_reason",b"movement_reason",u"paid_out_at",b"paid_out_at",u"push_failure_reason",b"push_failure_reason",u"result",b"result",u"reversed_at",b"reversed_at",u"state",b"state",u"statement_description",b"statement_description",u"stored_value",b"stored_value",u"token",b"token",u"transaction_id",b"transaction_id",u"updated_at",b"updated_at"]) -> None: ...
type___PaymentPush = PaymentPush

class IncomingEmail(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    id: typing___Text = ...
    body: typing___Text = ...
    body_keywords: typing___Text = ...
    confirmed_by_email_token_link: builtin___bool = ...
    confirmed_by_app_token: builtin___bool = ...
    contains_app_payment_token: builtin___bool = ...
    created_at: builtin___int = ...
    updated_at: builtin___int = ...

    @property
    def headers(self) -> squareup___common___protocols_pb2___Headers: ...

    @property
    def spoof_decision(self) -> type___SpoofDecision: ...

    def __init__(self,
        *,
        id : typing___Optional[typing___Text] = None,
        headers : typing___Optional[squareup___common___protocols_pb2___Headers] = None,
        body : typing___Optional[typing___Text] = None,
        body_keywords : typing___Optional[typing___Text] = None,
        spoof_decision : typing___Optional[type___SpoofDecision] = None,
        confirmed_by_email_token_link : typing___Optional[builtin___bool] = None,
        confirmed_by_app_token : typing___Optional[builtin___bool] = None,
        contains_app_payment_token : typing___Optional[builtin___bool] = None,
        created_at : typing___Optional[builtin___int] = None,
        updated_at : typing___Optional[builtin___int] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"body",b"body",u"body_keywords",b"body_keywords",u"confirmed_by_app_token",b"confirmed_by_app_token",u"confirmed_by_email_token_link",b"confirmed_by_email_token_link",u"contains_app_payment_token",b"contains_app_payment_token",u"created_at",b"created_at",u"headers",b"headers",u"id",b"id",u"spoof_decision",b"spoof_decision",u"updated_at",b"updated_at"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"body",b"body",u"body_keywords",b"body_keywords",u"confirmed_by_app_token",b"confirmed_by_app_token",u"confirmed_by_email_token_link",b"confirmed_by_email_token_link",u"contains_app_payment_token",b"contains_app_payment_token",u"created_at",b"created_at",u"headers",b"headers",u"id",b"id",u"spoof_decision",b"spoof_decision",u"updated_at",b"updated_at"]) -> None: ...
type___IncomingEmail = IncomingEmail

class SpoofDecision(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    ResultValue = typing___NewType('ResultValue', builtin___int)
    type___ResultValue = ResultValue
    Result: _Result
    class _Result(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[SpoofDecision.ResultValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        NOT_SPOOFED = typing___cast(SpoofDecision.ResultValue, 1)
        SPOOFED = typing___cast(SpoofDecision.ResultValue, 2)
        UNSURE = typing___cast(SpoofDecision.ResultValue, 3)
    NOT_SPOOFED = typing___cast(SpoofDecision.ResultValue, 1)
    SPOOFED = typing___cast(SpoofDecision.ResultValue, 2)
    UNSURE = typing___cast(SpoofDecision.ResultValue, 3)
    type___Result = Result

    ReasonValue = typing___NewType('ReasonValue', builtin___int)
    type___ReasonValue = ReasonValue
    Reason: _Reason
    class _Reason(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[SpoofDecision.ReasonValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        ALL_REQUIRED_PASS = typing___cast(SpoofDecision.ReasonValue, 1)
        SOME_REQUIRED_DO_NOT_PASS = typing___cast(SpoofDecision.ReasonValue, 2)
        NONE_REQUIRED_PASS = typing___cast(SpoofDecision.ReasonValue, 3)
        SOFT_CHECKS_PASSED = typing___cast(SpoofDecision.ReasonValue, 4)
        FAILED_TO_SPOOFCHECK = typing___cast(SpoofDecision.ReasonValue, 5)
        FORWARDED_SQUAREUP = typing___cast(SpoofDecision.ReasonValue, 6)
        MISMATCHING_SENDER = typing___cast(SpoofDecision.ReasonValue, 7)
        MULTIPLE_FROM_HEADERS = typing___cast(SpoofDecision.ReasonValue, 8)
        NO_POLICY_FOR_DOMAIN = typing___cast(SpoofDecision.ReasonValue, 9)
        INCORRECT_BOUNDARY_TOKEN = typing___cast(SpoofDecision.ReasonValue, 10)
        FOUND_SENDER_HEADER = typing___cast(SpoofDecision.ReasonValue, 11)
    ALL_REQUIRED_PASS = typing___cast(SpoofDecision.ReasonValue, 1)
    SOME_REQUIRED_DO_NOT_PASS = typing___cast(SpoofDecision.ReasonValue, 2)
    NONE_REQUIRED_PASS = typing___cast(SpoofDecision.ReasonValue, 3)
    SOFT_CHECKS_PASSED = typing___cast(SpoofDecision.ReasonValue, 4)
    FAILED_TO_SPOOFCHECK = typing___cast(SpoofDecision.ReasonValue, 5)
    FORWARDED_SQUAREUP = typing___cast(SpoofDecision.ReasonValue, 6)
    MISMATCHING_SENDER = typing___cast(SpoofDecision.ReasonValue, 7)
    MULTIPLE_FROM_HEADERS = typing___cast(SpoofDecision.ReasonValue, 8)
    NO_POLICY_FOR_DOMAIN = typing___cast(SpoofDecision.ReasonValue, 9)
    INCORRECT_BOUNDARY_TOKEN = typing___cast(SpoofDecision.ReasonValue, 10)
    FOUND_SENDER_HEADER = typing___cast(SpoofDecision.ReasonValue, 11)
    type___Reason = Reason

    result: type___SpoofDecision.ResultValue = ...
    reason: type___SpoofDecision.ReasonValue = ...
    processed_with_default_policy: builtin___bool = ...

    def __init__(self,
        *,
        result : typing___Optional[type___SpoofDecision.ResultValue] = None,
        reason : typing___Optional[type___SpoofDecision.ReasonValue] = None,
        processed_with_default_policy : typing___Optional[builtin___bool] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"processed_with_default_policy",b"processed_with_default_policy",u"reason",b"reason",u"result",b"result"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"processed_with_default_policy",b"processed_with_default_policy",u"reason",b"reason",u"result",b"result"]) -> None: ...
type___SpoofDecision = SpoofDecision

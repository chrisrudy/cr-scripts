# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.multipass import encryption_pb2 as squareup_dot_multipass_dot_encryption__pb2


class EncryptionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DecryptEmail = channel.unary_unary(
                '/squareup.multipass.service.EncryptionService/DecryptEmail',
                request_serializer=squareup_dot_multipass_dot_encryption__pb2.DecryptEmailRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_encryption__pb2.DecryptEmailResponse.FromString,
                )
        self.DecryptParameters = channel.unary_unary(
                '/squareup.multipass.service.EncryptionService/DecryptParameters',
                request_serializer=squareup_dot_multipass_dot_encryption__pb2.DecryptParametersRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_encryption__pb2.DecryptParametersResponse.FromString,
                )
        self.EncryptParameters = channel.unary_unary(
                '/squareup.multipass.service.EncryptionService/EncryptParameters',
                request_serializer=squareup_dot_multipass_dot_encryption__pb2.EncryptParametersRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_encryption__pb2.EncryptParametersResponse.FromString,
                )


class EncryptionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DecryptEmail(self, request, context):
        """*
        Decrypts a string from encrypted email in the request. Intended for use by clients that want
        to decrypt encrypted email from 3rd party. For invalid input that cannot be decrypted,
        returns nothing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptParameters(self, request, context):
        """*
        Decrypts a string containing the key-valued pairs passed into the request. Intended for use by
        external services that want to decrypt a Multipass-encrypted URL. For invalid input that cannot
        be decrypted, returns an empty list of decrypted parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncryptParameters(self, request, context):
        """*
        Generates an encrypted string containing the key-value pairs passed in the request.  Currently
        used to securely pass an email or phone number to pre-fill the login webpage, for use in
        pre-generated URLs of the form /login?id=<encrypted_identifier>.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EncryptionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DecryptEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptEmail,
                    request_deserializer=squareup_dot_multipass_dot_encryption__pb2.DecryptEmailRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_encryption__pb2.DecryptEmailResponse.SerializeToString,
            ),
            'DecryptParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptParameters,
                    request_deserializer=squareup_dot_multipass_dot_encryption__pb2.DecryptParametersRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_encryption__pb2.DecryptParametersResponse.SerializeToString,
            ),
            'EncryptParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.EncryptParameters,
                    request_deserializer=squareup_dot_multipass_dot_encryption__pb2.EncryptParametersRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_encryption__pb2.EncryptParametersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.multipass.service.EncryptionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EncryptionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DecryptEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.EncryptionService/DecryptEmail',
            squareup_dot_multipass_dot_encryption__pb2.DecryptEmailRequest.SerializeToString,
            squareup_dot_multipass_dot_encryption__pb2.DecryptEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecryptParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.EncryptionService/DecryptParameters',
            squareup_dot_multipass_dot_encryption__pb2.DecryptParametersRequest.SerializeToString,
            squareup_dot_multipass_dot_encryption__pb2.DecryptParametersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncryptParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.EncryptionService/EncryptParameters',
            squareup_dot_multipass_dot_encryption__pb2.EncryptParametersRequest.SerializeToString,
            squareup_dot_multipass_dot_encryption__pb2.EncryptParametersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

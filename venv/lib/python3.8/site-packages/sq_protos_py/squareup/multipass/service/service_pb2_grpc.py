# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.common import messages_pb2 as squareup_dot_common_dot_messages__pb2
from sq_protos_py.squareup.multipass import common_pb2 as squareup_dot_multipass_dot_common__pb2
from sq_protos_py.squareup.multipass.service import service_pb2 as squareup_dot_multipass_dot_service_dot_service__pb2


class MultipassServiceStub(object):
    """------------- SERVICES ------------- //

    * This interface is used by front-ends that deal directly with client devices. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/NewSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.FromString,
                )
        self.NewDeviceSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/NewDeviceSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewDeviceSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.FromString,
                )
        self.NewPersonSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/NewPersonSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewPersonSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.FromString,
                )
        self.TrustedNewSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/TrustedNewSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.FromString,
                )
        self.TrustedNewOAuthSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/TrustedNewOAuthSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewOAuthSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewOAuthSessionResponse.FromString,
                )
        self.TrustedNewActorSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/TrustedNewActorSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewActorSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewActorSessionResponse.FromString,
                )
        self.ValidateSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/ValidateSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionResponse.FromString,
                )
        self.SelectMerchant = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/SelectMerchant',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.SelectMerchantRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.SelectMerchantResponse.FromString,
                )
        self.SelectUnit = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/SelectUnit',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.SelectUnitRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.SelectUnitResponse.FromString,
                )
        self.TerminateSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/TerminateSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateSessionResponse.FromString,
                )
        self.TerminateAllSessions = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/TerminateAllSessions',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateAllSessionsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateAllSessionsResponse.FromString,
                )
        self.TerminateActorSessions = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/TerminateActorSessions',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateActorSessionsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateActorSessionsResponse.FromString,
                )
        self.NewImpersonatedSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/NewImpersonatedSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewImpersonatedSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.FromString,
                )
        self.ChangePassword = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/ChangePassword',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ChangePasswordRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ChangePasswordResponse.FromString,
                )
        self.ResolveSessionToken = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/ResolveSessionToken',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ResolveSessionTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ResolveSessionTokenResponse.FromString,
                )
        self.ResolveSessionForOfflinePayments = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/ResolveSessionForOfflinePayments',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ResolveSessionTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionResponse.FromString,
                )
        self.CreateOtk = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/CreateOtk',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateOtkRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateOtkResponse.FromString,
                )
        self.ExchangeOtk = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/ExchangeOtk',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ExchangeOtkRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ExchangeOtkResponse.FromString,
                )
        self.CreateCredential = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/CreateCredential',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialResponse.FromString,
                )
        self.CreateCredentialWithSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/CreateCredentialWithSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialWithSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialWithSessionResponse.FromString,
                )
        self.CreateTokenizedCredential = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/CreateTokenizedCredential',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateTokenizedCredentialRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateTokenizedCredentialResponse.FromString,
                )
        self.ScrambleCredential = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/ScrambleCredential',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ScrambleCredentialRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ScrambleCredentialResponse.FromString,
                )
        self.SwapCredential = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/SwapCredential',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.SwapCredentialRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.SwapCredentialResponse.FromString,
                )
        self.GetCredential = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/GetCredential',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetCredentialRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetCredentialResponse.FromString,
                )
        self.BatchGetCredential = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/BatchGetCredential',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.BatchGetCredentialRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.BatchGetCredentialResponse.FromString,
                )
        self.CreateDeviceCredential = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/CreateDeviceCredential',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateDeviceCredentialRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateDeviceCredentialResponse.FromString,
                )
        self.MakeDeviceCredentialReusable = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/MakeDeviceCredentialReusable',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.MakeDeviceCredentialReusableRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.MakeDeviceCredentialReusableResponse.FromString,
                )
        self.QueryDeviceCredentials = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/QueryDeviceCredentials',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceCredentialsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceCredentialsResponse.FromString,
                )
        self.QueryDeviceSessions = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/QueryDeviceSessions',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceSessionsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceSessionsResponse.FromString,
                )
        self.ResetDeviceCredentialPassword = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/ResetDeviceCredentialPassword',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ResetDeviceCredentialPasswordRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ResetDevicePasswordResponse.FromString,
                )
        self.DeleteDeviceCredential = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/DeleteDeviceCredential',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.DeviceCredentialRequest.SerializeToString,
                response_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                )
        self.DeleteDeviceCredentials = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/DeleteDeviceCredentials',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.DeleteDeviceCredentialsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.DeleteDeviceCredentialsResponse.FromString,
                )
        self.CheckPassword = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/CheckPassword',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordResponse.FromString,
                )
        self.Invalidate = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/Invalidate',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.InvalidateRequest.SerializeToString,
                response_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                )
        self.GetPasswordResetLink = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/GetPasswordResetLink',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetPasswordResetLinkRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetPasswordResetLinkResponse.FromString,
                )
        self.GetClaimAccountLink = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/GetClaimAccountLink',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetClaimAccountLinkRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetClaimAccountLinkResponse.FromString,
                )
        self.ClaimAccountSendCode = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/ClaimAccountSendCode',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ClaimAccountSendCodeRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ClaimAccountSendCodeResponse.FromString,
                )
        self.CreateAuthorizationCode = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/CreateAuthorizationCode',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateAuthorizationCodeRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateAuthorizationCodeResponse.FromString,
                )
        self.RedeemAuthorizationCode = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/RedeemAuthorizationCode',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.RedeemAuthorizationCodeRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.RedeemAuthorizationCodeResponse.FromString,
                )
        self.CreateIdentityTokenFromSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/CreateIdentityTokenFromSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateIdentityTokenFromSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateIdentityTokenFromSessionResponse.FromString,
                )
        self.InternalSendEmailVerificationCode = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/InternalSendEmailVerificationCode',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.InternalSendEmailVerificationCodeRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.InternalSendEmailVerificationCodeResponse.FromString,
                )
        self.ChangeEmail = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/ChangeEmail',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ChangeEmailRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ChangeEmailResponse.FromString,
                )
        self.DeleteTwoFactorDetails = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/DeleteTwoFactorDetails',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.DeleteTwoFactorDetailsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.DeleteTwoFactorDetailsResponse.FromString,
                )
        self.LockoutPassword = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/LockoutPassword',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.LockoutPasswordRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.LockoutPasswordResponse.FromString,
                )
        self.ListTwoFactor = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/ListTwoFactor',
                request_serializer=squareup_dot_multipass_dot_common__pb2.ListTwoFactorRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_common__pb2.ListTwoFactorResponse.FromString,
                )
        self.IncrementPasswordVersion = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/IncrementPasswordVersion',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.IncrementPasswordVersionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.IncrementPasswordVersionResponse.FromString,
                )
        self.CheckPasswordPolicy = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/CheckPasswordPolicy',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordPolicyRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordPolicyResponse.FromString,
                )
        self.UpdateDeviceId = channel.unary_unary(
                '/squareup.multipass.service.MultipassService/UpdateDeviceId',
                request_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.UpdateDeviceIdRequest.SerializeToString,
                response_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                )


class MultipassServiceServicer(object):
    """------------- SERVICES ------------- //

    * This interface is used by front-ends that deal directly with client devices. 
    """

    def NewSession(self, request, context):
        """* Creates a new session for the given user, validating the password. (User logs in.) 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewDeviceSession(self, request, context):
        """* Creates a new session for the given device, validating the password. (Device logs in.) 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewPersonSession(self, request, context):
        """* Creates a new session for the given person_token, no password validation. (Person logs in.) 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrustedNewSession(self, request, context):
        """*
        Creates a new session for the given user, trusting the caller.
        DO NOT GRANT ACCESS TO THIS METHOD WITHOUT PROPER CONSIDERATION.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrustedNewOAuthSession(self, request, context):
        """*
        Creates a new oauth session for an existing platform account, trusting the caller.
        DO NOT GRANT ACCESS TO THIS METHOD WITHOUT PROPER CONSIDERATION.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrustedNewActorSession(self, request, context):
        """*
        Creates a new oauth session for an existing actor, trusting the caller.
        DO NOT GRANT ACCESS TO THIS METHOD WITHOUT PROPER CONSIDERATION.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateSession(self, request, context):
        """* Validates a client session. (All user requests.) 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectMerchant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectUnit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateSession(self, request, context):
        """* Terminates a client session. (User logs out.) 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateAllSessions(self, request, context):
        """* Terminates all sessions for a user. (User changes password.) 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateActorSessions(self, request, context):
        """* Terminates all sessions for an actor. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewImpersonatedSession(self, request, context):
        """* Creates an impersonated session, allowing an admin to log in as a user or device credential. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePassword(self, request, context):
        """Not actually implemented.  Someday....

        * Changes the user's password. Destroys all existing sessions, account wide! 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveSessionToken(self, request, context):
        """*
        Resolves a session token to the corresponding user/merchant identity. This is not intended
        for general use and is not appropriate for validating sessions. This method will return the
        corresponding user information, even if the specified session is expired or terminated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveSessionForOfflinePayments(self, request, context):
        """*
        Special method for offline payments flow; generates a credential whose only permission
        is PAYMENTS_WRITE.  The underlying session must be an API session and must have
        PAYMENTS_WRITE permission (or be unrestricted).

        This method BEHAVES DIFFERENTLY depending on whether the caller is web or queuebert.

        Legacy behavior for queuebert: produces a relatively short-lived credential for synchronously
        processing previously stored payments associated with a device session.  The underlying
        session may be expired or terminated.

        New behavior for web: produces a very long-lived credential which is sent to the device.
        Any subsequently-taken offline payments will be associated with this credential and sent to
        queuebert later with this credential (in lieu of a session).  This is a special exception to
        the general rule that credentials should not be sent to clients.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOtk(self, request, context):
        """* Create an OTK for an existing session. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeOtk(self, request, context):
        """*
        Resolve an OTK in exchange for a ClientSessionToken. These requests are idempotent over a
        short 30-second window before the OTK expires.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCredential(self, request, context):
        """*
        Create a new credential for the given email address and password. If a credential with this
        email address already exists and the supplied password matches the stored password, then the
        credential token is returned. If the email address already exists but the supplied password
        does not match, returns PASSWORD_INVALID. If the email address is not a valid email address,
        returns EMAIL_INVALID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCredentialWithSession(self, request, context):
        """*
        Create a new credential and a session. If the credential already exists, it is returned. If
        the credential cannot be verified (ie., no password) then the session will not be created.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTokenizedCredential(self, request, context):
        """*
        Create a new tokenized credential for certain types of accounts that normally wouldn't login.
        A token and email will be generated and password made unusable. In the future, once credentials
        only live in Multipass, tokenized credentials should not be necessary.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScrambleCredential(self, request, context):
        """*
        Scrambles a credential changing the its email to the supplied email and changing it's password
        so that the credential is unusable for login.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwapCredential(self, request, context):
        """*
        Swaps the credentials (email, password, person token) between a unit and employee.
        This is used during onboard to move the login credentials from the unit/legacy
        merchant to the employee.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCredential(self, request, context):
        """*
        Lookup a credential record.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetCredential(self, request, context):
        """*
        Batch Lookup a credential record.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDeviceCredential(self, request, context):
        """*
        Create a new device credential with a generated password.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeDeviceCredentialReusable(self, request, context):
        """*
        Make a device credential reusable. The request device credential token must be unpaired!
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryDeviceCredentials(self, request, context):
        """*
        Query device credential information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryDeviceSessions(self, request, context):
        """*
        Query session information per device.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetDeviceCredentialPassword(self, request, context):
        """*
        Reset the password for the given device credential, returning a newly generated password.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDeviceCredential(self, request, context):
        """*
        Deletes the specified device credential. Always succeeds (unless an RPC exception occurs),
        even if the specified device does not exist, for idempotence.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDeviceCredentials(self, request, context):
        """*
        Deletes the specified device credentials. Always succeeds (unless an RPC exception occurs),
        even if some specified devices do not exist, for idempotence. Fails if more than 100 devices
        are given.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckPassword(self, request, context):
        """*
        Check the password of the currently-logged-in user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Invalidate(self, request, context):
        """*
        Invalidates cached information, forcing subsequent refresh from source of truth.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPasswordResetLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClaimAccountLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimAccountSendCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAuthorizationCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RedeemAuthorizationCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIdentityTokenFromSession(self, request, context):
        """* Create a paseto token containing user information from the session information passed 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InternalSendEmailVerificationCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTwoFactorDetails(self, request, context):
        """* Delete the specified person's TwoFactorDetails from the staging Multipass database. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockoutPassword(self, request, context):
        """*
        Invalidate a person's password to force them to perform a password reset before successfully
        performing a password-based login. Used administratively as a response to a probable password
        compromise.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTwoFactor(self, request, context):
        """*
        List the 2FA methods for the current person. Ignore having multipass credentials since
        caller will pass the person token (e.g. from a Roster response) via the request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IncrementPasswordVersion(self, request, context):
        """*
        Increment password version to invalidate outstanding TrustedDeviceToken cookies.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckPasswordPolicy(self, request, context):
        """*
        Check that a password meets password policy requirements.

        Possible errors:
        {@code EMAIL_INVALID}
        {@code PASSWORD_FAILS_REQUIREMENTS}
        {@code PASSWORD_COMMON}
        {@code PASSWORD_COMPROMISED}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDeviceId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MultipassServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewSession': grpc.unary_unary_rpc_method_handler(
                    servicer.NewSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.SerializeToString,
            ),
            'NewDeviceSession': grpc.unary_unary_rpc_method_handler(
                    servicer.NewDeviceSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewDeviceSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.SerializeToString,
            ),
            'NewPersonSession': grpc.unary_unary_rpc_method_handler(
                    servicer.NewPersonSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewPersonSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.SerializeToString,
            ),
            'TrustedNewSession': grpc.unary_unary_rpc_method_handler(
                    servicer.TrustedNewSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.SerializeToString,
            ),
            'TrustedNewOAuthSession': grpc.unary_unary_rpc_method_handler(
                    servicer.TrustedNewOAuthSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewOAuthSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewOAuthSessionResponse.SerializeToString,
            ),
            'TrustedNewActorSession': grpc.unary_unary_rpc_method_handler(
                    servicer.TrustedNewActorSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewActorSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewActorSessionResponse.SerializeToString,
            ),
            'ValidateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionResponse.SerializeToString,
            ),
            'SelectMerchant': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectMerchant,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.SelectMerchantRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.SelectMerchantResponse.SerializeToString,
            ),
            'SelectUnit': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectUnit,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.SelectUnitRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.SelectUnitResponse.SerializeToString,
            ),
            'TerminateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateSessionResponse.SerializeToString,
            ),
            'TerminateAllSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateAllSessions,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateAllSessionsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateAllSessionsResponse.SerializeToString,
            ),
            'TerminateActorSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateActorSessions,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateActorSessionsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.TerminateActorSessionsResponse.SerializeToString,
            ),
            'NewImpersonatedSession': grpc.unary_unary_rpc_method_handler(
                    servicer.NewImpersonatedSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewImpersonatedSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.SerializeToString,
            ),
            'ChangePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePassword,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ChangePasswordRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ChangePasswordResponse.SerializeToString,
            ),
            'ResolveSessionToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveSessionToken,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ResolveSessionTokenRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ResolveSessionTokenResponse.SerializeToString,
            ),
            'ResolveSessionForOfflinePayments': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveSessionForOfflinePayments,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ResolveSessionTokenRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionResponse.SerializeToString,
            ),
            'CreateOtk': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOtk,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateOtkRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateOtkResponse.SerializeToString,
            ),
            'ExchangeOtk': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeOtk,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ExchangeOtkRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ExchangeOtkResponse.SerializeToString,
            ),
            'CreateCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCredential,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialResponse.SerializeToString,
            ),
            'CreateCredentialWithSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCredentialWithSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialWithSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialWithSessionResponse.SerializeToString,
            ),
            'CreateTokenizedCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTokenizedCredential,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateTokenizedCredentialRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateTokenizedCredentialResponse.SerializeToString,
            ),
            'ScrambleCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.ScrambleCredential,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ScrambleCredentialRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ScrambleCredentialResponse.SerializeToString,
            ),
            'SwapCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.SwapCredential,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.SwapCredentialRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.SwapCredentialResponse.SerializeToString,
            ),
            'GetCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCredential,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetCredentialRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetCredentialResponse.SerializeToString,
            ),
            'BatchGetCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetCredential,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.BatchGetCredentialRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.BatchGetCredentialResponse.SerializeToString,
            ),
            'CreateDeviceCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDeviceCredential,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateDeviceCredentialRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateDeviceCredentialResponse.SerializeToString,
            ),
            'MakeDeviceCredentialReusable': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeDeviceCredentialReusable,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.MakeDeviceCredentialReusableRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.MakeDeviceCredentialReusableResponse.SerializeToString,
            ),
            'QueryDeviceCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryDeviceCredentials,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceCredentialsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceCredentialsResponse.SerializeToString,
            ),
            'QueryDeviceSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryDeviceSessions,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceSessionsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceSessionsResponse.SerializeToString,
            ),
            'ResetDeviceCredentialPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetDeviceCredentialPassword,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ResetDeviceCredentialPasswordRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ResetDevicePasswordResponse.SerializeToString,
            ),
            'DeleteDeviceCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDeviceCredential,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.DeviceCredentialRequest.FromString,
                    response_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            ),
            'DeleteDeviceCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDeviceCredentials,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.DeleteDeviceCredentialsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.DeleteDeviceCredentialsResponse.SerializeToString,
            ),
            'CheckPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckPassword,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordResponse.SerializeToString,
            ),
            'Invalidate': grpc.unary_unary_rpc_method_handler(
                    servicer.Invalidate,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.InvalidateRequest.FromString,
                    response_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            ),
            'GetPasswordResetLink': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPasswordResetLink,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetPasswordResetLinkRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetPasswordResetLinkResponse.SerializeToString,
            ),
            'GetClaimAccountLink': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClaimAccountLink,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetClaimAccountLinkRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.GetClaimAccountLinkResponse.SerializeToString,
            ),
            'ClaimAccountSendCode': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimAccountSendCode,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ClaimAccountSendCodeRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ClaimAccountSendCodeResponse.SerializeToString,
            ),
            'CreateAuthorizationCode': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAuthorizationCode,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateAuthorizationCodeRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateAuthorizationCodeResponse.SerializeToString,
            ),
            'RedeemAuthorizationCode': grpc.unary_unary_rpc_method_handler(
                    servicer.RedeemAuthorizationCode,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.RedeemAuthorizationCodeRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.RedeemAuthorizationCodeResponse.SerializeToString,
            ),
            'CreateIdentityTokenFromSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIdentityTokenFromSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateIdentityTokenFromSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CreateIdentityTokenFromSessionResponse.SerializeToString,
            ),
            'InternalSendEmailVerificationCode': grpc.unary_unary_rpc_method_handler(
                    servicer.InternalSendEmailVerificationCode,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.InternalSendEmailVerificationCodeRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.InternalSendEmailVerificationCodeResponse.SerializeToString,
            ),
            'ChangeEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeEmail,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.ChangeEmailRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.ChangeEmailResponse.SerializeToString,
            ),
            'DeleteTwoFactorDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTwoFactorDetails,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.DeleteTwoFactorDetailsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.DeleteTwoFactorDetailsResponse.SerializeToString,
            ),
            'LockoutPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.LockoutPassword,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.LockoutPasswordRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.LockoutPasswordResponse.SerializeToString,
            ),
            'ListTwoFactor': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTwoFactor,
                    request_deserializer=squareup_dot_multipass_dot_common__pb2.ListTwoFactorRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_common__pb2.ListTwoFactorResponse.SerializeToString,
            ),
            'IncrementPasswordVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.IncrementPasswordVersion,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.IncrementPasswordVersionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.IncrementPasswordVersionResponse.SerializeToString,
            ),
            'CheckPasswordPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckPasswordPolicy,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordPolicyRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordPolicyResponse.SerializeToString,
            ),
            'UpdateDeviceId': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDeviceId,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_service__pb2.UpdateDeviceIdRequest.FromString,
                    response_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.multipass.service.MultipassService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MultipassService(object):
    """------------- SERVICES ------------- //

    * This interface is used by front-ends that deal directly with client devices. 
    """

    @staticmethod
    def NewSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/NewSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewDeviceSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/NewDeviceSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.NewDeviceSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewPersonSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/NewPersonSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.NewPersonSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrustedNewSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/TrustedNewSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrustedNewOAuthSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/TrustedNewOAuthSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewOAuthSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewOAuthSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrustedNewActorSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/TrustedNewActorSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewActorSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.TrustedNewActorSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/ValidateSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectMerchant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/SelectMerchant',
            squareup_dot_multipass_dot_service_dot_service__pb2.SelectMerchantRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.SelectMerchantResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectUnit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/SelectUnit',
            squareup_dot_multipass_dot_service_dot_service__pb2.SelectUnitRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.SelectUnitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/TerminateSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.TerminateSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.TerminateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateAllSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/TerminateAllSessions',
            squareup_dot_multipass_dot_service_dot_service__pb2.TerminateAllSessionsRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.TerminateAllSessionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateActorSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/TerminateActorSessions',
            squareup_dot_multipass_dot_service_dot_service__pb2.TerminateActorSessionsRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.TerminateActorSessionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewImpersonatedSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/NewImpersonatedSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.NewImpersonatedSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.NewSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/ChangePassword',
            squareup_dot_multipass_dot_service_dot_service__pb2.ChangePasswordRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.ChangePasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResolveSessionToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/ResolveSessionToken',
            squareup_dot_multipass_dot_service_dot_service__pb2.ResolveSessionTokenRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.ResolveSessionTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResolveSessionForOfflinePayments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/ResolveSessionForOfflinePayments',
            squareup_dot_multipass_dot_service_dot_service__pb2.ResolveSessionTokenRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.ValidateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateOtk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/CreateOtk',
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateOtkRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateOtkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeOtk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/ExchangeOtk',
            squareup_dot_multipass_dot_service_dot_service__pb2.ExchangeOtkRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.ExchangeOtkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/CreateCredential',
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCredentialWithSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/CreateCredentialWithSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialWithSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateCredentialWithSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTokenizedCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/CreateTokenizedCredential',
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateTokenizedCredentialRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateTokenizedCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ScrambleCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/ScrambleCredential',
            squareup_dot_multipass_dot_service_dot_service__pb2.ScrambleCredentialRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.ScrambleCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SwapCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/SwapCredential',
            squareup_dot_multipass_dot_service_dot_service__pb2.SwapCredentialRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.SwapCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/GetCredential',
            squareup_dot_multipass_dot_service_dot_service__pb2.GetCredentialRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.GetCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchGetCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/BatchGetCredential',
            squareup_dot_multipass_dot_service_dot_service__pb2.BatchGetCredentialRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.BatchGetCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDeviceCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/CreateDeviceCredential',
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateDeviceCredentialRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateDeviceCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakeDeviceCredentialReusable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/MakeDeviceCredentialReusable',
            squareup_dot_multipass_dot_service_dot_service__pb2.MakeDeviceCredentialReusableRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.MakeDeviceCredentialReusableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryDeviceCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/QueryDeviceCredentials',
            squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceCredentialsRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceCredentialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryDeviceSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/QueryDeviceSessions',
            squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceSessionsRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.QueryDeviceSessionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetDeviceCredentialPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/ResetDeviceCredentialPassword',
            squareup_dot_multipass_dot_service_dot_service__pb2.ResetDeviceCredentialPasswordRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.ResetDevicePasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDeviceCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/DeleteDeviceCredential',
            squareup_dot_multipass_dot_service_dot_service__pb2.DeviceCredentialRequest.SerializeToString,
            squareup_dot_common_dot_messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDeviceCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/DeleteDeviceCredentials',
            squareup_dot_multipass_dot_service_dot_service__pb2.DeleteDeviceCredentialsRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.DeleteDeviceCredentialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/CheckPassword',
            squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Invalidate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/Invalidate',
            squareup_dot_multipass_dot_service_dot_service__pb2.InvalidateRequest.SerializeToString,
            squareup_dot_common_dot_messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPasswordResetLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/GetPasswordResetLink',
            squareup_dot_multipass_dot_service_dot_service__pb2.GetPasswordResetLinkRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.GetPasswordResetLinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClaimAccountLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/GetClaimAccountLink',
            squareup_dot_multipass_dot_service_dot_service__pb2.GetClaimAccountLinkRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.GetClaimAccountLinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimAccountSendCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/ClaimAccountSendCode',
            squareup_dot_multipass_dot_service_dot_service__pb2.ClaimAccountSendCodeRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.ClaimAccountSendCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAuthorizationCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/CreateAuthorizationCode',
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateAuthorizationCodeRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateAuthorizationCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RedeemAuthorizationCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/RedeemAuthorizationCode',
            squareup_dot_multipass_dot_service_dot_service__pb2.RedeemAuthorizationCodeRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.RedeemAuthorizationCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateIdentityTokenFromSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/CreateIdentityTokenFromSession',
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateIdentityTokenFromSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.CreateIdentityTokenFromSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InternalSendEmailVerificationCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/InternalSendEmailVerificationCode',
            squareup_dot_multipass_dot_service_dot_service__pb2.InternalSendEmailVerificationCodeRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.InternalSendEmailVerificationCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/ChangeEmail',
            squareup_dot_multipass_dot_service_dot_service__pb2.ChangeEmailRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.ChangeEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTwoFactorDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/DeleteTwoFactorDetails',
            squareup_dot_multipass_dot_service_dot_service__pb2.DeleteTwoFactorDetailsRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.DeleteTwoFactorDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockoutPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/LockoutPassword',
            squareup_dot_multipass_dot_service_dot_service__pb2.LockoutPasswordRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.LockoutPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTwoFactor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/ListTwoFactor',
            squareup_dot_multipass_dot_common__pb2.ListTwoFactorRequest.SerializeToString,
            squareup_dot_multipass_dot_common__pb2.ListTwoFactorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IncrementPasswordVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/IncrementPasswordVersion',
            squareup_dot_multipass_dot_service_dot_service__pb2.IncrementPasswordVersionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.IncrementPasswordVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckPasswordPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/CheckPasswordPolicy',
            squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordPolicyRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_service__pb2.CheckPasswordPolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDeviceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassService/UpdateDeviceId',
            squareup_dot_multipass_dot_service_dot_service__pb2.UpdateDeviceIdRequest.SerializeToString,
            squareup_dot_common_dot_messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.multipass.service import master_pb2 as squareup_dot_multipass_dot_service_dot_master__pb2


class MultipassMasterServiceStub(object):
    """------------- SERVICES ------------- //

    * This interface is used by multipass slave instances to talk to the master. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ResolveSessionForSlave = channel.unary_unary(
                '/squareup.multipass.service.MultipassMasterService/ResolveSessionForSlave',
                request_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.ResolveSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.ResolveSessionResponse.FromString,
                )
        self.GetFeed = channel.unary_unary(
                '/squareup.multipass.service.MultipassMasterService/GetFeed',
                request_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.GetFeedRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.GetFeedResponse.FromString,
                )
        self.AdminLookup = channel.unary_unary(
                '/squareup.multipass.service.MultipassMasterService/AdminLookup',
                request_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLookupRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLookupResponse.FromString,
                )
        self.SetSessionPersonToken = channel.unary_unary(
                '/squareup.multipass.service.MultipassMasterService/SetSessionPersonToken',
                request_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.SetSessionPersonTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.SetSessionPersonTokenResponse.FromString,
                )
        self.TestConsumedWebServices = channel.unary_unary(
                '/squareup.multipass.service.MultipassMasterService/TestConsumedWebServices',
                request_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.TestConsumedWebServicesRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.TestConsumedWebServicesResponse.FromString,
                )
        self.AdminLoadCompromisedPasswordList = channel.unary_unary(
                '/squareup.multipass.service.MultipassMasterService/AdminLoadCompromisedPasswordList',
                request_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedPasswordListRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedPasswordListResponse.FromString,
                )
        self.AdminLoadCompromisedCredentials = channel.unary_unary(
                '/squareup.multipass.service.MultipassMasterService/AdminLoadCompromisedCredentials',
                request_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedCredentialsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedPasswordsResponse.FromString,
                )


class MultipassMasterServiceServicer(object):
    """------------- SERVICES ------------- //

    * This interface is used by multipass slave instances to talk to the master. 
    """

    def ResolveSessionForSlave(self, request, context):
        """* Resolve a client session. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeed(self, request, context):
        """* Request to download feed data to sync sessions across datacenters. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminLookup(self, request, context):
        """* Perform administrative lookups. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSessionPersonToken(self, request, context):
        """* Sets the session's person token across all datacenters. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestConsumedWebServices(self, request, context):
        """* Test each of the consumed web services. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminLoadCompromisedPasswordList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminLoadCompromisedCredentials(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MultipassMasterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ResolveSessionForSlave': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveSessionForSlave,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.ResolveSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.ResolveSessionResponse.SerializeToString,
            ),
            'GetFeed': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeed,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.GetFeedRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.GetFeedResponse.SerializeToString,
            ),
            'AdminLookup': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminLookup,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLookupRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLookupResponse.SerializeToString,
            ),
            'SetSessionPersonToken': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSessionPersonToken,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.SetSessionPersonTokenRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.SetSessionPersonTokenResponse.SerializeToString,
            ),
            'TestConsumedWebServices': grpc.unary_unary_rpc_method_handler(
                    servicer.TestConsumedWebServices,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.TestConsumedWebServicesRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.TestConsumedWebServicesResponse.SerializeToString,
            ),
            'AdminLoadCompromisedPasswordList': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminLoadCompromisedPasswordList,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedPasswordListRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedPasswordListResponse.SerializeToString,
            ),
            'AdminLoadCompromisedCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminLoadCompromisedCredentials,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedCredentialsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedPasswordsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.multipass.service.MultipassMasterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MultipassMasterService(object):
    """------------- SERVICES ------------- //

    * This interface is used by multipass slave instances to talk to the master. 
    """

    @staticmethod
    def ResolveSessionForSlave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassMasterService/ResolveSessionForSlave',
            squareup_dot_multipass_dot_service_dot_master__pb2.ResolveSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_master__pb2.ResolveSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassMasterService/GetFeed',
            squareup_dot_multipass_dot_service_dot_master__pb2.GetFeedRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_master__pb2.GetFeedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminLookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassMasterService/AdminLookup',
            squareup_dot_multipass_dot_service_dot_master__pb2.AdminLookupRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_master__pb2.AdminLookupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSessionPersonToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassMasterService/SetSessionPersonToken',
            squareup_dot_multipass_dot_service_dot_master__pb2.SetSessionPersonTokenRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_master__pb2.SetSessionPersonTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestConsumedWebServices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassMasterService/TestConsumedWebServices',
            squareup_dot_multipass_dot_service_dot_master__pb2.TestConsumedWebServicesRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_master__pb2.TestConsumedWebServicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminLoadCompromisedPasswordList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassMasterService/AdminLoadCompromisedPasswordList',
            squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedPasswordListRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedPasswordListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminLoadCompromisedCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassMasterService/AdminLoadCompromisedCredentials',
            squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedCredentialsRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_master__pb2.AdminLoadCompromisedPasswordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

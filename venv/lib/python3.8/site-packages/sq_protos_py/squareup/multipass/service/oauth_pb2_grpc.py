# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.multipass.service import error_pb2 as squareup_dot_multipass_dot_service_dot_error__pb2
from sq_protos_py.squareup.multipass.service import oauth_pb2 as squareup_dot_multipass_dot_service_dot_oauth__pb2


class MultipassOauthServiceStub(object):
    """------------- SERVICES ------------- //

    * This interface is used by oauth. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckRefreshToken = channel.unary_unary(
                '/squareup.multipass.service.MultipassOauthService/CheckRefreshToken',
                request_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.CheckRefreshTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.CheckRefreshTokenResponse.FromString,
                )
        self.CreateRefreshToken = channel.unary_unary(
                '/squareup.multipass.service.MultipassOauthService/CreateRefreshToken',
                request_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.CreateRefreshTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.CreateRefreshTokenResponse.FromString,
                )
        self.DeleteRefreshToken = channel.unary_unary(
                '/squareup.multipass.service.MultipassOauthService/DeleteRefreshToken',
                request_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.DeleteRefreshTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_error__pb2.ErrorOnlyResponse.FromString,
                )
        self.NewAccessTokenFromRefreshToken = channel.unary_unary(
                '/squareup.multipass.service.MultipassOauthService/NewAccessTokenFromRefreshToken',
                request_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.NewAccessTokenFromRefreshTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.NewAccessTokenFromRefreshTokenResponse.FromString,
                )
        self.TerminateAuthorization = channel.unary_unary(
                '/squareup.multipass.service.MultipassOauthService/TerminateAuthorization',
                request_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.TerminateAuthorizationRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_error__pb2.ErrorOnlyResponse.FromString,
                )
        self.BackfillRefreshToken = channel.unary_unary(
                '/squareup.multipass.service.MultipassOauthService/BackfillRefreshToken',
                request_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillRefreshTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillRefreshTokenResponse.FromString,
                )
        self.BackfillSession = channel.unary_unary(
                '/squareup.multipass.service.MultipassOauthService/BackfillSession',
                request_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillSessionResponse.FromString,
                )


class MultipassOauthServiceServicer(object):
    """------------- SERVICES ------------- //

    * This interface is used by oauth. 
    """

    def CheckRefreshToken(self, request, context):
        """*
        Checks a refresh token for validity and returns some data about it.

        Possible errors:
        {@code TOKEN_INVALID}
        {@code SESSION_ID_INVALID}
        {@code SESSION_ID_EXPIRED}
        {@code SESSION_ID_TERMINATED}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRefreshToken(self, request, context):
        """*
        Creates a new refresh token corresponding to a supplied session and OAuth authorization ID.

        Possible errors:
        {@code SESSION_ID_INVALID}
        {@code SESSION_ID_EXPIRED}
        {@code SESSION_ID_TERMINATED}
        {@code SESSION_ID_ASSUMED_INVALID}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRefreshToken(self, request, context):
        """*
        Delete an existing refresh token.

        Possible errors:
        none, since this is idempotent - deleting a non-existent refresh token will succeed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewAccessTokenFromRefreshToken(self, request, context):
        """*
        Create a new session with an access token from an existing, valid refresh token.

        Possible errors:
        {@code SESSION_ID_INVALID} if the refresh token is not valid or the underlying account is
        blocked from logins
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateAuthorization(self, request, context):
        """*
        Terminate all access tokens, refresh tokens, and sessions associated with an authorization.

        Possible errors:
        none, since this is idempotent - terminating an unknown authorization will succeed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackfillRefreshToken(self, request, context):
        """------ These are temporary APIs for backfilling existing OAuth tokens/sessions ------ //

        *
        Create a refresh token for an existing authorization.

        Idempotence maps the same refresh token to a given authorization_id.

        Possible errors:
        none
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackfillSession(self, request, context):
        """*
        Backfill a session for an existing authorization.  If the supplied session is no longer valid,
        it will be recreated with information from the supplied refresh token.  The session will be
        linked to the application/authorization from the refresh token, and if an access token is
        supplied it will be made a refrerence to the session.

        Idempotence: if a session already exists for the supplied access token, it will be returned.

        Possible errors:
        none
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MultipassOauthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckRefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckRefreshToken,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.CheckRefreshTokenRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.CheckRefreshTokenResponse.SerializeToString,
            ),
            'CreateRefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRefreshToken,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.CreateRefreshTokenRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.CreateRefreshTokenResponse.SerializeToString,
            ),
            'DeleteRefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRefreshToken,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.DeleteRefreshTokenRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_error__pb2.ErrorOnlyResponse.SerializeToString,
            ),
            'NewAccessTokenFromRefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.NewAccessTokenFromRefreshToken,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.NewAccessTokenFromRefreshTokenRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.NewAccessTokenFromRefreshTokenResponse.SerializeToString,
            ),
            'TerminateAuthorization': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateAuthorization,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.TerminateAuthorizationRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_error__pb2.ErrorOnlyResponse.SerializeToString,
            ),
            'BackfillRefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.BackfillRefreshToken,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillRefreshTokenRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillRefreshTokenResponse.SerializeToString,
            ),
            'BackfillSession': grpc.unary_unary_rpc_method_handler(
                    servicer.BackfillSession,
                    request_deserializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillSessionRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.multipass.service.MultipassOauthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MultipassOauthService(object):
    """------------- SERVICES ------------- //

    * This interface is used by oauth. 
    """

    @staticmethod
    def CheckRefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassOauthService/CheckRefreshToken',
            squareup_dot_multipass_dot_service_dot_oauth__pb2.CheckRefreshTokenRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_oauth__pb2.CheckRefreshTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassOauthService/CreateRefreshToken',
            squareup_dot_multipass_dot_service_dot_oauth__pb2.CreateRefreshTokenRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_oauth__pb2.CreateRefreshTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassOauthService/DeleteRefreshToken',
            squareup_dot_multipass_dot_service_dot_oauth__pb2.DeleteRefreshTokenRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_error__pb2.ErrorOnlyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewAccessTokenFromRefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassOauthService/NewAccessTokenFromRefreshToken',
            squareup_dot_multipass_dot_service_dot_oauth__pb2.NewAccessTokenFromRefreshTokenRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_oauth__pb2.NewAccessTokenFromRefreshTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateAuthorization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassOauthService/TerminateAuthorization',
            squareup_dot_multipass_dot_service_dot_oauth__pb2.TerminateAuthorizationRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_error__pb2.ErrorOnlyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BackfillRefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassOauthService/BackfillRefreshToken',
            squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillRefreshTokenRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillRefreshTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BackfillSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassOauthService/BackfillSession',
            squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillSessionRequest.SerializeToString,
            squareup_dot_multipass_dot_service_dot_oauth__pb2.BackfillSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

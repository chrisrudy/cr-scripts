# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.multipass import debug_pb2 as squareup_dot_multipass_dot_debug__pb2


class MultipassDebugServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DecodeEndUserCredential = channel.unary_unary(
                '/squareup.multipass.service.MultipassDebugService/DecodeEndUserCredential',
                request_serializer=squareup_dot_multipass_dot_debug__pb2.DecodeEndUserCredentialRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_debug__pb2.DecodeEndUserCredentialResponse.FromString,
                )
        self.DecodePermissions = channel.unary_unary(
                '/squareup.multipass.service.MultipassDebugService/DecodePermissions',
                request_serializer=squareup_dot_multipass_dot_debug__pb2.DecodePermissionsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_debug__pb2.DecodePermissionsResponse.FromString,
                )
        self.EncodePermissions = channel.unary_unary(
                '/squareup.multipass.service.MultipassDebugService/EncodePermissions',
                request_serializer=squareup_dot_multipass_dot_debug__pb2.EncodePermissionsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_debug__pb2.EncodePermissionsResponse.FromString,
                )
        self.GetCredentialDetails = channel.unary_unary(
                '/squareup.multipass.service.MultipassDebugService/GetCredentialDetails',
                request_serializer=squareup_dot_multipass_dot_debug__pb2.GetCredentialDetailsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_debug__pb2.GetCredentialDetailsResponse.FromString,
                )
        self.GetPasswordCheckResults = channel.unary_unary(
                '/squareup.multipass.service.MultipassDebugService/GetPasswordCheckResults',
                request_serializer=squareup_dot_multipass_dot_debug__pb2.GetPasswordCheckResultsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_debug__pb2.GetPasswordCheckResultsResponse.FromString,
                )
        self.GetTwoFactorDetails = channel.unary_unary(
                '/squareup.multipass.service.MultipassDebugService/GetTwoFactorDetails',
                request_serializer=squareup_dot_multipass_dot_debug__pb2.GetTwoFactorDetailsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_debug__pb2.GetTwoFactorDetailsResponse.FromString,
                )
        self.GetSessionSelectionToken = channel.unary_unary(
                '/squareup.multipass.service.MultipassDebugService/GetSessionSelectionToken',
                request_serializer=squareup_dot_multipass_dot_debug__pb2.GetSessionSelectionTokenRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_debug__pb2.GetSessionSelectionTokenResponse.FromString,
                )
        self.ListDeviceCredentials = channel.unary_unary(
                '/squareup.multipass.service.MultipassDebugService/ListDeviceCredentials',
                request_serializer=squareup_dot_multipass_dot_debug__pb2.ListDeviceCredentialsRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_debug__pb2.ListDeviceCredentialsResponse.FromString,
                )


class MultipassDebugServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DecodeEndUserCredential(self, request, context):
        """* Request to decode an EndUserCredential into a LoggedInUser. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecodePermissions(self, request, context):
        """* Request to decode a Permissions BitVector into human-readable form. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncodePermissions(self, request, context):
        """* Request to decode a Permissions BitVector into human-readable form. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCredentialDetails(self, request, context):
        """* Request to get details about a credential. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPasswordCheckResults(self, request, context):
        """* Request to get password check results. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTwoFactorDetails(self, request, context):
        """* Request to list two factor methods for a person. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSessionSelectionToken(self, request, context):
        """* Get the selection token and type for a given session. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDeviceCredentials(self, request, context):
        """*
        List the device credentials that match the given criteria using a logical AND when multiple
        terms are used.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MultipassDebugServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DecodeEndUserCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodeEndUserCredential,
                    request_deserializer=squareup_dot_multipass_dot_debug__pb2.DecodeEndUserCredentialRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_debug__pb2.DecodeEndUserCredentialResponse.SerializeToString,
            ),
            'DecodePermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodePermissions,
                    request_deserializer=squareup_dot_multipass_dot_debug__pb2.DecodePermissionsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_debug__pb2.DecodePermissionsResponse.SerializeToString,
            ),
            'EncodePermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.EncodePermissions,
                    request_deserializer=squareup_dot_multipass_dot_debug__pb2.EncodePermissionsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_debug__pb2.EncodePermissionsResponse.SerializeToString,
            ),
            'GetCredentialDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCredentialDetails,
                    request_deserializer=squareup_dot_multipass_dot_debug__pb2.GetCredentialDetailsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_debug__pb2.GetCredentialDetailsResponse.SerializeToString,
            ),
            'GetPasswordCheckResults': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPasswordCheckResults,
                    request_deserializer=squareup_dot_multipass_dot_debug__pb2.GetPasswordCheckResultsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_debug__pb2.GetPasswordCheckResultsResponse.SerializeToString,
            ),
            'GetTwoFactorDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTwoFactorDetails,
                    request_deserializer=squareup_dot_multipass_dot_debug__pb2.GetTwoFactorDetailsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_debug__pb2.GetTwoFactorDetailsResponse.SerializeToString,
            ),
            'GetSessionSelectionToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSessionSelectionToken,
                    request_deserializer=squareup_dot_multipass_dot_debug__pb2.GetSessionSelectionTokenRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_debug__pb2.GetSessionSelectionTokenResponse.SerializeToString,
            ),
            'ListDeviceCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDeviceCredentials,
                    request_deserializer=squareup_dot_multipass_dot_debug__pb2.ListDeviceCredentialsRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_debug__pb2.ListDeviceCredentialsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.multipass.service.MultipassDebugService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MultipassDebugService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DecodeEndUserCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassDebugService/DecodeEndUserCredential',
            squareup_dot_multipass_dot_debug__pb2.DecodeEndUserCredentialRequest.SerializeToString,
            squareup_dot_multipass_dot_debug__pb2.DecodeEndUserCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecodePermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassDebugService/DecodePermissions',
            squareup_dot_multipass_dot_debug__pb2.DecodePermissionsRequest.SerializeToString,
            squareup_dot_multipass_dot_debug__pb2.DecodePermissionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncodePermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassDebugService/EncodePermissions',
            squareup_dot_multipass_dot_debug__pb2.EncodePermissionsRequest.SerializeToString,
            squareup_dot_multipass_dot_debug__pb2.EncodePermissionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCredentialDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassDebugService/GetCredentialDetails',
            squareup_dot_multipass_dot_debug__pb2.GetCredentialDetailsRequest.SerializeToString,
            squareup_dot_multipass_dot_debug__pb2.GetCredentialDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPasswordCheckResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassDebugService/GetPasswordCheckResults',
            squareup_dot_multipass_dot_debug__pb2.GetPasswordCheckResultsRequest.SerializeToString,
            squareup_dot_multipass_dot_debug__pb2.GetPasswordCheckResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTwoFactorDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassDebugService/GetTwoFactorDetails',
            squareup_dot_multipass_dot_debug__pb2.GetTwoFactorDetailsRequest.SerializeToString,
            squareup_dot_multipass_dot_debug__pb2.GetTwoFactorDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSessionSelectionToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassDebugService/GetSessionSelectionToken',
            squareup_dot_multipass_dot_debug__pb2.GetSessionSelectionTokenRequest.SerializeToString,
            squareup_dot_multipass_dot_debug__pb2.GetSessionSelectionTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDeviceCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.service.MultipassDebugService/ListDeviceCredentials',
            squareup_dot_multipass_dot_debug__pb2.ListDeviceCredentialsRequest.SerializeToString,
            squareup_dot_multipass_dot_debug__pb2.ListDeviceCredentialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

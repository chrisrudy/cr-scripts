# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.multipass import confidence_pb2 as squareup_dot_multipass_dot_confidence__pb2


class MultipassConfidenceServiceStub(object):
    """------------- SERVICES ------------- //

    * This interface is used by clients/people working with the confidence engine. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddRuleSet = channel.unary_unary(
                '/squareup.multipass.confidence.MultipassConfidenceService/AddRuleSet',
                request_serializer=squareup_dot_multipass_dot_confidence__pb2.AddRuleSetRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_confidence__pb2.AddRuleSetResponse.FromString,
                )
        self.GetRuleSet = channel.unary_unary(
                '/squareup.multipass.confidence.MultipassConfidenceService/GetRuleSet',
                request_serializer=squareup_dot_multipass_dot_confidence__pb2.GetRuleSetRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_confidence__pb2.GetRuleSetResponse.FromString,
                )
        self.RefreshRuleSet = channel.unary_unary(
                '/squareup.multipass.confidence.MultipassConfidenceService/RefreshRuleSet',
                request_serializer=squareup_dot_multipass_dot_confidence__pb2.RefreshRuleSetRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_confidence__pb2.RefreshRuleSetResponse.FromString,
                )
        self.AddList = channel.unary_unary(
                '/squareup.multipass.confidence.MultipassConfidenceService/AddList',
                request_serializer=squareup_dot_multipass_dot_confidence__pb2.AddListRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_confidence__pb2.AddListResponse.FromString,
                )
        self.UpdateList = channel.unary_unary(
                '/squareup.multipass.confidence.MultipassConfidenceService/UpdateList',
                request_serializer=squareup_dot_multipass_dot_confidence__pb2.UpdateListRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_confidence__pb2.UpdateListResponse.FromString,
                )
        self.RemoveList = channel.unary_unary(
                '/squareup.multipass.confidence.MultipassConfidenceService/RemoveList',
                request_serializer=squareup_dot_multipass_dot_confidence__pb2.RemoveListRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_confidence__pb2.RemoveListResponse.FromString,
                )
        self.RefreshList = channel.unary_unary(
                '/squareup.multipass.confidence.MultipassConfidenceService/RefreshList',
                request_serializer=squareup_dot_multipass_dot_confidence__pb2.RefreshListRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_confidence__pb2.RefreshListResponse.FromString,
                )
        self.CalculateScore = channel.unary_unary(
                '/squareup.multipass.confidence.MultipassConfidenceService/CalculateScore',
                request_serializer=squareup_dot_multipass_dot_confidence__pb2.CalculateScoreRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_confidence__pb2.CalculateScoreResponse.FromString,
                )


class MultipassConfidenceServiceServicer(object):
    """------------- SERVICES ------------- //

    * This interface is used by clients/people working with the confidence engine. 
    """

    def AddRuleSet(self, request, context):
        """e.g. https://api.squareup.com/services/squareup.multipass.confidence.MultipassConfidenceService/AddRuleSet

        * Add a RuleSet for the Confidence Engine. Initially this replaces any existing rules so that
        there is only ever one RuleSet in the database at a given time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRuleSet(self, request, context):
        """* Get RuleSets from the database or memory. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshRuleSet(self, request, context):
        """* Refresh a/all RuleSet 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddList(self, request, context):
        """* Add a List. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateList(self, request, context):
        """* Update a List. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveList(self, request, context):
        """* Remove a List. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshList(self, request, context):
        """* Refresh a/all List. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateScore(self, request, context):
        """* Calculate a confidence score based on provided session data. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MultipassConfidenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddRuleSet': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRuleSet,
                    request_deserializer=squareup_dot_multipass_dot_confidence__pb2.AddRuleSetRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_confidence__pb2.AddRuleSetResponse.SerializeToString,
            ),
            'GetRuleSet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRuleSet,
                    request_deserializer=squareup_dot_multipass_dot_confidence__pb2.GetRuleSetRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_confidence__pb2.GetRuleSetResponse.SerializeToString,
            ),
            'RefreshRuleSet': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshRuleSet,
                    request_deserializer=squareup_dot_multipass_dot_confidence__pb2.RefreshRuleSetRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_confidence__pb2.RefreshRuleSetResponse.SerializeToString,
            ),
            'AddList': grpc.unary_unary_rpc_method_handler(
                    servicer.AddList,
                    request_deserializer=squareup_dot_multipass_dot_confidence__pb2.AddListRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_confidence__pb2.AddListResponse.SerializeToString,
            ),
            'UpdateList': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateList,
                    request_deserializer=squareup_dot_multipass_dot_confidence__pb2.UpdateListRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_confidence__pb2.UpdateListResponse.SerializeToString,
            ),
            'RemoveList': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveList,
                    request_deserializer=squareup_dot_multipass_dot_confidence__pb2.RemoveListRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_confidence__pb2.RemoveListResponse.SerializeToString,
            ),
            'RefreshList': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshList,
                    request_deserializer=squareup_dot_multipass_dot_confidence__pb2.RefreshListRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_confidence__pb2.RefreshListResponse.SerializeToString,
            ),
            'CalculateScore': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateScore,
                    request_deserializer=squareup_dot_multipass_dot_confidence__pb2.CalculateScoreRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_confidence__pb2.CalculateScoreResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.multipass.confidence.MultipassConfidenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MultipassConfidenceService(object):
    """------------- SERVICES ------------- //

    * This interface is used by clients/people working with the confidence engine. 
    """

    @staticmethod
    def AddRuleSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.confidence.MultipassConfidenceService/AddRuleSet',
            squareup_dot_multipass_dot_confidence__pb2.AddRuleSetRequest.SerializeToString,
            squareup_dot_multipass_dot_confidence__pb2.AddRuleSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRuleSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.confidence.MultipassConfidenceService/GetRuleSet',
            squareup_dot_multipass_dot_confidence__pb2.GetRuleSetRequest.SerializeToString,
            squareup_dot_multipass_dot_confidence__pb2.GetRuleSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshRuleSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.confidence.MultipassConfidenceService/RefreshRuleSet',
            squareup_dot_multipass_dot_confidence__pb2.RefreshRuleSetRequest.SerializeToString,
            squareup_dot_multipass_dot_confidence__pb2.RefreshRuleSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.confidence.MultipassConfidenceService/AddList',
            squareup_dot_multipass_dot_confidence__pb2.AddListRequest.SerializeToString,
            squareup_dot_multipass_dot_confidence__pb2.AddListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.confidence.MultipassConfidenceService/UpdateList',
            squareup_dot_multipass_dot_confidence__pb2.UpdateListRequest.SerializeToString,
            squareup_dot_multipass_dot_confidence__pb2.UpdateListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.confidence.MultipassConfidenceService/RemoveList',
            squareup_dot_multipass_dot_confidence__pb2.RemoveListRequest.SerializeToString,
            squareup_dot_multipass_dot_confidence__pb2.RemoveListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.confidence.MultipassConfidenceService/RefreshList',
            squareup_dot_multipass_dot_confidence__pb2.RefreshListRequest.SerializeToString,
            squareup_dot_multipass_dot_confidence__pb2.RefreshListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateScore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.confidence.MultipassConfidenceService/CalculateScore',
            squareup_dot_multipass_dot_confidence__pb2.CalculateScoreRequest.SerializeToString,
            squareup_dot_multipass_dot_confidence__pb2.CalculateScoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

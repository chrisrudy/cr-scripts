# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.common import messages_pb2 as squareup_dot_common_dot_messages__pb2
from sq_protos_py.squareup.multipass import app_pb2 as squareup_dot_multipass_dot_app__pb2


class MultipassAppServiceStub(object):
    """e.g. https://api.squareup.com/services/squareup.multipass.external.MultipassAppService/AppLogin
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AppLogin = channel.unary_unary(
                '/squareup.multipass.external.MultipassAppService/AppLogin',
                request_serializer=squareup_dot_multipass_dot_app__pb2.AppLoginRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_app__pb2.AppLoginResponse.FromString,
                )
        self.AppLogout = channel.unary_unary(
                '/squareup.multipass.external.MultipassAppService/AppLogout',
                request_serializer=squareup_dot_multipass_dot_app__pb2.AppLogoutRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_app__pb2.AppLogoutResponse.FromString,
                )
        self.AppEnrollTwoFactor = channel.unary_unary(
                '/squareup.multipass.external.MultipassAppService/AppEnrollTwoFactor',
                request_serializer=squareup_dot_multipass_dot_app__pb2.AppEnrollTwoFactorRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_app__pb2.AppEnrollTwoFactorResponse.FromString,
                )
        self.AppSendVerificationCodeTwoFactor = channel.unary_unary(
                '/squareup.multipass.external.MultipassAppService/AppSendVerificationCodeTwoFactor',
                request_serializer=squareup_dot_multipass_dot_app__pb2.AppSendVerificationCodeTwoFactorRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_app__pb2.AppSendVerificationCodeTwoFactorResponse.FromString,
                )
        self.AppUpgradeSessionTwoFactor = channel.unary_unary(
                '/squareup.multipass.external.MultipassAppService/AppUpgradeSessionTwoFactor',
                request_serializer=squareup_dot_multipass_dot_app__pb2.AppUpgradeSessionTwoFactorRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_app__pb2.AppUpgradeSessionTwoFactorResponse.FromString,
                )
        self.AppMerchantSelect = channel.unary_unary(
                '/squareup.multipass.external.MultipassAppService/AppMerchantSelect',
                request_serializer=squareup_dot_multipass_dot_app__pb2.AppMerchantSelectRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_app__pb2.AppMerchantSelectResponse.FromString,
                )
        self.AppCheckPassword = channel.unary_unary(
                '/squareup.multipass.external.MultipassAppService/AppCheckPassword',
                request_serializer=squareup_dot_multipass_dot_app__pb2.AppCheckPasswordRequest.SerializeToString,
                response_deserializer=squareup_dot_multipass_dot_app__pb2.AppCheckPasswordResponse.FromString,
                )
        self.AppUpdateDeviceId = channel.unary_unary(
                '/squareup.multipass.external.MultipassAppService/AppUpdateDeviceId',
                request_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
                response_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                )


class MultipassAppServiceServicer(object):
    """e.g. https://api.squareup.com/services/squareup.multipass.external.MultipassAppService/AppLogin
    """

    def AppLogin(self, request, context):
        """*
        Creates a "default" API session. The merchant token will not be set unless the account has a
        single employment with Dashboard access.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppLogout(self, request, context):
        """* Log out of the current session. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppEnrollTwoFactor(self, request, context):
        """*
        Add a 2FA method for the current person.

        Enrollment will usually require multiple calls, passing data back and forth between client
        and server until an RPC returns an error or complete=true.  The data parameters required for
        the first call, what should be done with server-provided values, and which ones need to be
        passed back to the next step will be documented for each type.

        For SMS, the first call must supply phone, which will cause a verification code to be sent.
        The second call must have both phone and verification_code set, and will complete successfully
        if the supplied code matches.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppSendVerificationCodeTwoFactor(self, request, context):
        """* Create a new verification code for two factor auth and sends the code to the requested contact. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppUpgradeSessionTwoFactor(self, request, context):
        """* Upgrade the current session to a 2FA-protected session. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppMerchantSelect(self, request, context):
        """*
        Scope the currently logged-in session to a given merchant. The session token returned should be
        used in all future requests, including subsequent calls to AppMerchantSelect.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppCheckPassword(self, request, context):
        """* Check that provided password matches the logged-in user's password. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppUpdateDeviceId(self, request, context):
        """* Update device IDs 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MultipassAppServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AppLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.AppLogin,
                    request_deserializer=squareup_dot_multipass_dot_app__pb2.AppLoginRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_app__pb2.AppLoginResponse.SerializeToString,
            ),
            'AppLogout': grpc.unary_unary_rpc_method_handler(
                    servicer.AppLogout,
                    request_deserializer=squareup_dot_multipass_dot_app__pb2.AppLogoutRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_app__pb2.AppLogoutResponse.SerializeToString,
            ),
            'AppEnrollTwoFactor': grpc.unary_unary_rpc_method_handler(
                    servicer.AppEnrollTwoFactor,
                    request_deserializer=squareup_dot_multipass_dot_app__pb2.AppEnrollTwoFactorRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_app__pb2.AppEnrollTwoFactorResponse.SerializeToString,
            ),
            'AppSendVerificationCodeTwoFactor': grpc.unary_unary_rpc_method_handler(
                    servicer.AppSendVerificationCodeTwoFactor,
                    request_deserializer=squareup_dot_multipass_dot_app__pb2.AppSendVerificationCodeTwoFactorRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_app__pb2.AppSendVerificationCodeTwoFactorResponse.SerializeToString,
            ),
            'AppUpgradeSessionTwoFactor': grpc.unary_unary_rpc_method_handler(
                    servicer.AppUpgradeSessionTwoFactor,
                    request_deserializer=squareup_dot_multipass_dot_app__pb2.AppUpgradeSessionTwoFactorRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_app__pb2.AppUpgradeSessionTwoFactorResponse.SerializeToString,
            ),
            'AppMerchantSelect': grpc.unary_unary_rpc_method_handler(
                    servicer.AppMerchantSelect,
                    request_deserializer=squareup_dot_multipass_dot_app__pb2.AppMerchantSelectRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_app__pb2.AppMerchantSelectResponse.SerializeToString,
            ),
            'AppCheckPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.AppCheckPassword,
                    request_deserializer=squareup_dot_multipass_dot_app__pb2.AppCheckPasswordRequest.FromString,
                    response_serializer=squareup_dot_multipass_dot_app__pb2.AppCheckPasswordResponse.SerializeToString,
            ),
            'AppUpdateDeviceId': grpc.unary_unary_rpc_method_handler(
                    servicer.AppUpdateDeviceId,
                    request_deserializer=squareup_dot_common_dot_messages__pb2.Empty.FromString,
                    response_serializer=squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.multipass.external.MultipassAppService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MultipassAppService(object):
    """e.g. https://api.squareup.com/services/squareup.multipass.external.MultipassAppService/AppLogin
    """

    @staticmethod
    def AppLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.external.MultipassAppService/AppLogin',
            squareup_dot_multipass_dot_app__pb2.AppLoginRequest.SerializeToString,
            squareup_dot_multipass_dot_app__pb2.AppLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppLogout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.external.MultipassAppService/AppLogout',
            squareup_dot_multipass_dot_app__pb2.AppLogoutRequest.SerializeToString,
            squareup_dot_multipass_dot_app__pb2.AppLogoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppEnrollTwoFactor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.external.MultipassAppService/AppEnrollTwoFactor',
            squareup_dot_multipass_dot_app__pb2.AppEnrollTwoFactorRequest.SerializeToString,
            squareup_dot_multipass_dot_app__pb2.AppEnrollTwoFactorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppSendVerificationCodeTwoFactor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.external.MultipassAppService/AppSendVerificationCodeTwoFactor',
            squareup_dot_multipass_dot_app__pb2.AppSendVerificationCodeTwoFactorRequest.SerializeToString,
            squareup_dot_multipass_dot_app__pb2.AppSendVerificationCodeTwoFactorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppUpgradeSessionTwoFactor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.external.MultipassAppService/AppUpgradeSessionTwoFactor',
            squareup_dot_multipass_dot_app__pb2.AppUpgradeSessionTwoFactorRequest.SerializeToString,
            squareup_dot_multipass_dot_app__pb2.AppUpgradeSessionTwoFactorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppMerchantSelect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.external.MultipassAppService/AppMerchantSelect',
            squareup_dot_multipass_dot_app__pb2.AppMerchantSelectRequest.SerializeToString,
            squareup_dot_multipass_dot_app__pb2.AppMerchantSelectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppCheckPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.external.MultipassAppService/AppCheckPassword',
            squareup_dot_multipass_dot_app__pb2.AppCheckPasswordRequest.SerializeToString,
            squareup_dot_multipass_dot_app__pb2.AppCheckPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppUpdateDeviceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.multipass.external.MultipassAppService/AppUpdateDeviceId',
            squareup_dot_common_dot_messages__pb2.Empty.SerializeToString,
            squareup_dot_common_dot_messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

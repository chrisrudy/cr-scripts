# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.orca import service_pb2 as squareup_dot_orca_dot_service__pb2


class OrcaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
                '/squareup.orca.service.OrcaService/SendMessage',
                request_serializer=squareup_dot_orca_dot_service__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=squareup_dot_orca_dot_service__pb2.SendMessageResponse.FromString,
                )
        self.GetRandomNumber = channel.unary_unary(
                '/squareup.orca.service.OrcaService/GetRandomNumber',
                request_serializer=squareup_dot_orca_dot_service__pb2.GetRandomNumberRequest.SerializeToString,
                response_deserializer=squareup_dot_orca_dot_service__pb2.GetRandomNumberResponse.FromString,
                )
        self.GetFeatureVariation = channel.unary_unary(
                '/squareup.orca.service.OrcaService/GetFeatureVariation',
                request_serializer=squareup_dot_orca_dot_service__pb2.GetFeatureVariationRequest.SerializeToString,
                response_deserializer=squareup_dot_orca_dot_service__pb2.GetFeatureVariationResponse.FromString,
                )


class OrcaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendMessage(self, request, context):
        """Send a message to orca. Idempotent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRandomNumber(self, request, context):
        """Get a random number from orca. Not idempotent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeatureVariation(self, request, context):
        """Get a feature flag from LaunchDarkly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrcaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=squareup_dot_orca_dot_service__pb2.SendMessageRequest.FromString,
                    response_serializer=squareup_dot_orca_dot_service__pb2.SendMessageResponse.SerializeToString,
            ),
            'GetRandomNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRandomNumber,
                    request_deserializer=squareup_dot_orca_dot_service__pb2.GetRandomNumberRequest.FromString,
                    response_serializer=squareup_dot_orca_dot_service__pb2.GetRandomNumberResponse.SerializeToString,
            ),
            'GetFeatureVariation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeatureVariation,
                    request_deserializer=squareup_dot_orca_dot_service__pb2.GetFeatureVariationRequest.FromString,
                    response_serializer=squareup_dot_orca_dot_service__pb2.GetFeatureVariationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.orca.service.OrcaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrcaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.orca.service.OrcaService/SendMessage',
            squareup_dot_orca_dot_service__pb2.SendMessageRequest.SerializeToString,
            squareup_dot_orca_dot_service__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRandomNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.orca.service.OrcaService/GetRandomNumber',
            squareup_dot_orca_dot_service__pb2.GetRandomNumberRequest.SerializeToString,
            squareup_dot_orca_dot_service__pb2.GetRandomNumberResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFeatureVariation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.orca.service.OrcaService/GetFeatureVariation',
            squareup_dot_orca_dot_service__pb2.GetFeatureVariationRequest.SerializeToString,
            squareup_dot_orca_dot_service__pb2.GetFeatureVariationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

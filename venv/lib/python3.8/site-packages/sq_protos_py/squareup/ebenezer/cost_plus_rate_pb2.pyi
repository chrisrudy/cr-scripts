# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from sq_protos_py.squareup.common.countries_pb2 import (
    CountryValue as squareup___common___countries_pb2___CountryValue,
)

from sq_protos_py.squareup.common.currency_codes_pb2 import (
    CurrencyCodeValue as squareup___common___currency_codes_pb2___CurrencyCodeValue,
)

from sq_protos_py.squareup.common.time_pb2 import (
    DateTime as squareup___common___time_pb2___DateTime,
)

from sq_protos_py.squareup.feeplans.model_pb2 import (
    TokenTypeValue as squareup___feeplans___model_pb2___TokenTypeValue,
)

from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class CostPlusRate(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    unit_token: typing___Text = ...
    country: squareup___common___countries_pb2___CountryValue = ...
    currency_code: squareup___common___currency_codes_pb2___CurrencyCodeValue = ...
    margin_basis_points: builtin___int = ...
    margin_cents: builtin___int = ...
    token: typing___Text = ...
    token_type: squareup___feeplans___model_pb2___TokenTypeValue = ...

    @property
    def effective_at(self) -> squareup___common___time_pb2___DateTime: ...

    @property
    def expire_at(self) -> squareup___common___time_pb2___DateTime: ...

    def __init__(self,
        *,
        unit_token : typing___Optional[typing___Text] = None,
        country : typing___Optional[squareup___common___countries_pb2___CountryValue] = None,
        currency_code : typing___Optional[squareup___common___currency_codes_pb2___CurrencyCodeValue] = None,
        margin_basis_points : typing___Optional[builtin___int] = None,
        margin_cents : typing___Optional[builtin___int] = None,
        effective_at : typing___Optional[squareup___common___time_pb2___DateTime] = None,
        expire_at : typing___Optional[squareup___common___time_pb2___DateTime] = None,
        token : typing___Optional[typing___Text] = None,
        token_type : typing___Optional[squareup___feeplans___model_pb2___TokenTypeValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"country",b"country",u"currency_code",b"currency_code",u"effective_at",b"effective_at",u"expire_at",b"expire_at",u"margin_basis_points",b"margin_basis_points",u"margin_cents",b"margin_cents",u"token",b"token",u"token_type",b"token_type",u"unit_token",b"unit_token"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"country",b"country",u"currency_code",b"currency_code",u"effective_at",b"effective_at",u"expire_at",b"expire_at",u"margin_basis_points",b"margin_basis_points",u"margin_cents",b"margin_cents",u"token",b"token",u"token_type",b"token_type",u"unit_token",b"unit_token"]) -> None: ...
type___CostPlusRate = CostPlusRate

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.costplus import service_pb2 as squareup_dot_costplus_dot_service__pb2


class CostPlusAdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateFakeReportedFee = channel.unary_unary(
                '/squareup.costplus.service.CostPlusAdminService/CreateFakeReportedFee',
                request_serializer=squareup_dot_costplus_dot_service__pb2.CreateFakeReportedFeeRequest.SerializeToString,
                response_deserializer=squareup_dot_costplus_dot_service__pb2.CreateFakeReportedFeeResponse.FromString,
                )
        self.ForceSettleAllReadyFees = channel.unary_unary(
                '/squareup.costplus.service.CostPlusAdminService/ForceSettleAllReadyFees',
                request_serializer=squareup_dot_costplus_dot_service__pb2.ForceSettleAllReadyFeesRequest.SerializeToString,
                response_deserializer=squareup_dot_costplus_dot_service__pb2.ForceSettleAllReadyFeesResponse.FromString,
                )
        self.GetShardForUnit = channel.unary_unary(
                '/squareup.costplus.service.CostPlusAdminService/GetShardForUnit',
                request_serializer=squareup_dot_costplus_dot_service__pb2.GetShardForUnitRequest.SerializeToString,
                response_deserializer=squareup_dot_costplus_dot_service__pb2.GetShardForUnitResponse.FromString,
                )
        self.GetRoundingError = channel.unary_unary(
                '/squareup.costplus.service.CostPlusAdminService/GetRoundingError',
                request_serializer=squareup_dot_costplus_dot_service__pb2.GetRoundingErrorRequest.SerializeToString,
                response_deserializer=squareup_dot_costplus_dot_service__pb2.GetRoundingErrorResponse.FromString,
                )
        self.CreateFanfFee = channel.unary_unary(
                '/squareup.costplus.service.CostPlusAdminService/CreateFanfFee',
                request_serializer=squareup_dot_costplus_dot_service__pb2.CreateFanfFeeRequest.SerializeToString,
                response_deserializer=squareup_dot_costplus_dot_service__pb2.CreateFanfFeeResponse.FromString,
                )
        self.UndoFee = channel.unary_unary(
                '/squareup.costplus.service.CostPlusAdminService/UndoFee',
                request_serializer=squareup_dot_costplus_dot_service__pb2.UndoFeeRequest.SerializeToString,
                response_deserializer=squareup_dot_costplus_dot_service__pb2.UndoFeeResponse.FromString,
                )
        self.CreateNotReadyFee = channel.unary_unary(
                '/squareup.costplus.service.CostPlusAdminService/CreateNotReadyFee',
                request_serializer=squareup_dot_costplus_dot_service__pb2.CreateNotReadyFeeRequest.SerializeToString,
                response_deserializer=squareup_dot_costplus_dot_service__pb2.CreateNotReadyFeeResponse.FromString,
                )
        self.RunTransactionFeeFetcher = channel.unary_unary(
                '/squareup.costplus.service.CostPlusAdminService/RunTransactionFeeFetcher',
                request_serializer=squareup_dot_costplus_dot_service__pb2.RunTransactionFeeFetcherRequest.SerializeToString,
                response_deserializer=squareup_dot_costplus_dot_service__pb2.RunTransactionFeeFetcherResponse.FromString,
                )
        self.SendEmailNotification = channel.unary_unary(
                '/squareup.costplus.service.CostPlusAdminService/SendEmailNotification',
                request_serializer=squareup_dot_costplus_dot_service__pb2.SendEmailNotificationRequest.SerializeToString,
                response_deserializer=squareup_dot_costplus_dot_service__pb2.SendEmailNotificationResponse.FromString,
                )


class CostPlusAdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateFakeReportedFee(self, request, context):
        """Create a fake transaction fee.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForceSettleAllReadyFees(self, request, context):
        """Marks the settleAt time for all ready fees for this unit to now(), so that they are all requested
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShardForUnit(self, request, context):
        """Used to determine which shard a unit maps to
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoundingError(self, request, context):
        """Returns the results of rounding error calculation for a unit over a date range
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFanfFee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UndoFee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNotReadyFee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunTransactionFeeFetcher(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendEmailNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CostPlusAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateFakeReportedFee': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFakeReportedFee,
                    request_deserializer=squareup_dot_costplus_dot_service__pb2.CreateFakeReportedFeeRequest.FromString,
                    response_serializer=squareup_dot_costplus_dot_service__pb2.CreateFakeReportedFeeResponse.SerializeToString,
            ),
            'ForceSettleAllReadyFees': grpc.unary_unary_rpc_method_handler(
                    servicer.ForceSettleAllReadyFees,
                    request_deserializer=squareup_dot_costplus_dot_service__pb2.ForceSettleAllReadyFeesRequest.FromString,
                    response_serializer=squareup_dot_costplus_dot_service__pb2.ForceSettleAllReadyFeesResponse.SerializeToString,
            ),
            'GetShardForUnit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetShardForUnit,
                    request_deserializer=squareup_dot_costplus_dot_service__pb2.GetShardForUnitRequest.FromString,
                    response_serializer=squareup_dot_costplus_dot_service__pb2.GetShardForUnitResponse.SerializeToString,
            ),
            'GetRoundingError': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoundingError,
                    request_deserializer=squareup_dot_costplus_dot_service__pb2.GetRoundingErrorRequest.FromString,
                    response_serializer=squareup_dot_costplus_dot_service__pb2.GetRoundingErrorResponse.SerializeToString,
            ),
            'CreateFanfFee': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFanfFee,
                    request_deserializer=squareup_dot_costplus_dot_service__pb2.CreateFanfFeeRequest.FromString,
                    response_serializer=squareup_dot_costplus_dot_service__pb2.CreateFanfFeeResponse.SerializeToString,
            ),
            'UndoFee': grpc.unary_unary_rpc_method_handler(
                    servicer.UndoFee,
                    request_deserializer=squareup_dot_costplus_dot_service__pb2.UndoFeeRequest.FromString,
                    response_serializer=squareup_dot_costplus_dot_service__pb2.UndoFeeResponse.SerializeToString,
            ),
            'CreateNotReadyFee': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNotReadyFee,
                    request_deserializer=squareup_dot_costplus_dot_service__pb2.CreateNotReadyFeeRequest.FromString,
                    response_serializer=squareup_dot_costplus_dot_service__pb2.CreateNotReadyFeeResponse.SerializeToString,
            ),
            'RunTransactionFeeFetcher': grpc.unary_unary_rpc_method_handler(
                    servicer.RunTransactionFeeFetcher,
                    request_deserializer=squareup_dot_costplus_dot_service__pb2.RunTransactionFeeFetcherRequest.FromString,
                    response_serializer=squareup_dot_costplus_dot_service__pb2.RunTransactionFeeFetcherResponse.SerializeToString,
            ),
            'SendEmailNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEmailNotification,
                    request_deserializer=squareup_dot_costplus_dot_service__pb2.SendEmailNotificationRequest.FromString,
                    response_serializer=squareup_dot_costplus_dot_service__pb2.SendEmailNotificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.costplus.service.CostPlusAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CostPlusAdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateFakeReportedFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.costplus.service.CostPlusAdminService/CreateFakeReportedFee',
            squareup_dot_costplus_dot_service__pb2.CreateFakeReportedFeeRequest.SerializeToString,
            squareup_dot_costplus_dot_service__pb2.CreateFakeReportedFeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ForceSettleAllReadyFees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.costplus.service.CostPlusAdminService/ForceSettleAllReadyFees',
            squareup_dot_costplus_dot_service__pb2.ForceSettleAllReadyFeesRequest.SerializeToString,
            squareup_dot_costplus_dot_service__pb2.ForceSettleAllReadyFeesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetShardForUnit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.costplus.service.CostPlusAdminService/GetShardForUnit',
            squareup_dot_costplus_dot_service__pb2.GetShardForUnitRequest.SerializeToString,
            squareup_dot_costplus_dot_service__pb2.GetShardForUnitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRoundingError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.costplus.service.CostPlusAdminService/GetRoundingError',
            squareup_dot_costplus_dot_service__pb2.GetRoundingErrorRequest.SerializeToString,
            squareup_dot_costplus_dot_service__pb2.GetRoundingErrorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateFanfFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.costplus.service.CostPlusAdminService/CreateFanfFee',
            squareup_dot_costplus_dot_service__pb2.CreateFanfFeeRequest.SerializeToString,
            squareup_dot_costplus_dot_service__pb2.CreateFanfFeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UndoFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.costplus.service.CostPlusAdminService/UndoFee',
            squareup_dot_costplus_dot_service__pb2.UndoFeeRequest.SerializeToString,
            squareup_dot_costplus_dot_service__pb2.UndoFeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateNotReadyFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.costplus.service.CostPlusAdminService/CreateNotReadyFee',
            squareup_dot_costplus_dot_service__pb2.CreateNotReadyFeeRequest.SerializeToString,
            squareup_dot_costplus_dot_service__pb2.CreateNotReadyFeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunTransactionFeeFetcher(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.costplus.service.CostPlusAdminService/RunTransactionFeeFetcher',
            squareup_dot_costplus_dot_service__pb2.RunTransactionFeeFetcherRequest.SerializeToString,
            squareup_dot_costplus_dot_service__pb2.RunTransactionFeeFetcherResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendEmailNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.costplus.service.CostPlusAdminService/SendEmailNotification',
            squareup_dot_costplus_dot_service__pb2.SendEmailNotificationRequest.SerializeToString,
            squareup_dot_costplus_dot_service__pb2.SendEmailNotificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.everlink import service_pb2 as squareup_dot_everlink_dot_service__pb2


class KeyExchangeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetKey = channel.unary_unary(
                '/squareup.everlink.KeyExchangeService/GetKey',
                request_serializer=squareup_dot_everlink_dot_service__pb2.GetKeyRequest.SerializeToString,
                response_deserializer=squareup_dot_everlink_dot_service__pb2.GetKeyResponse.FromString,
                )
        self.GetActiveKey = channel.unary_unary(
                '/squareup.everlink.KeyExchangeService/GetActiveKey',
                request_serializer=squareup_dot_everlink_dot_service__pb2.GetActiveKeyRequest.SerializeToString,
                response_deserializer=squareup_dot_everlink_dot_service__pb2.GetActiveKeyResponse.FromString,
                )
        self.InitiateKeyExchange = channel.unary_unary(
                '/squareup.everlink.KeyExchangeService/InitiateKeyExchange',
                request_serializer=squareup_dot_everlink_dot_service__pb2.InitiateKeyExchangeRequest.SerializeToString,
                response_deserializer=squareup_dot_everlink_dot_service__pb2.InitiateKeyExchangeResponse.FromString,
                )


class KeyExchangeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitiateKeyExchange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KeyExchangeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKey,
                    request_deserializer=squareup_dot_everlink_dot_service__pb2.GetKeyRequest.FromString,
                    response_serializer=squareup_dot_everlink_dot_service__pb2.GetKeyResponse.SerializeToString,
            ),
            'GetActiveKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActiveKey,
                    request_deserializer=squareup_dot_everlink_dot_service__pb2.GetActiveKeyRequest.FromString,
                    response_serializer=squareup_dot_everlink_dot_service__pb2.GetActiveKeyResponse.SerializeToString,
            ),
            'InitiateKeyExchange': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiateKeyExchange,
                    request_deserializer=squareup_dot_everlink_dot_service__pb2.InitiateKeyExchangeRequest.FromString,
                    response_serializer=squareup_dot_everlink_dot_service__pb2.InitiateKeyExchangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.everlink.KeyExchangeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KeyExchangeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.everlink.KeyExchangeService/GetKey',
            squareup_dot_everlink_dot_service__pb2.GetKeyRequest.SerializeToString,
            squareup_dot_everlink_dot_service__pb2.GetKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActiveKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.everlink.KeyExchangeService/GetActiveKey',
            squareup_dot_everlink_dot_service__pb2.GetActiveKeyRequest.SerializeToString,
            squareup_dot_everlink_dot_service__pb2.GetActiveKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitiateKeyExchange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.everlink.KeyExchangeService/InitiateKeyExchange',
            squareup_dot_everlink_dot_service__pb2.InitiateKeyExchangeRequest.SerializeToString,
            squareup_dot_everlink_dot_service__pb2.InitiateKeyExchangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

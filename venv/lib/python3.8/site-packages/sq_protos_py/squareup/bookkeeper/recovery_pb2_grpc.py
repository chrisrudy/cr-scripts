# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.bookkeeper import recovery_pb2 as squareup_dot_bookkeeper_dot_recovery__pb2


class RecoveryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecoveryOffsetTransfer = channel.unary_unary(
                '/squareup.ledger.bookkeeper.RecoveryService/RecoveryOffsetTransfer',
                request_serializer=squareup_dot_bookkeeper_dot_recovery__pb2.RecoveryOffsetTransferRequest.SerializeToString,
                response_deserializer=squareup_dot_bookkeeper_dot_recovery__pb2.RecoveryOffsetTransferResponse.FromString,
                )


class RecoveryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RecoveryOffsetTransfer(self, request, context):
        """*
        Transfers funds from Balance X to Balance Y for the purpose of recovering debit.

        Example 1: Transfering balance from X to Y
        {
        idempotence_token: <UNIQUE_STRING>,
        source_balance_token: <BALANCE_TOKEN_FOR_X>,
        target_balance_token: <BALANCE_TOKEN_FOR_Y>,
        amount_money: {
        currency: USD,
        amount: 500
        },
        recovery_event_token: <SOME_EXTERNAL_TOKEN_STRING>
        }

        Example 2: The reversal of Example 1. This request transfers the funds back from Y -> X. The
        request is identical other than the source and target balance tokens are flipped.
        {
        idempotence_token: <ANOTHER_UNIQUE_STRING>,
        source_balance_token: <BALANCE_TOKEN_FOR_Y>,
        target_balance_token: <BALANCE_TOKEN_FOR_X>,
        amount_money: {
        currency: USD,
        amount: 500
        },
        recovery_event_token: <SOME_EXTERNAL_TOKEN_STRING>
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecoveryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecoveryOffsetTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.RecoveryOffsetTransfer,
                    request_deserializer=squareup_dot_bookkeeper_dot_recovery__pb2.RecoveryOffsetTransferRequest.FromString,
                    response_serializer=squareup_dot_bookkeeper_dot_recovery__pb2.RecoveryOffsetTransferResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.ledger.bookkeeper.RecoveryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RecoveryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RecoveryOffsetTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.ledger.bookkeeper.RecoveryService/RecoveryOffsetTransfer',
            squareup_dot_bookkeeper_dot_recovery__pb2.RecoveryOffsetTransferRequest.SerializeToString,
            squareup_dot_bookkeeper_dot_recovery__pb2.RecoveryOffsetTransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

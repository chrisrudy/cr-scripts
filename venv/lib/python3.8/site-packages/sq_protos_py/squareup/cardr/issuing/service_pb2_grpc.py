# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.cardr.issuing import service_pb2 as squareup_dot_cardr_dot_issuing_dot_service__pb2


class IssuedCardServiceStub(object):
    """
    Card Management service for cards issued by third party vendors (eg. i2C). Acts as a gateway to
    the card vendor
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ActivateCard = channel.unary_unary(
                '/squareup.cardr.issuing.IssuedCardService/ActivateCard',
                request_serializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.ActivateCardRequest.SerializeToString,
                response_deserializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.ActivateCardResponse.FromString,
                )
        self.IssueCard = channel.unary_unary(
                '/squareup.cardr.issuing.IssuedCardService/IssueCard',
                request_serializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.IssueCardRequest.SerializeToString,
                response_deserializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.IssueCardResponse.FromString,
                )
        self.GetIssuedCard = channel.unary_unary(
                '/squareup.cardr.issuing.IssuedCardService/GetIssuedCard',
                request_serializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.GetIssuedCardRequest.SerializeToString,
                response_deserializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.GetIssuedCardResponse.FromString,
                )
        self.SetCardState = channel.unary_unary(
                '/squareup.cardr.issuing.IssuedCardService/SetCardState',
                request_serializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.SetCardStateRequest.SerializeToString,
                response_deserializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.SetCardStateResponse.FromString,
                )


class IssuedCardServiceServicer(object):
    """
    Card Management service for cards issued by third party vendors (eg. i2C). Acts as a gateway to
    the card vendor
    """

    def ActivateCard(self, request, context):
        """
        Activates a previously issued card. This makes the card available for transactional use by
        card owners.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IssueCard(self, request, context):
        """
        Proxies through to vendor to issue a new card, and then returns the details of that
        issued card.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIssuedCard(self, request, context):
        """
        Get information about an issued card. Warning: this endpoint may return sensitive information
        such as card PAN, exp date, and security code. As such, this endpoint is subject to PCI DSS.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCardState(self, request, context):
        """*
        Set the card to a specific state.  If no errors are returned, assume success.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IssuedCardServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ActivateCard': grpc.unary_unary_rpc_method_handler(
                    servicer.ActivateCard,
                    request_deserializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.ActivateCardRequest.FromString,
                    response_serializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.ActivateCardResponse.SerializeToString,
            ),
            'IssueCard': grpc.unary_unary_rpc_method_handler(
                    servicer.IssueCard,
                    request_deserializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.IssueCardRequest.FromString,
                    response_serializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.IssueCardResponse.SerializeToString,
            ),
            'GetIssuedCard': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIssuedCard,
                    request_deserializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.GetIssuedCardRequest.FromString,
                    response_serializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.GetIssuedCardResponse.SerializeToString,
            ),
            'SetCardState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCardState,
                    request_deserializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.SetCardStateRequest.FromString,
                    response_serializer=squareup_dot_cardr_dot_issuing_dot_service__pb2.SetCardStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.cardr.issuing.IssuedCardService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IssuedCardService(object):
    """
    Card Management service for cards issued by third party vendors (eg. i2C). Acts as a gateway to
    the card vendor
    """

    @staticmethod
    def ActivateCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cardr.issuing.IssuedCardService/ActivateCard',
            squareup_dot_cardr_dot_issuing_dot_service__pb2.ActivateCardRequest.SerializeToString,
            squareup_dot_cardr_dot_issuing_dot_service__pb2.ActivateCardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IssueCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cardr.issuing.IssuedCardService/IssueCard',
            squareup_dot_cardr_dot_issuing_dot_service__pb2.IssueCardRequest.SerializeToString,
            squareup_dot_cardr_dot_issuing_dot_service__pb2.IssueCardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIssuedCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cardr.issuing.IssuedCardService/GetIssuedCard',
            squareup_dot_cardr_dot_issuing_dot_service__pb2.GetIssuedCardRequest.SerializeToString,
            squareup_dot_cardr_dot_issuing_dot_service__pb2.GetIssuedCardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCardState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.cardr.issuing.IssuedCardService/SetCardState',
            squareup_dot_cardr_dot_issuing_dot_service__pb2.SetCardStateRequest.SerializeToString,
            squareup_dot_cardr_dot_issuing_dot_service__pb2.SetCardStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.onboard.activation import internal_pb2 as squareup_dot_onboard_dot_activation_dot_internal__pb2
from sq_protos_py.squareup.onboard.activation import status_pb2 as squareup_dot_onboard_dot_activation_dot_status__pb2


class ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBusinessUsageInformation = channel.unary_unary(
                '/squareup.onboard.activation.internal.Service/GetBusinessUsageInformation',
                request_serializer=squareup_dot_onboard_dot_activation_dot_internal__pb2.GetBusinessUsageInformationRequest.SerializeToString,
                response_deserializer=squareup_dot_onboard_dot_activation_dot_internal__pb2.GetBusinessUsageInformationResponse.FromString,
                )
        self.CanRetry = channel.unary_unary(
                '/squareup.onboard.activation.internal.Service/CanRetry',
                request_serializer=squareup_dot_onboard_dot_activation_dot_internal__pb2.CanRetryRequest.SerializeToString,
                response_deserializer=squareup_dot_onboard_dot_activation_dot_internal__pb2.CanRetryResponse.FromString,
                )
        self.UpdateMerchantAnalytic = channel.unary_unary(
                '/squareup.onboard.activation.internal.Service/UpdateMerchantAnalytic',
                request_serializer=squareup_dot_onboard_dot_activation_dot_internal__pb2.MerchantAnalyticRequest.SerializeToString,
                response_deserializer=squareup_dot_onboard_dot_activation_dot_status__pb2.StatusResponse.FromString,
                )


class ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBusinessUsageInformation(self, request, context):
        """*
        TEMPORARY endpoint to expose business usage information from signup to checklist
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CanRetry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMerchantAnalytic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBusinessUsageInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBusinessUsageInformation,
                    request_deserializer=squareup_dot_onboard_dot_activation_dot_internal__pb2.GetBusinessUsageInformationRequest.FromString,
                    response_serializer=squareup_dot_onboard_dot_activation_dot_internal__pb2.GetBusinessUsageInformationResponse.SerializeToString,
            ),
            'CanRetry': grpc.unary_unary_rpc_method_handler(
                    servicer.CanRetry,
                    request_deserializer=squareup_dot_onboard_dot_activation_dot_internal__pb2.CanRetryRequest.FromString,
                    response_serializer=squareup_dot_onboard_dot_activation_dot_internal__pb2.CanRetryResponse.SerializeToString,
            ),
            'UpdateMerchantAnalytic': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMerchantAnalytic,
                    request_deserializer=squareup_dot_onboard_dot_activation_dot_internal__pb2.MerchantAnalyticRequest.FromString,
                    response_serializer=squareup_dot_onboard_dot_activation_dot_status__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.onboard.activation.internal.Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBusinessUsageInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.onboard.activation.internal.Service/GetBusinessUsageInformation',
            squareup_dot_onboard_dot_activation_dot_internal__pb2.GetBusinessUsageInformationRequest.SerializeToString,
            squareup_dot_onboard_dot_activation_dot_internal__pb2.GetBusinessUsageInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CanRetry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.onboard.activation.internal.Service/CanRetry',
            squareup_dot_onboard_dot_activation_dot_internal__pb2.CanRetryRequest.SerializeToString,
            squareup_dot_onboard_dot_activation_dot_internal__pb2.CanRetryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMerchantAnalytic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.onboard.activation.internal.Service/UpdateMerchantAnalytic',
            squareup_dot_onboard_dot_activation_dot_internal__pb2.MerchantAnalyticRequest.SerializeToString,
            squareup_dot_onboard_dot_activation_dot_status__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

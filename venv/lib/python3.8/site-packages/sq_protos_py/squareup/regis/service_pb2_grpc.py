# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.paper_signature.v2 import service_pb2 as squareup_dot_paper__signature_dot_v2_dot_service__pb2
from sq_protos_py.squareup.regis import api_pb2 as squareup_dot_regis_dot_api__pb2
from sq_protos_py.squareup.regis import record_failed_tenders_pb2 as squareup_dot_regis_dot_record__failed__tenders__pb2


class RegisServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrustedAuthorize = channel.unary_unary(
                '/squareup.regis.service.RegisService/TrustedAuthorize',
                request_serializer=squareup_dot_regis_dot_api__pb2.TrustedAuthorizationRequest.SerializeToString,
                response_deserializer=squareup_dot_regis_dot_api__pb2.AuthorizationResponse.FromString,
                )
        self.TrustedCapture = channel.unary_unary(
                '/squareup.regis.service.RegisService/TrustedCapture',
                request_serializer=squareup_dot_regis_dot_api__pb2.TrustedCaptureRequest.SerializeToString,
                response_deserializer=squareup_dot_regis_dot_api__pb2.CaptureResponse.FromString,
                )
        self.DelayCapture = channel.unary_unary(
                '/squareup.regis.service.RegisService/DelayCapture',
                request_serializer=squareup_dot_paper__signature_dot_v2_dot_service__pb2.DelayCaptureRequest.SerializeToString,
                response_deserializer=squareup_dot_paper__signature_dot_v2_dot_service__pb2.DelayCaptureResponse.FromString,
                )


class RegisServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TrustedAuthorize(self, request, context):
        """*
        Trusted-authorize, where we pass in creator / payee token instead of multipass credential
        or session token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrustedCapture(self, request, context):
        """*
        Trusted-capture, where we pass in creator / payee token instead of multipass credential
        or session token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelayCapture(self, request, context):
        """*
        Delay-capture, where the client indicates that this payment is awaiting a tip.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrustedAuthorize': grpc.unary_unary_rpc_method_handler(
                    servicer.TrustedAuthorize,
                    request_deserializer=squareup_dot_regis_dot_api__pb2.TrustedAuthorizationRequest.FromString,
                    response_serializer=squareup_dot_regis_dot_api__pb2.AuthorizationResponse.SerializeToString,
            ),
            'TrustedCapture': grpc.unary_unary_rpc_method_handler(
                    servicer.TrustedCapture,
                    request_deserializer=squareup_dot_regis_dot_api__pb2.TrustedCaptureRequest.FromString,
                    response_serializer=squareup_dot_regis_dot_api__pb2.CaptureResponse.SerializeToString,
            ),
            'DelayCapture': grpc.unary_unary_rpc_method_handler(
                    servicer.DelayCapture,
                    request_deserializer=squareup_dot_paper__signature_dot_v2_dot_service__pb2.DelayCaptureRequest.FromString,
                    response_serializer=squareup_dot_paper__signature_dot_v2_dot_service__pb2.DelayCaptureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.regis.service.RegisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegisService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TrustedAuthorize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.regis.service.RegisService/TrustedAuthorize',
            squareup_dot_regis_dot_api__pb2.TrustedAuthorizationRequest.SerializeToString,
            squareup_dot_regis_dot_api__pb2.AuthorizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrustedCapture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.regis.service.RegisService/TrustedCapture',
            squareup_dot_regis_dot_api__pb2.TrustedCaptureRequest.SerializeToString,
            squareup_dot_regis_dot_api__pb2.CaptureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelayCapture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.regis.service.RegisService/DelayCapture',
            squareup_dot_paper__signature_dot_v2_dot_service__pb2.DelayCaptureRequest.SerializeToString,
            squareup_dot_paper__signature_dot_v2_dot_service__pb2.DelayCaptureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class InternalBillServiceStub(object):
    """*
    A service for performing bill actions that are only exposed on the server-side.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecordFailedTenders = channel.unary_unary(
                '/squareup.regis.service.InternalBillService/RecordFailedTenders',
                request_serializer=squareup_dot_regis_dot_record__failed__tenders__pb2.RecordFailedTendersRequest.SerializeToString,
                response_deserializer=squareup_dot_regis_dot_record__failed__tenders__pb2.RecordFailedTendersResponse.FromString,
                )


class InternalBillServiceServicer(object):
    """*
    A service for performing bill actions that are only exposed on the server-side.
    """

    def RecordFailedTenders(self, request, context):
        """*
        Record one or more failed tenders on a single bill, consisting of a series of AddTender
        requests with corresponding decline reasons.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InternalBillServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecordFailedTenders': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordFailedTenders,
                    request_deserializer=squareup_dot_regis_dot_record__failed__tenders__pb2.RecordFailedTendersRequest.FromString,
                    response_serializer=squareup_dot_regis_dot_record__failed__tenders__pb2.RecordFailedTendersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.regis.service.InternalBillService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InternalBillService(object):
    """*
    A service for performing bill actions that are only exposed on the server-side.
    """

    @staticmethod
    def RecordFailedTenders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.regis.service.InternalBillService/RecordFailedTenders',
            squareup_dot_regis_dot_record__failed__tenders__pb2.RecordFailedTendersRequest.SerializeToString,
            squareup_dot_regis_dot_record__failed__tenders__pb2.RecordFailedTendersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RegisInternalAdminServiceStub(object):
    """*
    Internal RPC methods for admins
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReverseLookupCoordinates = channel.unary_unary(
                '/squareup.regis.service.RegisInternalAdminService/ReverseLookupCoordinates',
                request_serializer=squareup_dot_regis_dot_api__pb2.ReverseLookupCoordinatesRequest.SerializeToString,
                response_deserializer=squareup_dot_regis_dot_api__pb2.ReverseLookupCoordinatesResponse.FromString,
                )
        self.InspectRedisGeoCache = channel.unary_unary(
                '/squareup.regis.service.RegisInternalAdminService/InspectRedisGeoCache',
                request_serializer=squareup_dot_regis_dot_api__pb2.InspectRedisGeoCacheRequest.SerializeToString,
                response_deserializer=squareup_dot_regis_dot_api__pb2.InspectRedisGeoCacheResponse.FromString,
                )


class RegisInternalAdminServiceServicer(object):
    """*
    Internal RPC methods for admins
    """

    def ReverseLookupCoordinates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InspectRedisGeoCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegisInternalAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReverseLookupCoordinates': grpc.unary_unary_rpc_method_handler(
                    servicer.ReverseLookupCoordinates,
                    request_deserializer=squareup_dot_regis_dot_api__pb2.ReverseLookupCoordinatesRequest.FromString,
                    response_serializer=squareup_dot_regis_dot_api__pb2.ReverseLookupCoordinatesResponse.SerializeToString,
            ),
            'InspectRedisGeoCache': grpc.unary_unary_rpc_method_handler(
                    servicer.InspectRedisGeoCache,
                    request_deserializer=squareup_dot_regis_dot_api__pb2.InspectRedisGeoCacheRequest.FromString,
                    response_serializer=squareup_dot_regis_dot_api__pb2.InspectRedisGeoCacheResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.regis.service.RegisInternalAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegisInternalAdminService(object):
    """*
    Internal RPC methods for admins
    """

    @staticmethod
    def ReverseLookupCoordinates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.regis.service.RegisInternalAdminService/ReverseLookupCoordinates',
            squareup_dot_regis_dot_api__pb2.ReverseLookupCoordinatesRequest.SerializeToString,
            squareup_dot_regis_dot_api__pb2.ReverseLookupCoordinatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InspectRedisGeoCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.regis.service.RegisInternalAdminService/InspectRedisGeoCache',
            squareup_dot_regis_dot_api__pb2.InspectRedisGeoCacheRequest.SerializeToString,
            squareup_dot_regis_dot_api__pb2.InspectRedisGeoCacheResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.bitmarkets import service_pb2 as squareup_dot_bitmarkets_dot_service__pb2
from sq_protos_py.squareup.franklin import app_pb2 as squareup_dot_franklin_dot_app__pb2


class BitmarketsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCompositePrice = channel.unary_unary(
                '/squareup.bitmarkets.service.BitmarketsService/GetCompositePrice',
                request_serializer=squareup_dot_bitmarkets_dot_service__pb2.GetCompositePriceRequest.SerializeToString,
                response_deserializer=squareup_dot_bitmarkets_dot_service__pb2.GetCompositePriceResponse.FromString,
                )
        self.GetHealthStatus = channel.unary_unary(
                '/squareup.bitmarkets.service.BitmarketsService/GetHealthStatus',
                request_serializer=squareup_dot_bitmarkets_dot_service__pb2.GetHealthStatusRequest.SerializeToString,
                response_deserializer=squareup_dot_bitmarkets_dot_service__pb2.GetHealthStatusResponse.FromString,
                )
        self.GetMarketPriceAtTimes = channel.unary_unary(
                '/squareup.bitmarkets.service.BitmarketsService/GetMarketPriceAtTimes',
                request_serializer=squareup_dot_bitmarkets_dot_service__pb2.GetMarketPriceAtTimesRequest.SerializeToString,
                response_deserializer=squareup_dot_bitmarkets_dot_service__pb2.GetMarketPriceAtTimesResponse.FromString,
                )
        self.GetHistoricalExchangeData = channel.unary_unary(
                '/squareup.bitmarkets.service.BitmarketsService/GetHistoricalExchangeData',
                request_serializer=squareup_dot_franklin_dot_app__pb2.GetHistoricalExchangeDataRequest.SerializeToString,
                response_deserializer=squareup_dot_franklin_dot_app__pb2.GetHistoricalExchangeDataResponse.FromString,
                )
        self.GetExchangeData = channel.unary_unary(
                '/squareup.bitmarkets.service.BitmarketsService/GetExchangeData',
                request_serializer=squareup_dot_franklin_dot_app__pb2.GetExchangeDataRequest.SerializeToString,
                response_deserializer=squareup_dot_franklin_dot_app__pb2.GetExchangeDataResponse.FromString,
                )


class BitmarketsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCompositePrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHealthStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMarketPriceAtTimes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistoricalExchangeData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExchangeData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BitmarketsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCompositePrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompositePrice,
                    request_deserializer=squareup_dot_bitmarkets_dot_service__pb2.GetCompositePriceRequest.FromString,
                    response_serializer=squareup_dot_bitmarkets_dot_service__pb2.GetCompositePriceResponse.SerializeToString,
            ),
            'GetHealthStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHealthStatus,
                    request_deserializer=squareup_dot_bitmarkets_dot_service__pb2.GetHealthStatusRequest.FromString,
                    response_serializer=squareup_dot_bitmarkets_dot_service__pb2.GetHealthStatusResponse.SerializeToString,
            ),
            'GetMarketPriceAtTimes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarketPriceAtTimes,
                    request_deserializer=squareup_dot_bitmarkets_dot_service__pb2.GetMarketPriceAtTimesRequest.FromString,
                    response_serializer=squareup_dot_bitmarkets_dot_service__pb2.GetMarketPriceAtTimesResponse.SerializeToString,
            ),
            'GetHistoricalExchangeData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistoricalExchangeData,
                    request_deserializer=squareup_dot_franklin_dot_app__pb2.GetHistoricalExchangeDataRequest.FromString,
                    response_serializer=squareup_dot_franklin_dot_app__pb2.GetHistoricalExchangeDataResponse.SerializeToString,
            ),
            'GetExchangeData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExchangeData,
                    request_deserializer=squareup_dot_franklin_dot_app__pb2.GetExchangeDataRequest.FromString,
                    response_serializer=squareup_dot_franklin_dot_app__pb2.GetExchangeDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.bitmarkets.service.BitmarketsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BitmarketsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCompositePrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitmarkets.service.BitmarketsService/GetCompositePrice',
            squareup_dot_bitmarkets_dot_service__pb2.GetCompositePriceRequest.SerializeToString,
            squareup_dot_bitmarkets_dot_service__pb2.GetCompositePriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHealthStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitmarkets.service.BitmarketsService/GetHealthStatus',
            squareup_dot_bitmarkets_dot_service__pb2.GetHealthStatusRequest.SerializeToString,
            squareup_dot_bitmarkets_dot_service__pb2.GetHealthStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMarketPriceAtTimes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitmarkets.service.BitmarketsService/GetMarketPriceAtTimes',
            squareup_dot_bitmarkets_dot_service__pb2.GetMarketPriceAtTimesRequest.SerializeToString,
            squareup_dot_bitmarkets_dot_service__pb2.GetMarketPriceAtTimesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHistoricalExchangeData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitmarkets.service.BitmarketsService/GetHistoricalExchangeData',
            squareup_dot_franklin_dot_app__pb2.GetHistoricalExchangeDataRequest.SerializeToString,
            squareup_dot_franklin_dot_app__pb2.GetHistoricalExchangeDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExchangeData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bitmarkets.service.BitmarketsService/GetExchangeData',
            squareup_dot_franklin_dot_app__pb2.GetExchangeDataRequest.SerializeToString,
            squareup_dot_franklin_dot_app__pb2.GetExchangeDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

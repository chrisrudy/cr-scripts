# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.payments.external import legal_entities_pb2 as squareup_dot_payments_dot_external_dot_legal__entities__pb2


class ExternalLegalEntityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpsertLegalEntity = channel.unary_unary(
                '/squareup.connect.v2.ExternalLegalEntityService/UpsertLegalEntity',
                request_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.UpsertLegalEntityRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.UpsertLegalEntityResponse.FromString,
                )
        self.GetLegalEntity = channel.unary_unary(
                '/squareup.connect.v2.ExternalLegalEntityService/GetLegalEntity',
                request_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityResponse.FromString,
                )
        self.VerifyLegalEntity = channel.unary_unary(
                '/squareup.connect.v2.ExternalLegalEntityService/VerifyLegalEntity',
                request_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.VerifyLegalEntityRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.VerifyLegalEntityResponse.FromString,
                )
        self.GetLegalEntityVerifications = channel.unary_unary(
                '/squareup.connect.v2.ExternalLegalEntityService/GetLegalEntityVerifications',
                request_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityVerificationsRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityVerificationsResponse.FromString,
                )
        self.CreateLegalEntityDocument = channel.unary_unary(
                '/squareup.connect.v2.ExternalLegalEntityService/CreateLegalEntityDocument',
                request_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.CreateLegalEntityDocumentRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.CreateLegalEntityDocumentResponse.FromString,
                )
        self.ListLegalEntityDocuments = channel.unary_unary(
                '/squareup.connect.v2.ExternalLegalEntityService/ListLegalEntityDocuments',
                request_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.ListLegalEntityDocumentsRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.ListLegalEntityDocumentsResponse.FromString,
                )
        self.RetrieveLegalEntityDocument = channel.unary_unary(
                '/squareup.connect.v2.ExternalLegalEntityService/RetrieveLegalEntityDocument',
                request_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.RetrieveLegalEntityDocumentRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.RetrieveLegalEntityDocumentResponse.FromString,
                )
        self.DeleteLegalEntityDocument = channel.unary_unary(
                '/squareup.connect.v2.ExternalLegalEntityService/DeleteLegalEntityDocument',
                request_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.DeleteLegalEntityDocumentRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.DeleteLegalEntityDocumentResponse.FromString,
                )


class ExternalLegalEntityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpsertLegalEntity(self, request, context):
        """--
        @desc Creates a new `LegalEntity` or updates an existing `LegalEntity`. This endpoint
        uses the authorization token to identify which `LegalEntity` to update.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLegalEntity(self, request, context):
        """--
        @desc Retrieves the `LegalEntity` associated with the authorization token.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyLegalEntity(self, request, context):
        """--
        @desc Initiates the verification process for the `LegalEntity` associated with the authorization
        token. Use the __GetLegalEntity__ endpoint to get the latest verification status.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLegalEntityVerifications(self, request, context):
        """--
        @desc Retrieves the current `LegalEntityVerifications` associated with the authorization token's
        legal entity.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLegalEntityDocument(self, request, context):
        """--
        @desc Upload a new document attesting the identity associated with an `Individual` object in a
        legal entity. Accepts the document files using an HTTP multipart/form-data upload. Supported
        file formats are `image/jpeg` and `application/pdf`. The file name used in this upload will be
        used only for your reference.

        Uploads are idempotent. Multiple calls with the same idempotency key will create only one
        document and will return the document created in the first call.

        Returns an error with code `NOT_FOUND` if the legal entity has not been created or if the
        individual is not present in the legal entity.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLegalEntityDocuments(self, request, context):
        """--
        @desc List documents owned by the legal entity of the account. Optional parameters may be
        supplied to filter results and to control pagination.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveLegalEntityDocument(self, request, context):
        """--
        @desc Retrieve a specific `LegalEntityDocument` owned by the legal entity of the account.

        Returns an error with code `NOT_FOUND` if the document cannot be found.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteLegalEntityDocument(self, request, context):
        """--
        @desc Delete a specific `LegalEntityDocument` owned by the legal entity of the account.

        Deleting a document is idempotent. If deleted multiple multiple times, each call will succeed.

        Returns an error with code `FORBIDDEN` when attempting to delete a locked document. A document
        may become locked by attempting to verify an individual that uses the document. Square is
        required to store locked documents, and they may not be deleted.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExternalLegalEntityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpsertLegalEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertLegalEntity,
                    request_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.UpsertLegalEntityRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.UpsertLegalEntityResponse.SerializeToString,
            ),
            'GetLegalEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLegalEntity,
                    request_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityResponse.SerializeToString,
            ),
            'VerifyLegalEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyLegalEntity,
                    request_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.VerifyLegalEntityRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.VerifyLegalEntityResponse.SerializeToString,
            ),
            'GetLegalEntityVerifications': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLegalEntityVerifications,
                    request_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityVerificationsRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityVerificationsResponse.SerializeToString,
            ),
            'CreateLegalEntityDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLegalEntityDocument,
                    request_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.CreateLegalEntityDocumentRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.CreateLegalEntityDocumentResponse.SerializeToString,
            ),
            'ListLegalEntityDocuments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLegalEntityDocuments,
                    request_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.ListLegalEntityDocumentsRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.ListLegalEntityDocumentsResponse.SerializeToString,
            ),
            'RetrieveLegalEntityDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveLegalEntityDocument,
                    request_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.RetrieveLegalEntityDocumentRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.RetrieveLegalEntityDocumentResponse.SerializeToString,
            ),
            'DeleteLegalEntityDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteLegalEntityDocument,
                    request_deserializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.DeleteLegalEntityDocumentRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_external_dot_legal__entities__pb2.DeleteLegalEntityDocumentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.connect.v2.ExternalLegalEntityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExternalLegalEntityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpsertLegalEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.connect.v2.ExternalLegalEntityService/UpsertLegalEntity',
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.UpsertLegalEntityRequest.SerializeToString,
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.UpsertLegalEntityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLegalEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.connect.v2.ExternalLegalEntityService/GetLegalEntity',
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityRequest.SerializeToString,
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyLegalEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.connect.v2.ExternalLegalEntityService/VerifyLegalEntity',
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.VerifyLegalEntityRequest.SerializeToString,
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.VerifyLegalEntityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLegalEntityVerifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.connect.v2.ExternalLegalEntityService/GetLegalEntityVerifications',
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityVerificationsRequest.SerializeToString,
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.GetLegalEntityVerificationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateLegalEntityDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.connect.v2.ExternalLegalEntityService/CreateLegalEntityDocument',
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.CreateLegalEntityDocumentRequest.SerializeToString,
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.CreateLegalEntityDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLegalEntityDocuments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.connect.v2.ExternalLegalEntityService/ListLegalEntityDocuments',
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.ListLegalEntityDocumentsRequest.SerializeToString,
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.ListLegalEntityDocumentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveLegalEntityDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.connect.v2.ExternalLegalEntityService/RetrieveLegalEntityDocument',
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.RetrieveLegalEntityDocumentRequest.SerializeToString,
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.RetrieveLegalEntityDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteLegalEntityDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.connect.v2.ExternalLegalEntityService/DeleteLegalEntityDocument',
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.DeleteLegalEntityDocumentRequest.SerializeToString,
            squareup_dot_payments_dot_external_dot_legal__entities__pb2.DeleteLegalEntityDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

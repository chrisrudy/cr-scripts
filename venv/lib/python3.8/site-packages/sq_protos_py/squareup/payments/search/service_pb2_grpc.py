# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.payments.search import service_pb2 as squareup_dot_payments_dot_search_dot_service__pb2


class PaymentsLookupServiceStub(object):
    """*
    Notes:
    1: There is a small chance that lookups will intiate an RPC call to another service,
    so the total time before response could increase by a few hundred milliseconds.
    (Occurs if the payments have not yet reached Spot via feeds.)
    2: If any payment is already persisted in Esperanto, this lookup will return it.
    However, for payments not persisted in Esperanto (cash and other tender payments),
    there might be a slight delay between payment creation and it's availability for lookup.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LookupPayment = channel.unary_unary(
                '/squareup.payments.search.PaymentsLookupService/LookupPayment',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentResponse.FromString,
                )
        self.LookupPayments = channel.unary_unary(
                '/squareup.payments.search.PaymentsLookupService/LookupPayments',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentsRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentsResponse.FromString,
                )


class PaymentsLookupServiceServicer(object):
    """*
    Notes:
    1: There is a small chance that lookups will intiate an RPC call to another service,
    so the total time before response could increase by a few hundred milliseconds.
    (Occurs if the payments have not yet reached Spot via feeds.)
    2: If any payment is already persisted in Esperanto, this lookup will return it.
    However, for payments not persisted in Esperanto (cash and other tender payments),
    there might be a slight delay between payment creation and it's availability for lookup.
    """

    def LookupPayment(self, request, context):
        """* Retrieves a single payment. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupPayments(self, request, context):
        """* Retrieves multiple payments. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentsLookupServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LookupPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupPayment,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentResponse.SerializeToString,
            ),
            'LookupPayments': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupPayments,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentsRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.payments.search.PaymentsLookupService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaymentsLookupService(object):
    """*
    Notes:
    1: There is a small chance that lookups will intiate an RPC call to another service,
    so the total time before response could increase by a few hundred milliseconds.
    (Occurs if the payments have not yet reached Spot via feeds.)
    2: If any payment is already persisted in Esperanto, this lookup will return it.
    However, for payments not persisted in Esperanto (cash and other tender payments),
    there might be a slight delay between payment creation and it's availability for lookup.
    """

    @staticmethod
    def LookupPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentsLookupService/LookupPayment',
            squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LookupPayments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentsLookupService/LookupPayments',
            squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentsRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.LookupPaymentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PaymentsSearchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindPayments = channel.unary_unary(
                '/squareup.payments.search.PaymentsSearchService/FindPayments',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsResponse.FromString,
                )
        self.FindPaymentsWithPii = channel.unary_unary(
                '/squareup.payments.search.PaymentsSearchService/FindPaymentsWithPii',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsWithPiiRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsResponse.FromString,
                )
        self.LegacyTokenFindPayments = channel.unary_unary(
                '/squareup.payments.search.PaymentsSearchService/LegacyTokenFindPayments',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.LegacyTokenFindPaymentsRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsResponse.FromString,
                )
        self.FindMerchantsForPayments = channel.unary_unary(
                '/squareup.payments.search.PaymentsSearchService/FindMerchantsForPayments',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindMerchantsForPaymentsResponse.FromString,
                )
        self.CountPayments = channel.unary_unary(
                '/squareup.payments.search.PaymentsSearchService/CountPayments',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.CountPaymentsRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.CountPaymentsResponse.FromString,
                )
        self.SumPayments = channel.unary_unary(
                '/squareup.payments.search.PaymentsSearchService/SumPayments',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.SumPaymentsRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.SumPaymentsResponse.FromString,
                )
        self.FindPaymentsWithProjection = channel.unary_unary(
                '/squareup.payments.search.PaymentsSearchService/FindPaymentsWithProjection',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsWithProjectionRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsWithProjectionResponse.FromString,
                )


class PaymentsSearchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindPayments(self, request, context):
        """* Searches for payments. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindPaymentsWithPii(self, request, context):
        """* Searches for payments with PII in the query. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LegacyTokenFindPayments(self, request, context):
        """*
        DEPRECATED. Please use FindPayments instead. This API *will go away*, and
        is special-cased exclusively for bills/list and payments/list.

        Legacy search for paginating by payment token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindMerchantsForPayments(self, request, context):
        """*
        DEPRECATED - Use FindPaymentsWithProjection instead.
        Searches for distinct merchants given a search for payments.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountPayments(self, request, context):
        """* Counts number of payments that fit certain criteria. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SumPayments(self, request, context):
        """* Sums payment amounts over a number of payments that fit certain criteria. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindPaymentsWithProjection(self, request, context):
        """*
        Delegates to FindPayments and projects the resulting payment records into a different response.

        Projecting the resulting payment records can significantly reduce the number of results returned if the
        projection is common across the payment records.

        Note: The projection is performed in memory on the server. The same number of records as FindPayments are
        read from the database.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentsSearchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindPayments': grpc.unary_unary_rpc_method_handler(
                    servicer.FindPayments,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsResponse.SerializeToString,
            ),
            'FindPaymentsWithPii': grpc.unary_unary_rpc_method_handler(
                    servicer.FindPaymentsWithPii,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsWithPiiRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsResponse.SerializeToString,
            ),
            'LegacyTokenFindPayments': grpc.unary_unary_rpc_method_handler(
                    servicer.LegacyTokenFindPayments,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.LegacyTokenFindPaymentsRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsResponse.SerializeToString,
            ),
            'FindMerchantsForPayments': grpc.unary_unary_rpc_method_handler(
                    servicer.FindMerchantsForPayments,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindMerchantsForPaymentsResponse.SerializeToString,
            ),
            'CountPayments': grpc.unary_unary_rpc_method_handler(
                    servicer.CountPayments,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.CountPaymentsRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.CountPaymentsResponse.SerializeToString,
            ),
            'SumPayments': grpc.unary_unary_rpc_method_handler(
                    servicer.SumPayments,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.SumPaymentsRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.SumPaymentsResponse.SerializeToString,
            ),
            'FindPaymentsWithProjection': grpc.unary_unary_rpc_method_handler(
                    servicer.FindPaymentsWithProjection,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsWithProjectionRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsWithProjectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.payments.search.PaymentsSearchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaymentsSearchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindPayments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentsSearchService/FindPayments',
            squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindPaymentsWithPii(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentsSearchService/FindPaymentsWithPii',
            squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsWithPiiRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LegacyTokenFindPayments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentsSearchService/LegacyTokenFindPayments',
            squareup_dot_payments_dot_search_dot_service__pb2.LegacyTokenFindPaymentsRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindMerchantsForPayments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentsSearchService/FindMerchantsForPayments',
            squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.FindMerchantsForPaymentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountPayments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentsSearchService/CountPayments',
            squareup_dot_payments_dot_search_dot_service__pb2.CountPaymentsRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.CountPaymentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SumPayments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentsSearchService/SumPayments',
            squareup_dot_payments_dot_search_dot_service__pb2.SumPaymentsRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.SumPaymentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindPaymentsWithProjection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentsSearchService/FindPaymentsWithProjection',
            squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsWithProjectionRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.FindPaymentsWithProjectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PaymentCardSearchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindMerchantsForPaymentCards = channel.unary_unary(
                '/squareup.payments.search.PaymentCardSearchService/FindMerchantsForPaymentCards',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindMerchantsForPaymentCardsRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindMerchantsForPaymentCardsResponse.FromString,
                )
        self.FindLastPaymentCardForMerchant = channel.unary_unary(
                '/squareup.payments.search.PaymentCardSearchService/FindLastPaymentCardForMerchant',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindLastPaymentCardForMerchantRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindLastPaymentCardForMerchantResponse.FromString,
                )


class PaymentCardSearchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindMerchantsForPaymentCards(self, request, context):
        """* Returns all merchants who have taken payments from a given payment card. *
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindLastPaymentCardForMerchant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentCardSearchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindMerchantsForPaymentCards': grpc.unary_unary_rpc_method_handler(
                    servicer.FindMerchantsForPaymentCards,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindMerchantsForPaymentCardsRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindMerchantsForPaymentCardsResponse.SerializeToString,
            ),
            'FindLastPaymentCardForMerchant': grpc.unary_unary_rpc_method_handler(
                    servicer.FindLastPaymentCardForMerchant,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.FindLastPaymentCardForMerchantRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.FindLastPaymentCardForMerchantResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.payments.search.PaymentCardSearchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaymentCardSearchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindMerchantsForPaymentCards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentCardSearchService/FindMerchantsForPaymentCards',
            squareup_dot_payments_dot_search_dot_service__pb2.FindMerchantsForPaymentCardsRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.FindMerchantsForPaymentCardsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindLastPaymentCardForMerchant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.PaymentCardSearchService/FindLastPaymentCardForMerchant',
            squareup_dot_payments_dot_search_dot_service__pb2.FindLastPaymentCardForMerchantRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.FindLastPaymentCardForMerchantResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SpotAdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckDynamoConnection = channel.unary_unary(
                '/squareup.payments.search.SpotAdminService/CheckDynamoConnection',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionResponse.FromString,
                )
        self.CheckElasticGraphConnection = channel.unary_unary(
                '/squareup.payments.search.SpotAdminService/CheckElasticGraphConnection',
                request_serializer=squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionRequest.SerializeToString,
                response_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionResponse.FromString,
                )


class SpotAdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CheckDynamoConnection(self, request, context):
        """* Attempts to connect to DynamoDB and returns any errors with the connection. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckElasticGraphConnection(self, request, context):
        """* Attempts to connect to ElasticGraph and returns any errors with the connection. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpotAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckDynamoConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckDynamoConnection,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionResponse.SerializeToString,
            ),
            'CheckElasticGraphConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckElasticGraphConnection,
                    request_deserializer=squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionRequest.FromString,
                    response_serializer=squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.payments.search.SpotAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SpotAdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CheckDynamoConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.SpotAdminService/CheckDynamoConnection',
            squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckElasticGraphConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payments.search.SpotAdminService/CheckElasticGraphConnection',
            squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionRequest.SerializeToString,
            squareup_dot_payments_dot_search_dot_service__pb2.CheckConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

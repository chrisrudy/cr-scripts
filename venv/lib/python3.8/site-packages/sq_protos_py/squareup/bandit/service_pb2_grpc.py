# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.bandit import service_pb2 as squareup_dot_bandit_dot_service__pb2


class AbTestServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateExperiment = channel.unary_unary(
                '/squareup.bandit.AbTestService/CreateExperiment',
                request_serializer=squareup_dot_bandit_dot_service__pb2.CreateExperimentRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.CreateExperimentResponse.FromString,
                )
        self.GetExperiment = channel.unary_unary(
                '/squareup.bandit.AbTestService/GetExperiment',
                request_serializer=squareup_dot_bandit_dot_service__pb2.GetExperimentRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.GetExperimentResponse.FromString,
                )
        self.GetExperimentById = channel.unary_unary(
                '/squareup.bandit.AbTestService/GetExperimentById',
                request_serializer=squareup_dot_bandit_dot_service__pb2.GetExperimentByIdRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.GetExperimentByIdResponse.FromString,
                )
        self.GetExperimentsByName = channel.unary_unary(
                '/squareup.bandit.AbTestService/GetExperimentsByName',
                request_serializer=squareup_dot_bandit_dot_service__pb2.GetExperimentsByNameRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.GetExperimentsByNameResponse.FromString,
                )
        self.GetExperiments = channel.unary_unary(
                '/squareup.bandit.AbTestService/GetExperiments',
                request_serializer=squareup_dot_bandit_dot_service__pb2.GetExperimentsRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.GetExperimentsResponse.FromString,
                )
        self.GetAllExperiments = channel.unary_unary(
                '/squareup.bandit.AbTestService/GetAllExperiments',
                request_serializer=squareup_dot_bandit_dot_service__pb2.GetAllExperimentsRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.GetAllExperimentsResponse.FromString,
                )
        self.StartExperiment = channel.unary_unary(
                '/squareup.bandit.AbTestService/StartExperiment',
                request_serializer=squareup_dot_bandit_dot_service__pb2.StartExperimentRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.StartExperimentResponse.FromString,
                )
        self.StopExperiment = channel.unary_unary(
                '/squareup.bandit.AbTestService/StopExperiment',
                request_serializer=squareup_dot_bandit_dot_service__pb2.StopExperimentRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.StopExperimentResponse.FromString,
                )
        self.CreateBucket = channel.unary_unary(
                '/squareup.bandit.AbTestService/CreateBucket',
                request_serializer=squareup_dot_bandit_dot_service__pb2.CreateBucketRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.CreateBucketResponse.FromString,
                )
        self.GetBucket = channel.unary_unary(
                '/squareup.bandit.AbTestService/GetBucket',
                request_serializer=squareup_dot_bandit_dot_service__pb2.GetBucketRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.GetBucketResponse.FromString,
                )
        self.AlterBucket = channel.unary_unary(
                '/squareup.bandit.AbTestService/AlterBucket',
                request_serializer=squareup_dot_bandit_dot_service__pb2.AlterBucketRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.AlterBucketResponse.FromString,
                )
        self.GetAssignment = channel.unary_unary(
                '/squareup.bandit.AbTestService/GetAssignment',
                request_serializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentResponse.FromString,
                )
        self.GetAssignmentsV2 = channel.unary_unary(
                '/squareup.bandit.AbTestService/GetAssignmentsV2',
                request_serializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentsV2Request.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentsV2Response.FromString,
                )
        self.RecordAssignments = channel.unary_unary(
                '/squareup.bandit.AbTestService/RecordAssignments',
                request_serializer=squareup_dot_bandit_dot_service__pb2.RecordAssignmentsRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.RecordAssignmentsResponse.FromString,
                )
        self.GetAssignments = channel.unary_unary(
                '/squareup.bandit.AbTestService/GetAssignments',
                request_serializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentsRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentsResponse.FromString,
                )
        self.ForceAssignment = channel.unary_unary(
                '/squareup.bandit.AbTestService/ForceAssignment',
                request_serializer=squareup_dot_bandit_dot_service__pb2.ForceAssignmentRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.ForceAssignmentResponse.FromString,
                )
        self.DeleteExperiment = channel.unary_unary(
                '/squareup.bandit.AbTestService/DeleteExperiment',
                request_serializer=squareup_dot_bandit_dot_service__pb2.DeleteExperimentRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.DeleteExperimentResponse.FromString,
                )
        self.EditExperimentDescription = channel.unary_unary(
                '/squareup.bandit.AbTestService/EditExperimentDescription',
                request_serializer=squareup_dot_bandit_dot_service__pb2.EditExperimentDescriptionRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.EditExperimentDescriptionResponse.FromString,
                )
        self.GetAssignmentHistory = channel.unary_unary(
                '/squareup.bandit.AbTestService/GetAssignmentHistory',
                request_serializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentHistoryRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentHistoryResponse.FromString,
                )
        self.CreateNewExperimentVersion = channel.unary_unary(
                '/squareup.bandit.AbTestService/CreateNewExperimentVersion',
                request_serializer=squareup_dot_bandit_dot_service__pb2.CreateNewExperimentVersionRequest.SerializeToString,
                response_deserializer=squareup_dot_bandit_dot_service__pb2.CreateNewExperimentVersionResponse.FromString,
                )


class AbTestServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateExperiment(self, request, context):
        """Creates an experiment with name. An experiment initially starts in the not running state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperiment(self, request, context):
        """Retrieve information about an experiment (by name) if it exists, or 404 if not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentById(self, request, context):
        """Retrieve information about an experiment (by id) if it exists, or 404 if not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentsByName(self, request, context):
        """Retrieve all versions of an experiment by name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperiments(self, request, context):
        """Retrieve information about a list of experiments. Returns a list of experiment configs or error messages.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllExperiments(self, request, context):
        """Get all experiments.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartExperiment(self, request, context):
        """Move an experiment to the running state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopExperiment(self, request, context):
        """Move an experiment to the not running state. Optionally specify a winner.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBucket(self, request, context):
        """Create a bucket by name and weight for a given experiment id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBucket(self, request, context):
        """Retrieve information about a bucket if it exists, or 404 if not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AlterBucket(self, request, context):
        """Alter the weight of an already existing bucket. Useful for scaling up or down.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssignment(self, request, context):
        """*
        Idempotently assigns a given service identifier token to a bucket in the specified experiment,
        else returns the previously assigned bucket.

        If an experiment is running and whether an identifier is already assigned define the behavior as
        follows:
        <pre>
        1. Running experiment, not yet assigned - assign to A/B test and record.
        2. Running experiment, already assigned - return persisted assignment.
        3. Not running, not yet assigned - return default/winner, not recorded.
        4. Not running, already assigned - return persisted assignment.
        </pre>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssignmentsV2(self, request, context):
        """
        Gets assignments for a list of experiment_name, identifier pairs.
        If an experiment is running and whether an identifier is already assigned define the behavior as
        follows:
        <pre>
        1. Running experiment, not yet assigned - assign to A/B test, record and log.
        2. Running experiment, already assigned - return persisted assignment and log.
        3. Not running - return default/winner, not recorded or logged.
        </pre>

        Note that this differs from other endpoints' behavior! In particular, if the experiment is not running,
        the persistence is not queried for previous assignments. The default/winner will be assigned instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordAssignments(self, request, context):
        """Records a stream of Assignments to EventStreamV1 and to EventStreamV2, returns true if all succeed,
        returns false otherwise.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssignments(self, request, context):
        """The future one true assignment endpoint. Supports experiment preconditions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForceAssignment(self, request, context):
        """Override an assignment for an identifier. Useful for testing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteExperiment(self, request, context):
        """Mark experiment as deleted. Current implementation simply hides the experiment from UI
        and prevents further updates. It still allows querying assignments
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditExperimentDescription(self, request, context):
        """Change the description for an experiment. Text is free form but will be HTML-escaped.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssignmentHistory(self, request, context):
        """*
        Returns the assignment if the identifier has already been assigned to a bucket.
        This endpoint is meant for clients that need to handle users who've already seen an experiment
        differently, even if the experiment has changed or has ended
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNewExperimentVersion(self, request, context):
        """*
        Creates a new version for an experiment. The version will be the previous version incremented by 1.
        The status will be NOT_RUNNING. The buckets will be copied over from the previous version.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AbTestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateExperiment,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.CreateExperimentRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.CreateExperimentResponse.SerializeToString,
            ),
            'GetExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperiment,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.GetExperimentRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.GetExperimentResponse.SerializeToString,
            ),
            'GetExperimentById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentById,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.GetExperimentByIdRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.GetExperimentByIdResponse.SerializeToString,
            ),
            'GetExperimentsByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentsByName,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.GetExperimentsByNameRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.GetExperimentsByNameResponse.SerializeToString,
            ),
            'GetExperiments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperiments,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.GetExperimentsRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.GetExperimentsResponse.SerializeToString,
            ),
            'GetAllExperiments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllExperiments,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.GetAllExperimentsRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.GetAllExperimentsResponse.SerializeToString,
            ),
            'StartExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.StartExperiment,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.StartExperimentRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.StartExperimentResponse.SerializeToString,
            ),
            'StopExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.StopExperiment,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.StopExperimentRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.StopExperimentResponse.SerializeToString,
            ),
            'CreateBucket': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBucket,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.CreateBucketRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.CreateBucketResponse.SerializeToString,
            ),
            'GetBucket': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBucket,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.GetBucketRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.GetBucketResponse.SerializeToString,
            ),
            'AlterBucket': grpc.unary_unary_rpc_method_handler(
                    servicer.AlterBucket,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.AlterBucketRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.AlterBucketResponse.SerializeToString,
            ),
            'GetAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssignment,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentResponse.SerializeToString,
            ),
            'GetAssignmentsV2': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssignmentsV2,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentsV2Request.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentsV2Response.SerializeToString,
            ),
            'RecordAssignments': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordAssignments,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.RecordAssignmentsRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.RecordAssignmentsResponse.SerializeToString,
            ),
            'GetAssignments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssignments,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentsRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentsResponse.SerializeToString,
            ),
            'ForceAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.ForceAssignment,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.ForceAssignmentRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.ForceAssignmentResponse.SerializeToString,
            ),
            'DeleteExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteExperiment,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.DeleteExperimentRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.DeleteExperimentResponse.SerializeToString,
            ),
            'EditExperimentDescription': grpc.unary_unary_rpc_method_handler(
                    servicer.EditExperimentDescription,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.EditExperimentDescriptionRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.EditExperimentDescriptionResponse.SerializeToString,
            ),
            'GetAssignmentHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssignmentHistory,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentHistoryRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.GetAssignmentHistoryResponse.SerializeToString,
            ),
            'CreateNewExperimentVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNewExperimentVersion,
                    request_deserializer=squareup_dot_bandit_dot_service__pb2.CreateNewExperimentVersionRequest.FromString,
                    response_serializer=squareup_dot_bandit_dot_service__pb2.CreateNewExperimentVersionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.bandit.AbTestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AbTestService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/CreateExperiment',
            squareup_dot_bandit_dot_service__pb2.CreateExperimentRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.CreateExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/GetExperiment',
            squareup_dot_bandit_dot_service__pb2.GetExperimentRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.GetExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperimentById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/GetExperimentById',
            squareup_dot_bandit_dot_service__pb2.GetExperimentByIdRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.GetExperimentByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperimentsByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/GetExperimentsByName',
            squareup_dot_bandit_dot_service__pb2.GetExperimentsByNameRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.GetExperimentsByNameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperiments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/GetExperiments',
            squareup_dot_bandit_dot_service__pb2.GetExperimentsRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.GetExperimentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllExperiments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/GetAllExperiments',
            squareup_dot_bandit_dot_service__pb2.GetAllExperimentsRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.GetAllExperimentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/StartExperiment',
            squareup_dot_bandit_dot_service__pb2.StartExperimentRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.StartExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/StopExperiment',
            squareup_dot_bandit_dot_service__pb2.StopExperimentRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.StopExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/CreateBucket',
            squareup_dot_bandit_dot_service__pb2.CreateBucketRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.CreateBucketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/GetBucket',
            squareup_dot_bandit_dot_service__pb2.GetBucketRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.GetBucketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AlterBucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/AlterBucket',
            squareup_dot_bandit_dot_service__pb2.AlterBucketRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.AlterBucketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/GetAssignment',
            squareup_dot_bandit_dot_service__pb2.GetAssignmentRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.GetAssignmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssignmentsV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/GetAssignmentsV2',
            squareup_dot_bandit_dot_service__pb2.GetAssignmentsV2Request.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.GetAssignmentsV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordAssignments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/RecordAssignments',
            squareup_dot_bandit_dot_service__pb2.RecordAssignmentsRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.RecordAssignmentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssignments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/GetAssignments',
            squareup_dot_bandit_dot_service__pb2.GetAssignmentsRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.GetAssignmentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ForceAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/ForceAssignment',
            squareup_dot_bandit_dot_service__pb2.ForceAssignmentRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.ForceAssignmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/DeleteExperiment',
            squareup_dot_bandit_dot_service__pb2.DeleteExperimentRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.DeleteExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EditExperimentDescription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/EditExperimentDescription',
            squareup_dot_bandit_dot_service__pb2.EditExperimentDescriptionRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.EditExperimentDescriptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssignmentHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/GetAssignmentHistory',
            squareup_dot_bandit_dot_service__pb2.GetAssignmentHistoryRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.GetAssignmentHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateNewExperimentVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.bandit.AbTestService/CreateNewExperimentVersion',
            squareup_dot_bandit_dot_service__pb2.CreateNewExperimentVersionRequest.SerializeToString,
            squareup_dot_bandit_dot_service__pb2.CreateNewExperimentVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.payapi_wallets.actions import apple_pay_certificate_service_actions_pb2 as squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2


class ApplePayCertificateServiceStub(object):
    """--
    @desc ApplePayCertificateService provides front end APIs to manage certificates.
    --
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewCSR = channel.unary_unary(
                '/squareup.payapi_wallets.ApplePayCertificateService/NewCSR',
                request_serializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.NewCSRRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.NewCSRResponse.FromString,
                )
        self.UploadCertificate = channel.unary_unary(
                '/squareup.payapi_wallets.ApplePayCertificateService/UploadCertificate',
                request_serializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.UploadCertificateRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.UploadCertificateResponse.FromString,
                )
        self.ListCertificates = channel.unary_unary(
                '/squareup.payapi_wallets.ApplePayCertificateService/ListCertificates',
                request_serializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.ListCertificatesRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.ListCertificatesResponse.FromString,
                )
        self.DeleteCertificate = channel.unary_unary(
                '/squareup.payapi_wallets.ApplePayCertificateService/DeleteCertificate',
                request_serializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.DeleteCertificateRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.DeleteCertificateResponse.FromString,
                )


class ApplePayCertificateServiceServicer(object):
    """--
    @desc ApplePayCertificateService provides front end APIs to manage certificates.
    --
    """

    def NewCSR(self, request, context):
        """--
        @desc NewCSR returns a new certificate signing request that is used to exchange a signed certificate from Apple.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadCertificate(self, request, context):
        """--
        @desc UploadCertificate uploads a signed certificate from Apple.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCertificates(self, request, context):
        """--
        @desc ListCertificates lists certificates owned by the specific application.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCertificate(self, request, context):
        """--
        @desc DeleteCertificate marks a specific certificate as deleted.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApplePayCertificateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewCSR': grpc.unary_unary_rpc_method_handler(
                    servicer.NewCSR,
                    request_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.NewCSRRequest.FromString,
                    response_serializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.NewCSRResponse.SerializeToString,
            ),
            'UploadCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadCertificate,
                    request_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.UploadCertificateRequest.FromString,
                    response_serializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.UploadCertificateResponse.SerializeToString,
            ),
            'ListCertificates': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCertificates,
                    request_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.ListCertificatesRequest.FromString,
                    response_serializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.ListCertificatesResponse.SerializeToString,
            ),
            'DeleteCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCertificate,
                    request_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.DeleteCertificateRequest.FromString,
                    response_serializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.DeleteCertificateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.payapi_wallets.ApplePayCertificateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ApplePayCertificateService(object):
    """--
    @desc ApplePayCertificateService provides front end APIs to manage certificates.
    --
    """

    @staticmethod
    def NewCSR(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi_wallets.ApplePayCertificateService/NewCSR',
            squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.NewCSRRequest.SerializeToString,
            squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.NewCSRResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi_wallets.ApplePayCertificateService/UploadCertificate',
            squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.UploadCertificateRequest.SerializeToString,
            squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.UploadCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCertificates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi_wallets.ApplePayCertificateService/ListCertificates',
            squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.ListCertificatesRequest.SerializeToString,
            squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.ListCertificatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi_wallets.ApplePayCertificateService/DeleteCertificate',
            squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.DeleteCertificateRequest.SerializeToString,
            squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__certificate__service__actions__pb2.DeleteCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

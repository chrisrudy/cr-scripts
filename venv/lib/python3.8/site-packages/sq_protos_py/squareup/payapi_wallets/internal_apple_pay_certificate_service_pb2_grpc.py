# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.payapi_wallets.actions import internal_apple_pay_certificate_service_actions_pb2 as squareup_dot_payapi__wallets_dot_actions_dot_internal__apple__pay__certificate__service__actions__pb2


class InternalApplePayCertificateServiceStub(object):
    """--
    @desc InternalApplePayCertificateService provides Apple Pay certificate endpoints consumed by Square internal services.
    --
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RetrieveCertificateAndGenerationTokenByHash = channel.unary_unary(
                '/squareup.payapi_wallets.InternalApplePayCertificateService/RetrieveCertificateAndGenerationTokenByHash',
                request_serializer=squareup_dot_payapi__wallets_dot_actions_dot_internal__apple__pay__certificate__service__actions__pb2.RetrieveCertificateAndGenerationTokenByHashRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_internal__apple__pay__certificate__service__actions__pb2.RetrieveCertificateAndGenerationTokenByHashResponse.FromString,
                )


class InternalApplePayCertificateServiceServicer(object):
    """--
    @desc InternalApplePayCertificateService provides Apple Pay certificate endpoints consumed by Square internal services.
    --
    """

    def RetrieveCertificateAndGenerationTokenByHash(self, request, context):
        """--
        @desc RetrieveCertificateAndGenerationTokenByHash takes a hash of the certificate's public key, and returns the certificate metadata and the generation token.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InternalApplePayCertificateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RetrieveCertificateAndGenerationTokenByHash': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveCertificateAndGenerationTokenByHash,
                    request_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_internal__apple__pay__certificate__service__actions__pb2.RetrieveCertificateAndGenerationTokenByHashRequest.FromString,
                    response_serializer=squareup_dot_payapi__wallets_dot_actions_dot_internal__apple__pay__certificate__service__actions__pb2.RetrieveCertificateAndGenerationTokenByHashResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.payapi_wallets.InternalApplePayCertificateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InternalApplePayCertificateService(object):
    """--
    @desc InternalApplePayCertificateService provides Apple Pay certificate endpoints consumed by Square internal services.
    --
    """

    @staticmethod
    def RetrieveCertificateAndGenerationTokenByHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi_wallets.InternalApplePayCertificateService/RetrieveCertificateAndGenerationTokenByHash',
            squareup_dot_payapi__wallets_dot_actions_dot_internal__apple__pay__certificate__service__actions__pb2.RetrieveCertificateAndGenerationTokenByHashRequest.SerializeToString,
            squareup_dot_payapi__wallets_dot_actions_dot_internal__apple__pay__certificate__service__actions__pb2.RetrieveCertificateAndGenerationTokenByHashResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.payapi_wallets.actions import apple_pay_session_service_actions_pb2 as squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__session__service__actions__pb2


class ApplePaySessionServiceStub(object):
    """ApplePaySessionService exposes an internal endpoint to start an
    Apple Pay on Web session.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartSession = channel.unary_unary(
                '/squareup.payapi_wallets.ApplePaySessionService/StartSession',
                request_serializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__session__service__actions__pb2.StartSessionRequest.SerializeToString,
                response_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__session__service__actions__pb2.StartSessionResponse.FromString,
                )


class ApplePaySessionServiceServicer(object):
    """ApplePaySessionService exposes an internal endpoint to start an
    Apple Pay on Web session.
    """

    def StartSession(self, request, context):
        """--
        @desc Apple Pay merchant validation and session creation endpoint.
        ApplePayStartSession calls Apple Pay to validate the merchant and domain.
        If the merchant+domain combination is valid, the endpoint creates a session
        and returns it to the browser. The session information is used by Safari to
        display Apple Pay's sheet.

        This internal endpoint is used by sq-payment-form.js to trigger Apple Pay's
        sheet once the payment process is started.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApplePaySessionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartSession': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSession,
                    request_deserializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__session__service__actions__pb2.StartSessionRequest.FromString,
                    response_serializer=squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__session__service__actions__pb2.StartSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.payapi_wallets.ApplePaySessionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ApplePaySessionService(object):
    """ApplePaySessionService exposes an internal endpoint to start an
    Apple Pay on Web session.
    """

    @staticmethod
    def StartSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.payapi_wallets.ApplePaySessionService/StartSession',
            squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__session__service__actions__pb2.StartSessionRequest.SerializeToString,
            squareup_dot_payapi__wallets_dot_actions_dot_apple__pay__session__service__actions__pb2.StartSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

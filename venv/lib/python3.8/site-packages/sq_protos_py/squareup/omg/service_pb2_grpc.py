# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.omg import create_order_pb2 as squareup_dot_omg_dot_create__order__pb2
from sq_protos_py.squareup.omg import search_orders_pb2 as squareup_dot_omg_dot_search__orders__pb2
from sq_protos_py.squareup.omg import service_pb2 as squareup_dot_omg_dot_service__pb2


class OrderServiceStub(object):
    """TODO: rename "remove" methods to "cancel" ? would reflect that we'll continue to keep the data in a voided status
    ... gets blurry that some things have status and that could reflect voiding, others don't (e.g. tax/discount)
    as part of the contract, should line items have status? we can infer delivery of line items from Fulfillments, and payment from the Payments/Refunds
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchOrders = channel.unary_unary(
                '/squareup.omg.OrderService/SearchOrders',
                request_serializer=squareup_dot_omg_dot_search__orders__pb2.SearchOrdersRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_search__orders__pb2.SearchOrdersResponse.FromString,
                )
        self.CreateOrder = channel.unary_unary(
                '/squareup.omg.OrderService/CreateOrder',
                request_serializer=squareup_dot_omg_dot_create__order__pb2.CreateOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_create__order__pb2.CreateOrderResponse.FromString,
                )
        self.CalculateOrder = channel.unary_unary(
                '/squareup.omg.OrderService/CalculateOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.CalculateOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.CalculateOrderResponse.FromString,
                )
        self.CompleteOrder = channel.unary_unary(
                '/squareup.omg.OrderService/CompleteOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.CompleteOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.CompleteOrderResponse.FromString,
                )
        self.GetOrder = channel.unary_unary(
                '/squareup.omg.OrderService/GetOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.GetOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.GetOrderResponse.FromString,
                )
        self.RetrieveOrder = channel.unary_unary(
                '/squareup.omg.OrderService/RetrieveOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.RetrieveOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.RetrieveOrderResponse.FromString,
                )
        self.UpdateOrder = channel.unary_unary(
                '/squareup.omg.OrderService/UpdateOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.UpdateOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.UpdateOrderResponse.FromString,
                )
        self.BatchRetrieveOrders = channel.unary_unary(
                '/squareup.omg.OrderService/BatchRetrieveOrders',
                request_serializer=squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersResponse.FromString,
                )
        self.GetCalculatedCart = channel.unary_unary(
                '/squareup.omg.OrderService/GetCalculatedCart',
                request_serializer=squareup_dot_omg_dot_service__pb2.GetCalculatedCartRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.GetCalculatedCartResponse.FromString,
                )
        self.AcquireOrderLock = channel.unary_unary(
                '/squareup.omg.OrderService/AcquireOrderLock',
                request_serializer=squareup_dot_omg_dot_service__pb2.AcquireOrderLockRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.AcquireOrderLockResponse.FromString,
                )
        self.PayOrder = channel.unary_unary(
                '/squareup.omg.OrderService/PayOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.PayOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.PayOrderResponse.FromString,
                )
        self.RefundOrder = channel.unary_unary(
                '/squareup.omg.OrderService/RefundOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.RefundOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.RefundOrderResponse.FromString,
                )


class OrderServiceServicer(object):
    """TODO: rename "remove" methods to "cancel" ? would reflect that we'll continue to keep the data in a voided status
    ... gets blurry that some things have status and that could reflect voiding, others don't (e.g. tax/discount)
    as part of the contract, should line items have status? we can infer delivery of line items from Fulfillments, and payment from the Payments/Refunds
    """

    def SearchOrders(self, request, context):
        """--
        @desc Search all orders for one or more locations. Orders include all sales,
        returns, and exchanges regardless of how or when they entered the Square
        Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).

        SearchOrders requests need to specify which locations to search and define a
        [`SearchOrdersQuery`](#type-searchordersquery) object which controls
        how to sort or filter the results. Your SearchOrdersQuery can:

        Set filter criteria.
        Set sort order.
        Determine whether to return results as complete Order objects, or as
        [OrderEntry](#type-orderentry) objects.

        Note that details for orders processed with Square Point of Sale while in
        offline mode may not be transmitted to Square for up to 72 hours. Offline
        orders have a `created_at` value that reflects the time the order was created,
        not the time it was subsequently transmitted to Square.

        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOrder(self, request, context):
        """--
        @desc Creates a new [Order](#type-order) which can include information on products for
        purchase and settings to apply to the purchase.

        To pay for a created order, please refer to the [Pay for Orders](/orders-api/pay-for-orders)
        guide.

        You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateOrder(self, request, context):
        """--
        @desc Calculates an [Order](#type-order).
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteOrder(self, request, context):
        """--
        @desc Completes an [Order](#type-order) moving the status to COMPLETED and propagating the order
        through Square's infrastructure for reporting (if not propagated yet). All other aspects of an
        order (fulfillments, for example) must have a COMPLETED status before performing a CompleteOrder
        call.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """--
        @desc Retrieves an [Order](#type-order) by ID.

        N.B. This method is deprecated. Use [RetrieveOrder](#endpoint-retrieveorder) instead.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveOrder(self, request, context):
        """@desc Retrieves an [Order](#type-order) by ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOrder(self, request, context):
        """--
        @desc Updates an open [Order](#type-order) by adding, replacing, or deleting
        fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.

        An UpdateOrder request requires the following:

        - The `order_id` in the endpoint path, identifying the order to update.
        - The latest `version` of the order to update.
        - The [sparse order](/orders-api/manage-orders#sparse-order-objects)
        containing only the fields to update and the version the update is
        being applied to.
        - If deleting fields, the [dot notation paths](/orders-api/manage-orders#on-dot-notation)
        identifying fields to clear.

        To pay for an order, please refer to the [Pay for Orders](/orders-api/pay-for-orders) guide.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchRetrieveOrders(self, request, context):
        """Retrieves multiple orders from a single merchant at their latest version.
        Cannot be used with multiple merchants.

        --
        @desc Retrieves a set of [Order](#type-order)s by their IDs.

        If a given Order ID does not exist, the ID is ignored instead of generating an error.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCalculatedCart(self, request, context):
        """Returns a previously calculated Cart for the provided order@version.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcquireOrderLock(self, request, context):
        """Acquire an OrderLock against an order at a specific version.
        Fails if a conflicting order lock already exists or the order is not at the specified version.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PayOrder(self, request, context):
        """--
        @desc Pay for an [order](#type-order) using one or more approved [payments](#type-payment),
        or settle an order with a total of `0`.

        The total of the `payment_ids` listed in the request must be equal to the order
        total. Orders with a total amount of `0` can be marked as paid by specifying an empty
        array of `payment_ids` in the request.

        To be used with PayOrder, a payment must:

        - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-createpayment).
        Any approved payments that reference the same `order_id` not specified in the
        `payment_ids` will be canceled.
        - Be approved with [delayed capture](/payments-api/take-payments#delayed-capture).
        Using a delayed capture payment with PayOrder will complete the approved payment.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefundOrder(self, request, context):
        """Applies refunds to the return order using authorized refunds attached to the order.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchOrders,
                    request_deserializer=squareup_dot_omg_dot_search__orders__pb2.SearchOrdersRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_search__orders__pb2.SearchOrdersResponse.SerializeToString,
            ),
            'CreateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrder,
                    request_deserializer=squareup_dot_omg_dot_create__order__pb2.CreateOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_create__order__pb2.CreateOrderResponse.SerializeToString,
            ),
            'CalculateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.CalculateOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.CalculateOrderResponse.SerializeToString,
            ),
            'CompleteOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.CompleteOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.CompleteOrderResponse.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.GetOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.GetOrderResponse.SerializeToString,
            ),
            'RetrieveOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.RetrieveOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.RetrieveOrderResponse.SerializeToString,
            ),
            'UpdateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.UpdateOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.UpdateOrderResponse.SerializeToString,
            ),
            'BatchRetrieveOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchRetrieveOrders,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersResponse.SerializeToString,
            ),
            'GetCalculatedCart': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCalculatedCart,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.GetCalculatedCartRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.GetCalculatedCartResponse.SerializeToString,
            ),
            'AcquireOrderLock': grpc.unary_unary_rpc_method_handler(
                    servicer.AcquireOrderLock,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.AcquireOrderLockRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.AcquireOrderLockResponse.SerializeToString,
            ),
            'PayOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.PayOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.PayOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.PayOrderResponse.SerializeToString,
            ),
            'RefundOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.RefundOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.RefundOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.RefundOrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.omg.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """TODO: rename "remove" methods to "cancel" ? would reflect that we'll continue to keep the data in a voided status
    ... gets blurry that some things have status and that could reflect voiding, others don't (e.g. tax/discount)
    as part of the contract, should line items have status? we can infer delivery of line items from Fulfillments, and payment from the Payments/Refunds
    """

    @staticmethod
    def SearchOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/SearchOrders',
            squareup_dot_omg_dot_search__orders__pb2.SearchOrdersRequest.SerializeToString,
            squareup_dot_omg_dot_search__orders__pb2.SearchOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/CreateOrder',
            squareup_dot_omg_dot_create__order__pb2.CreateOrderRequest.SerializeToString,
            squareup_dot_omg_dot_create__order__pb2.CreateOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/CalculateOrder',
            squareup_dot_omg_dot_service__pb2.CalculateOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.CalculateOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/CompleteOrder',
            squareup_dot_omg_dot_service__pb2.CompleteOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.CompleteOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/GetOrder',
            squareup_dot_omg_dot_service__pb2.GetOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.GetOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/RetrieveOrder',
            squareup_dot_omg_dot_service__pb2.RetrieveOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.RetrieveOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/UpdateOrder',
            squareup_dot_omg_dot_service__pb2.UpdateOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.UpdateOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchRetrieveOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/BatchRetrieveOrders',
            squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCalculatedCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/GetCalculatedCart',
            squareup_dot_omg_dot_service__pb2.GetCalculatedCartRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.GetCalculatedCartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcquireOrderLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/AcquireOrderLock',
            squareup_dot_omg_dot_service__pb2.AcquireOrderLockRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.AcquireOrderLockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PayOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/PayOrder',
            squareup_dot_omg_dot_service__pb2.PayOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.PayOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefundOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.OrderService/RefundOrder',
            squareup_dot_omg_dot_service__pb2.RefundOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.RefundOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class InternalOrderServiceStub(object):
    """Internal implementation of OrderService.
    These endpoints are unauthenticated and need to be acl'ed separately.
    The implemention is the same otherwise.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOrder = channel.unary_unary(
                '/squareup.omg.InternalOrderService/GetOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.GetOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.GetOrderResponse.FromString,
                )
        self.BatchRetrieveOrders = channel.unary_unary(
                '/squareup.omg.InternalOrderService/BatchRetrieveOrders',
                request_serializer=squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersResponse.FromString,
                )
        self.UpdateOrder = channel.unary_unary(
                '/squareup.omg.InternalOrderService/UpdateOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.UpdateOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.UpdateOrderResponse.FromString,
                )
        self.CreateOrder = channel.unary_unary(
                '/squareup.omg.InternalOrderService/CreateOrder',
                request_serializer=squareup_dot_omg_dot_create__order__pb2.CreateOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_create__order__pb2.CreateOrderResponse.FromString,
                )
        self.RefundOrder = channel.unary_unary(
                '/squareup.omg.InternalOrderService/RefundOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.RefundOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.RefundOrderResponse.FromString,
                )
        self.GetVersionedOrder = channel.unary_unary(
                '/squareup.omg.InternalOrderService/GetVersionedOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.GetVersionedOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.GetVersionedOrderResponse.FromString,
                )


class InternalOrderServiceServicer(object):
    """Internal implementation of OrderService.
    These endpoints are unauthenticated and need to be acl'ed separately.
    The implemention is the same otherwise.
    """

    def GetOrder(self, request, context):
        """See OrderService.GetOrder
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchRetrieveOrders(self, request, context):
        """See OrderService.BatchRetrieveOrders
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOrder(self, request, context):
        """See OrderService.UpdateOrder
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefundOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVersionedOrder(self, request, context):
        """retrieve full state of an order at a specific version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InternalOrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.GetOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.GetOrderResponse.SerializeToString,
            ),
            'BatchRetrieveOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchRetrieveOrders,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersResponse.SerializeToString,
            ),
            'UpdateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.UpdateOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.UpdateOrderResponse.SerializeToString,
            ),
            'CreateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrder,
                    request_deserializer=squareup_dot_omg_dot_create__order__pb2.CreateOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_create__order__pb2.CreateOrderResponse.SerializeToString,
            ),
            'RefundOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.RefundOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.RefundOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.RefundOrderResponse.SerializeToString,
            ),
            'GetVersionedOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersionedOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.GetVersionedOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.GetVersionedOrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.omg.InternalOrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InternalOrderService(object):
    """Internal implementation of OrderService.
    These endpoints are unauthenticated and need to be acl'ed separately.
    The implemention is the same otherwise.
    """

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.InternalOrderService/GetOrder',
            squareup_dot_omg_dot_service__pb2.GetOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.GetOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchRetrieveOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.InternalOrderService/BatchRetrieveOrders',
            squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.BatchRetrieveOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.InternalOrderService/UpdateOrder',
            squareup_dot_omg_dot_service__pb2.UpdateOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.UpdateOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.InternalOrderService/CreateOrder',
            squareup_dot_omg_dot_create__order__pb2.CreateOrderRequest.SerializeToString,
            squareup_dot_omg_dot_create__order__pb2.CreateOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefundOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.InternalOrderService/RefundOrder',
            squareup_dot_omg_dot_service__pb2.RefundOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.RefundOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVersionedOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.InternalOrderService/GetVersionedOrder',
            squareup_dot_omg_dot_service__pb2.GetVersionedOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.GetVersionedOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AdminServiceStub(object):
    """NB: these methods are ACL'd to all of eng. If adding a sensitive method
    be sure to update the ACLs appropriately!
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ComputeOrderVersionDelta = channel.unary_unary(
                '/squareup.omg.AdminService/ComputeOrderVersionDelta',
                request_serializer=squareup_dot_omg_dot_service__pb2.ComputeOrderVersionDeltaRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.ComputeOrderVersionDeltaResponse.FromString,
                )
        self.ComputeShard = channel.unary_unary(
                '/squareup.omg.AdminService/ComputeShard',
                request_serializer=squareup_dot_omg_dot_service__pb2.ComputeShardRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.ComputeShardResponse.FromString,
                )
        self.DecodeOrderId = channel.unary_unary(
                '/squareup.omg.AdminService/DecodeOrderId',
                request_serializer=squareup_dot_omg_dot_service__pb2.DecodeOrderIdRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.DecodeOrderIdResponse.FromString,
                )
        self.EncodeOrderId = channel.unary_unary(
                '/squareup.omg.AdminService/EncodeOrderId',
                request_serializer=squareup_dot_omg_dot_service__pb2.EncodeOrderIdRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.EncodeOrderIdResponse.FromString,
                )
        self.GetAuditLogs = channel.unary_unary(
                '/squareup.omg.AdminService/GetAuditLogs',
                request_serializer=squareup_dot_omg_dot_service__pb2.GetAuditLogsRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.GetAuditLogsResponse.FromString,
                )
        self.GetOrderEntries = channel.unary_unary(
                '/squareup.omg.AdminService/GetOrderEntries',
                request_serializer=squareup_dot_omg_dot_service__pb2.GetOrderEntriesRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.GetOrderEntriesResponse.FromString,
                )
        self.GetRecentOrders = channel.unary_unary(
                '/squareup.omg.AdminService/GetRecentOrders',
                request_serializer=squareup_dot_omg_dot_service__pb2.GetRecentOrdersRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.GetRecentOrdersResponse.FromString,
                )
        self.PutOrder = channel.unary_unary(
                '/squareup.omg.AdminService/PutOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.PutOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.PutOrderResponse.FromString,
                )
        self.PutOrderData = channel.unary_unary(
                '/squareup.omg.AdminService/PutOrderData',
                request_serializer=squareup_dot_omg_dot_service__pb2.PutOrderDataRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.PutOrderDataResponse.FromString,
                )
        self.AdminBatchRetrieveOrders = channel.unary_unary(
                '/squareup.omg.AdminService/AdminBatchRetrieveOrders',
                request_serializer=squareup_dot_omg_dot_service__pb2.AdminBatchRetrieveOrdersRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.AdminBatchRetrieveOrdersResponse.FromString,
                )
        self.AdminDeleteOrder = channel.unary_unary(
                '/squareup.omg.AdminService/AdminDeleteOrder',
                request_serializer=squareup_dot_omg_dot_service__pb2.AdminDeleteOrderRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.AdminDeleteOrderResponse.FromString,
                )
        self.AdminGetOrderData = channel.unary_unary(
                '/squareup.omg.AdminService/AdminGetOrderData',
                request_serializer=squareup_dot_omg_dot_service__pb2.AdminGetOrderDataRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.AdminGetOrderDataResponse.FromString,
                )
        self.DecodeSearchOrdersCursor = channel.unary_unary(
                '/squareup.omg.AdminService/DecodeSearchOrdersCursor',
                request_serializer=squareup_dot_omg_dot_service__pb2.DecodeSearchOrdersCursorRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.DecodeSearchOrdersCursorResponse.FromString,
                )
        self.AdminGetFeatureFlagValues = channel.unary_unary(
                '/squareup.omg.AdminService/AdminGetFeatureFlagValues',
                request_serializer=squareup_dot_omg_dot_service__pb2.AdminGetFeatureFlagValuesRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_service__pb2.AdminGetFeatureFlagValuesResponse.FromString,
                )


class AdminServiceServicer(object):
    """NB: these methods are ACL'd to all of eng. If adding a sensitive method
    be sure to update the ACLs appropriately!
    """

    def ComputeOrderVersionDelta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputeShard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecodeOrderId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncodeOrderId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuditLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecentOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutOrderData(self, request, context):
        """Admin tool used to set an Order, Cart and InternalOrder for a specific Order version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminBatchRetrieveOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminDeleteOrder(self, request, context):
        """Deletes an order from all database tables. Staging only!
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminGetOrderData(self, request, context):
        """Retrieves and presents the raw order data from the database, post decryption but without any
        other modifications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecodeSearchOrdersCursor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdminGetFeatureFlagValues(self, request, context):
        """Retrieves feature flags and their values for a given app ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ComputeOrderVersionDelta': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeOrderVersionDelta,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.ComputeOrderVersionDeltaRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.ComputeOrderVersionDeltaResponse.SerializeToString,
            ),
            'ComputeShard': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeShard,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.ComputeShardRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.ComputeShardResponse.SerializeToString,
            ),
            'DecodeOrderId': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodeOrderId,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.DecodeOrderIdRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.DecodeOrderIdResponse.SerializeToString,
            ),
            'EncodeOrderId': grpc.unary_unary_rpc_method_handler(
                    servicer.EncodeOrderId,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.EncodeOrderIdRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.EncodeOrderIdResponse.SerializeToString,
            ),
            'GetAuditLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuditLogs,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.GetAuditLogsRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.GetAuditLogsResponse.SerializeToString,
            ),
            'GetOrderEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderEntries,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.GetOrderEntriesRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.GetOrderEntriesResponse.SerializeToString,
            ),
            'GetRecentOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecentOrders,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.GetRecentOrdersRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.GetRecentOrdersResponse.SerializeToString,
            ),
            'PutOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.PutOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.PutOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.PutOrderResponse.SerializeToString,
            ),
            'PutOrderData': grpc.unary_unary_rpc_method_handler(
                    servicer.PutOrderData,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.PutOrderDataRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.PutOrderDataResponse.SerializeToString,
            ),
            'AdminBatchRetrieveOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminBatchRetrieveOrders,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.AdminBatchRetrieveOrdersRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.AdminBatchRetrieveOrdersResponse.SerializeToString,
            ),
            'AdminDeleteOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminDeleteOrder,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.AdminDeleteOrderRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.AdminDeleteOrderResponse.SerializeToString,
            ),
            'AdminGetOrderData': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminGetOrderData,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.AdminGetOrderDataRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.AdminGetOrderDataResponse.SerializeToString,
            ),
            'DecodeSearchOrdersCursor': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodeSearchOrdersCursor,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.DecodeSearchOrdersCursorRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.DecodeSearchOrdersCursorResponse.SerializeToString,
            ),
            'AdminGetFeatureFlagValues': grpc.unary_unary_rpc_method_handler(
                    servicer.AdminGetFeatureFlagValues,
                    request_deserializer=squareup_dot_omg_dot_service__pb2.AdminGetFeatureFlagValuesRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_service__pb2.AdminGetFeatureFlagValuesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.omg.AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminService(object):
    """NB: these methods are ACL'd to all of eng. If adding a sensitive method
    be sure to update the ACLs appropriately!
    """

    @staticmethod
    def ComputeOrderVersionDelta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/ComputeOrderVersionDelta',
            squareup_dot_omg_dot_service__pb2.ComputeOrderVersionDeltaRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.ComputeOrderVersionDeltaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputeShard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/ComputeShard',
            squareup_dot_omg_dot_service__pb2.ComputeShardRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.ComputeShardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecodeOrderId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/DecodeOrderId',
            squareup_dot_omg_dot_service__pb2.DecodeOrderIdRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.DecodeOrderIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncodeOrderId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/EncodeOrderId',
            squareup_dot_omg_dot_service__pb2.EncodeOrderIdRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.EncodeOrderIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAuditLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/GetAuditLogs',
            squareup_dot_omg_dot_service__pb2.GetAuditLogsRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.GetAuditLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/GetOrderEntries',
            squareup_dot_omg_dot_service__pb2.GetOrderEntriesRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.GetOrderEntriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRecentOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/GetRecentOrders',
            squareup_dot_omg_dot_service__pb2.GetRecentOrdersRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.GetRecentOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/PutOrder',
            squareup_dot_omg_dot_service__pb2.PutOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.PutOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutOrderData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/PutOrderData',
            squareup_dot_omg_dot_service__pb2.PutOrderDataRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.PutOrderDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminBatchRetrieveOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/AdminBatchRetrieveOrders',
            squareup_dot_omg_dot_service__pb2.AdminBatchRetrieveOrdersRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.AdminBatchRetrieveOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminDeleteOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/AdminDeleteOrder',
            squareup_dot_omg_dot_service__pb2.AdminDeleteOrderRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.AdminDeleteOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminGetOrderData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/AdminGetOrderData',
            squareup_dot_omg_dot_service__pb2.AdminGetOrderDataRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.AdminGetOrderDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecodeSearchOrdersCursor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/DecodeSearchOrdersCursor',
            squareup_dot_omg_dot_service__pb2.DecodeSearchOrdersCursorRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.DecodeSearchOrdersCursorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdminGetFeatureFlagValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.AdminService/AdminGetFeatureFlagValues',
            squareup_dot_omg_dot_service__pb2.AdminGetFeatureFlagValuesRequest.SerializeToString,
            squareup_dot_omg_dot_service__pb2.AdminGetFeatureFlagValuesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

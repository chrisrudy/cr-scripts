# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.omg.internal import order_rewards_service_pb2 as squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2


class OrderRewardsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddReward = channel.unary_unary(
                '/squareup.omg.internal.OrderRewardsService/AddReward',
                request_serializer=squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.AddRewardRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.AddRewardResponse.FromString,
                )
        self.RemoveReward = channel.unary_unary(
                '/squareup.omg.internal.OrderRewardsService/RemoveReward',
                request_serializer=squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.RemoveRewardRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.RemoveRewardResponse.FromString,
                )


class OrderRewardsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddReward(self, request, context):
        """--
        @desc Add a Reward to an Order. The Reward to add does not have to be applicable to the
        specified Order at the time of addition, and it will be automatically applied as a Discount
        after it is added if subsequent updates to the Order cause the Order to reach a state that
        meets the criteria of the corresponding Pricing Rule. Adding a Reward will cause the Order to
        be recalculated.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveReward(self, request, context):
        """--
        @desc Remove a Reward from an Order. The Reward will no longer be reserved for the Order,
        and if it was active, the Discount corresponding to the Reward will be removed, and the Order
        will be recalculated.
        --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderRewardsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddReward': grpc.unary_unary_rpc_method_handler(
                    servicer.AddReward,
                    request_deserializer=squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.AddRewardRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.AddRewardResponse.SerializeToString,
            ),
            'RemoveReward': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveReward,
                    request_deserializer=squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.RemoveRewardRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.RemoveRewardResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.omg.internal.OrderRewardsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderRewardsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddReward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.internal.OrderRewardsService/AddReward',
            squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.AddRewardRequest.SerializeToString,
            squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.AddRewardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveReward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.internal.OrderRewardsService/RemoveReward',
            squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.RemoveRewardRequest.SerializeToString,
            squareup_dot_omg_dot_internal_dot_order__rewards__service__pb2.RemoveRewardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

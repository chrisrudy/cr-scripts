# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.omg.internal import admin_mysql_service_pb2 as squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2


class AdminMysqlServiceStub(object):
    """*
    Service for handling order carts.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TableSizeStatistics = channel.unary_unary(
                '/squareup.omg.internal.AdminMysqlService/TableSizeStatistics',
                request_serializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.TableSizeStatisticsRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.TableSizeStatisticsResponse.FromString,
                )
        self.LongRunningTransactions = channel.unary_unary(
                '/squareup.omg.internal.AdminMysqlService/LongRunningTransactions',
                request_serializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.LongRunningTransactionsRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.LongRunningTransactionsResponse.FromString,
                )
        self.KillTransaction = channel.unary_unary(
                '/squareup.omg.internal.AdminMysqlService/KillTransaction',
                request_serializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.KillTransactionRequest.SerializeToString,
                response_deserializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.KillTransactionResponse.FromString,
                )


class AdminMysqlServiceServicer(object):
    """*
    Service for handling order carts.
    """

    def TableSizeStatistics(self, request, context):
        """* Retrieve table size statistics for a given datasource 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LongRunningTransactions(self, request, context):
        """* Find long running transactions for a given datasource 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KillTransaction(self, request, context):
        """* Terminate a long running transaction for a given datasource. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminMysqlServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TableSizeStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.TableSizeStatistics,
                    request_deserializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.TableSizeStatisticsRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.TableSizeStatisticsResponse.SerializeToString,
            ),
            'LongRunningTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.LongRunningTransactions,
                    request_deserializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.LongRunningTransactionsRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.LongRunningTransactionsResponse.SerializeToString,
            ),
            'KillTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.KillTransaction,
                    request_deserializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.KillTransactionRequest.FromString,
                    response_serializer=squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.KillTransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.omg.internal.AdminMysqlService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminMysqlService(object):
    """*
    Service for handling order carts.
    """

    @staticmethod
    def TableSizeStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.internal.AdminMysqlService/TableSizeStatistics',
            squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.TableSizeStatisticsRequest.SerializeToString,
            squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.TableSizeStatisticsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LongRunningTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.internal.AdminMysqlService/LongRunningTransactions',
            squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.LongRunningTransactionsRequest.SerializeToString,
            squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.LongRunningTransactionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KillTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.omg.internal.AdminMysqlService/KillTransaction',
            squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.KillTransactionRequest.SerializeToString,
            squareup_dot_omg_dot_internal_dot_admin__mysql__service__pb2.KillTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

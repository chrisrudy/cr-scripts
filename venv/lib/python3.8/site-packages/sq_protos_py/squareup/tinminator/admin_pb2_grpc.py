# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.tinminator import admin_pb2 as squareup_dot_tinminator_dot_admin__pb2


class TinminatorAdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BuildBatch = channel.unary_unary(
                '/squareup.tinminator.admin.TinminatorAdminService/BuildBatch',
                request_serializer=squareup_dot_tinminator_dot_admin__pb2.BuildBatchRequest.SerializeToString,
                response_deserializer=squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.FromString,
                )
        self.DownloadBatch = channel.unary_unary(
                '/squareup.tinminator.admin.TinminatorAdminService/DownloadBatch',
                request_serializer=squareup_dot_tinminator_dot_admin__pb2.DownloadBatchRequest.SerializeToString,
                response_deserializer=squareup_dot_tinminator_dot_admin__pb2.DownloadBatchResponse.FromString,
                )
        self.ForceAssignBulkAttempts = channel.unary_unary(
                '/squareup.tinminator.admin.TinminatorAdminService/ForceAssignBulkAttempts',
                request_serializer=squareup_dot_tinminator_dot_admin__pb2.ForceAssignBulkAttemptsRequest.SerializeToString,
                response_deserializer=squareup_dot_tinminator_dot_admin__pb2.ForceAssignBulkAttemptsResponse.FromString,
                )
        self.GetBatch = channel.unary_unary(
                '/squareup.tinminator.admin.TinminatorAdminService/GetBatch',
                request_serializer=squareup_dot_tinminator_dot_admin__pb2.GetBatchRequest.SerializeToString,
                response_deserializer=squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.FromString,
                )
        self.ListBatches = channel.unary_unary(
                '/squareup.tinminator.admin.TinminatorAdminService/ListBatches',
                request_serializer=squareup_dot_tinminator_dot_admin__pb2.ListBatchesRequest.SerializeToString,
                response_deserializer=squareup_dot_tinminator_dot_admin__pb2.ListBatchesResponse.FromString,
                )
        self.MarkBatchAsSubmitted = channel.unary_unary(
                '/squareup.tinminator.admin.TinminatorAdminService/MarkBatchAsSubmitted',
                request_serializer=squareup_dot_tinminator_dot_admin__pb2.MarkBatchAsSubmittedRequest.SerializeToString,
                response_deserializer=squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.FromString,
                )
        self.UploadBatchResponse = channel.unary_unary(
                '/squareup.tinminator.admin.TinminatorAdminService/UploadBatchResponse',
                request_serializer=squareup_dot_tinminator_dot_admin__pb2.UploadBatchResponseRequest.SerializeToString,
                response_deserializer=squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.FromString,
                )


class TinminatorAdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BuildBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForceAssignBulkAttempts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBatches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkBatchAsSubmitted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadBatchResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TinminatorAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BuildBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.BuildBatch,
                    request_deserializer=squareup_dot_tinminator_dot_admin__pb2.BuildBatchRequest.FromString,
                    response_serializer=squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.SerializeToString,
            ),
            'DownloadBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadBatch,
                    request_deserializer=squareup_dot_tinminator_dot_admin__pb2.DownloadBatchRequest.FromString,
                    response_serializer=squareup_dot_tinminator_dot_admin__pb2.DownloadBatchResponse.SerializeToString,
            ),
            'ForceAssignBulkAttempts': grpc.unary_unary_rpc_method_handler(
                    servicer.ForceAssignBulkAttempts,
                    request_deserializer=squareup_dot_tinminator_dot_admin__pb2.ForceAssignBulkAttemptsRequest.FromString,
                    response_serializer=squareup_dot_tinminator_dot_admin__pb2.ForceAssignBulkAttemptsResponse.SerializeToString,
            ),
            'GetBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatch,
                    request_deserializer=squareup_dot_tinminator_dot_admin__pb2.GetBatchRequest.FromString,
                    response_serializer=squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.SerializeToString,
            ),
            'ListBatches': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBatches,
                    request_deserializer=squareup_dot_tinminator_dot_admin__pb2.ListBatchesRequest.FromString,
                    response_serializer=squareup_dot_tinminator_dot_admin__pb2.ListBatchesResponse.SerializeToString,
            ),
            'MarkBatchAsSubmitted': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkBatchAsSubmitted,
                    request_deserializer=squareup_dot_tinminator_dot_admin__pb2.MarkBatchAsSubmittedRequest.FromString,
                    response_serializer=squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.SerializeToString,
            ),
            'UploadBatchResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadBatchResponse,
                    request_deserializer=squareup_dot_tinminator_dot_admin__pb2.UploadBatchResponseRequest.FromString,
                    response_serializer=squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.tinminator.admin.TinminatorAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TinminatorAdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BuildBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.tinminator.admin.TinminatorAdminService/BuildBatch',
            squareup_dot_tinminator_dot_admin__pb2.BuildBatchRequest.SerializeToString,
            squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.tinminator.admin.TinminatorAdminService/DownloadBatch',
            squareup_dot_tinminator_dot_admin__pb2.DownloadBatchRequest.SerializeToString,
            squareup_dot_tinminator_dot_admin__pb2.DownloadBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ForceAssignBulkAttempts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.tinminator.admin.TinminatorAdminService/ForceAssignBulkAttempts',
            squareup_dot_tinminator_dot_admin__pb2.ForceAssignBulkAttemptsRequest.SerializeToString,
            squareup_dot_tinminator_dot_admin__pb2.ForceAssignBulkAttemptsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.tinminator.admin.TinminatorAdminService/GetBatch',
            squareup_dot_tinminator_dot_admin__pb2.GetBatchRequest.SerializeToString,
            squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBatches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.tinminator.admin.TinminatorAdminService/ListBatches',
            squareup_dot_tinminator_dot_admin__pb2.ListBatchesRequest.SerializeToString,
            squareup_dot_tinminator_dot_admin__pb2.ListBatchesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkBatchAsSubmitted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.tinminator.admin.TinminatorAdminService/MarkBatchAsSubmitted',
            squareup_dot_tinminator_dot_admin__pb2.MarkBatchAsSubmittedRequest.SerializeToString,
            squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadBatchResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.tinminator.admin.TinminatorAdminService/UploadBatchResponse',
            squareup_dot_tinminator_dot_admin__pb2.UploadBatchResponseRequest.SerializeToString,
            squareup_dot_tinminator_dot_admin__pb2.BulkValidationBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.admin import service_pb2 as squareup_dot_admin_dot_service__pb2


class TicketV2AdminServiceStub(object):
    """** Only exposed via Admin Console for debugging */
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Show = channel.unary_unary(
                '/squareup.waiter.admin.TicketV2AdminService/Show',
                request_serializer=squareup_dot_admin_dot_service__pb2.ShowRequest.SerializeToString,
                response_deserializer=squareup_dot_admin_dot_service__pb2.ShowResponse.FromString,
                )
        self.TicketReplayLogsList = channel.unary_unary(
                '/squareup.waiter.admin.TicketV2AdminService/TicketReplayLogsList',
                request_serializer=squareup_dot_admin_dot_service__pb2.TicketReplayLogsListRequest.SerializeToString,
                response_deserializer=squareup_dot_admin_dot_service__pb2.TicketReplayLogsListResponse.FromString,
                )
        self.LookupTicketsByUnitTokenNameAndDateRange = channel.unary_unary(
                '/squareup.waiter.admin.TicketV2AdminService/LookupTicketsByUnitTokenNameAndDateRange',
                request_serializer=squareup_dot_admin_dot_service__pb2.LookupTicketByUnitTokenNameAndDateRangeRequest.SerializeToString,
                response_deserializer=squareup_dot_admin_dot_service__pb2.LookupTicketByUnitTokenNameAndDateRangeResponse.FromString,
                )
        self.ListOpenTickets = channel.unary_unary(
                '/squareup.waiter.admin.TicketV2AdminService/ListOpenTickets',
                request_serializer=squareup_dot_admin_dot_service__pb2.ListOpenTicketsRequest.SerializeToString,
                response_deserializer=squareup_dot_admin_dot_service__pb2.ListOpenTicketsResponse.FromString,
                )
        self.CloseTicket = channel.unary_unary(
                '/squareup.waiter.admin.TicketV2AdminService/CloseTicket',
                request_serializer=squareup_dot_admin_dot_service__pb2.CloseTicketRequest.SerializeToString,
                response_deserializer=squareup_dot_admin_dot_service__pb2.CloseTicketResponse.FromString,
                )


class TicketV2AdminServiceServicer(object):
    """** Only exposed via Admin Console for debugging */
    """

    def Show(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TicketReplayLogsList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupTicketsByUnitTokenNameAndDateRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOpenTickets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseTicket(self, request, context):
        """*
        THIS CHANGES MERCHANT DATA!
        This is equivalent to the merchant marking the ticket as "deleted" from the client without
        changing it. It will fail unless the ticket (client + server token) you specify is open.
        If you get that failure, it either means that the whole "ticket" as known by the client is
        closed already, or that you have the wrong server token (and are operating on a fork which
        is not the latest version of the ticket). You can see all forks for a given client token
        by using only the client token in TicketV2AdminService.Show.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TicketV2AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Show': grpc.unary_unary_rpc_method_handler(
                    servicer.Show,
                    request_deserializer=squareup_dot_admin_dot_service__pb2.ShowRequest.FromString,
                    response_serializer=squareup_dot_admin_dot_service__pb2.ShowResponse.SerializeToString,
            ),
            'TicketReplayLogsList': grpc.unary_unary_rpc_method_handler(
                    servicer.TicketReplayLogsList,
                    request_deserializer=squareup_dot_admin_dot_service__pb2.TicketReplayLogsListRequest.FromString,
                    response_serializer=squareup_dot_admin_dot_service__pb2.TicketReplayLogsListResponse.SerializeToString,
            ),
            'LookupTicketsByUnitTokenNameAndDateRange': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupTicketsByUnitTokenNameAndDateRange,
                    request_deserializer=squareup_dot_admin_dot_service__pb2.LookupTicketByUnitTokenNameAndDateRangeRequest.FromString,
                    response_serializer=squareup_dot_admin_dot_service__pb2.LookupTicketByUnitTokenNameAndDateRangeResponse.SerializeToString,
            ),
            'ListOpenTickets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListOpenTickets,
                    request_deserializer=squareup_dot_admin_dot_service__pb2.ListOpenTicketsRequest.FromString,
                    response_serializer=squareup_dot_admin_dot_service__pb2.ListOpenTicketsResponse.SerializeToString,
            ),
            'CloseTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseTicket,
                    request_deserializer=squareup_dot_admin_dot_service__pb2.CloseTicketRequest.FromString,
                    response_serializer=squareup_dot_admin_dot_service__pb2.CloseTicketResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.waiter.admin.TicketV2AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TicketV2AdminService(object):
    """** Only exposed via Admin Console for debugging */
    """

    @staticmethod
    def Show(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.waiter.admin.TicketV2AdminService/Show',
            squareup_dot_admin_dot_service__pb2.ShowRequest.SerializeToString,
            squareup_dot_admin_dot_service__pb2.ShowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TicketReplayLogsList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.waiter.admin.TicketV2AdminService/TicketReplayLogsList',
            squareup_dot_admin_dot_service__pb2.TicketReplayLogsListRequest.SerializeToString,
            squareup_dot_admin_dot_service__pb2.TicketReplayLogsListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LookupTicketsByUnitTokenNameAndDateRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.waiter.admin.TicketV2AdminService/LookupTicketsByUnitTokenNameAndDateRange',
            squareup_dot_admin_dot_service__pb2.LookupTicketByUnitTokenNameAndDateRangeRequest.SerializeToString,
            squareup_dot_admin_dot_service__pb2.LookupTicketByUnitTokenNameAndDateRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListOpenTickets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.waiter.admin.TicketV2AdminService/ListOpenTickets',
            squareup_dot_admin_dot_service__pb2.ListOpenTicketsRequest.SerializeToString,
            squareup_dot_admin_dot_service__pb2.ListOpenTicketsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.waiter.admin.TicketV2AdminService/CloseTicket',
            squareup_dot_admin_dot_service__pb2.CloseTicketRequest.SerializeToString,
            squareup_dot_admin_dot_service__pb2.CloseTicketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

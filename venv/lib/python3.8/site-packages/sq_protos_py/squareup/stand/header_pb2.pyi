# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    NewType as typing___NewType,
    Optional as typing___Optional,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

CommandIDValue = typing___NewType('CommandIDValue', builtin___int)
type___CommandIDValue = CommandIDValue
CommandID: _CommandID
class _CommandID(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[CommandIDValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    RESERVED = typing___cast(CommandIDValue, 0)
    ACK = typing___cast(CommandIDValue, 1)
    NACK = typing___cast(CommandIDValue, 2)
    NOTIFICATION = typing___cast(CommandIDValue, 3)
    GET_PROTOCOL_VERSION = typing___cast(CommandIDValue, 16)
    GET_INFO = typing___cast(CommandIDValue, 17)
    ENUMERATE_CONNECTED_PERIPHERALS = typing___cast(CommandIDValue, 18)
    ENABLE_PERIPHERALS = typing___cast(CommandIDValue, 19)
    PRINTER_GET_DEVICE_ID = typing___cast(CommandIDValue, 49)
    PRINTER_GET_PORT_STATUS = typing___cast(CommandIDValue, 50)
    PRINTER_SOFT_RESET = typing___cast(CommandIDValue, 51)
    PRINTER_READ_DATA = typing___cast(CommandIDValue, 52)
    PRINTER_WRITE_DATA = typing___cast(CommandIDValue, 53)
    MSR_SETUP_COMMAND = typing___cast(CommandIDValue, 65)
    SEND_HID_OUT_REPORT = typing___cast(CommandIDValue, 81)
    HEARTBEAT = typing___cast(CommandIDValue, 96)
    DISABLE_HEART_BEAT = typing___cast(CommandIDValue, 97)
    REBOOT = typing___cast(CommandIDValue, 98)
    WRITE_TEST_DATA = typing___cast(CommandIDValue, 257)
    READ_TEST_DATA = typing___cast(CommandIDValue, 258)
    WRITE_FIRMWARE_UPDATE_DATA = typing___cast(CommandIDValue, 259)
    GET_MANIFEST = typing___cast(CommandIDValue, 260)
    TEST_DEVICE_GENERATE_TRAFFIC = typing___cast(CommandIDValue, 263)
    PRINT_STRING_TO_CONSOLE = typing___cast(CommandIDValue, 264)
    WRITE_FIRMWARE_UPDATE_INIT = typing___cast(CommandIDValue, 265)
    COREDUMP_TRIGGER = typing___cast(CommandIDValue, 277)
    COREDUMP_GET_INFO = typing___cast(CommandIDValue, 278)
    COREDUMP_GET_KEY = typing___cast(CommandIDValue, 279)
    COREDUMP_GET_DATA = typing___cast(CommandIDValue, 280)
    COREDUMP_ERASE = typing___cast(CommandIDValue, 281)
    WRITE_FEATURE_FLAGS = typing___cast(CommandIDValue, 288)
    READ_FEATURE_FLAGS = typing___cast(CommandIDValue, 289)
RESERVED = typing___cast(CommandIDValue, 0)
ACK = typing___cast(CommandIDValue, 1)
NACK = typing___cast(CommandIDValue, 2)
NOTIFICATION = typing___cast(CommandIDValue, 3)
GET_PROTOCOL_VERSION = typing___cast(CommandIDValue, 16)
GET_INFO = typing___cast(CommandIDValue, 17)
ENUMERATE_CONNECTED_PERIPHERALS = typing___cast(CommandIDValue, 18)
ENABLE_PERIPHERALS = typing___cast(CommandIDValue, 19)
PRINTER_GET_DEVICE_ID = typing___cast(CommandIDValue, 49)
PRINTER_GET_PORT_STATUS = typing___cast(CommandIDValue, 50)
PRINTER_SOFT_RESET = typing___cast(CommandIDValue, 51)
PRINTER_READ_DATA = typing___cast(CommandIDValue, 52)
PRINTER_WRITE_DATA = typing___cast(CommandIDValue, 53)
MSR_SETUP_COMMAND = typing___cast(CommandIDValue, 65)
SEND_HID_OUT_REPORT = typing___cast(CommandIDValue, 81)
HEARTBEAT = typing___cast(CommandIDValue, 96)
DISABLE_HEART_BEAT = typing___cast(CommandIDValue, 97)
REBOOT = typing___cast(CommandIDValue, 98)
WRITE_TEST_DATA = typing___cast(CommandIDValue, 257)
READ_TEST_DATA = typing___cast(CommandIDValue, 258)
WRITE_FIRMWARE_UPDATE_DATA = typing___cast(CommandIDValue, 259)
GET_MANIFEST = typing___cast(CommandIDValue, 260)
TEST_DEVICE_GENERATE_TRAFFIC = typing___cast(CommandIDValue, 263)
PRINT_STRING_TO_CONSOLE = typing___cast(CommandIDValue, 264)
WRITE_FIRMWARE_UPDATE_INIT = typing___cast(CommandIDValue, 265)
COREDUMP_TRIGGER = typing___cast(CommandIDValue, 277)
COREDUMP_GET_INFO = typing___cast(CommandIDValue, 278)
COREDUMP_GET_KEY = typing___cast(CommandIDValue, 279)
COREDUMP_GET_DATA = typing___cast(CommandIDValue, 280)
COREDUMP_ERASE = typing___cast(CommandIDValue, 281)
WRITE_FEATURE_FLAGS = typing___cast(CommandIDValue, 288)
READ_FEATURE_FLAGS = typing___cast(CommandIDValue, 289)
type___CommandID = CommandID

NackCodeValue = typing___NewType('NackCodeValue', builtin___int)
type___NackCodeValue = NackCodeValue
NackCode: _NackCode
class _NackCode(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[NackCodeValue]):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    BAD_COMMAND_ID = typing___cast(NackCodeValue, 1)
    BAD_INSTANCE_ID = typing___cast(NackCodeValue, 2)
    BAD_PARAMETER = typing___cast(NackCodeValue, 3)
    NOT_IMPLEMETED = typing___cast(NackCodeValue, 4)
    OUT_OF_MEMORY_ERROR = typing___cast(NackCodeValue, 16)
    INTERNAL_ERROR = typing___cast(NackCodeValue, 65535)
BAD_COMMAND_ID = typing___cast(NackCodeValue, 1)
BAD_INSTANCE_ID = typing___cast(NackCodeValue, 2)
BAD_PARAMETER = typing___cast(NackCodeValue, 3)
NOT_IMPLEMETED = typing___cast(NackCodeValue, 4)
OUT_OF_MEMORY_ERROR = typing___cast(NackCodeValue, 16)
INTERNAL_ERROR = typing___cast(NackCodeValue, 65535)
type___NackCode = NackCode

class Header(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    commandID: type___CommandIDValue = ...
    transactionID: builtin___int = ...

    def __init__(self,
        *,
        commandID : typing___Optional[type___CommandIDValue] = None,
        transactionID : typing___Optional[builtin___int] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"commandID",b"commandID",u"transactionID",b"transactionID"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"commandID",b"commandID",u"transactionID",b"transactionID"]) -> None: ...
type___Header = Header

class EmptyMessage(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    def __init__(self,
        ) -> None: ...
type___EmptyMessage = EmptyMessage

class Ack(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    commandIDAck: type___CommandIDValue = ...
    variable: builtin___bytes = ...

    @property
    def header(self) -> type___Header: ...

    def __init__(self,
        *,
        header : typing___Optional[type___Header] = None,
        commandIDAck : typing___Optional[type___CommandIDValue] = None,
        variable : typing___Optional[builtin___bytes] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"commandIDAck",b"commandIDAck",u"header",b"header",u"variable",b"variable"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"commandIDAck",b"commandIDAck",u"header",b"header",u"variable",b"variable"]) -> None: ...
type___Ack = Ack

class Nack(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    commandIDAck: type___CommandIDValue = ...
    nackCode: type___NackCodeValue = ...

    @property
    def header(self) -> type___Header: ...

    def __init__(self,
        *,
        header : typing___Optional[type___Header] = None,
        commandIDAck : typing___Optional[type___CommandIDValue] = None,
        nackCode : typing___Optional[type___NackCodeValue] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"commandIDAck",b"commandIDAck",u"header",b"header",u"nackCode",b"nackCode"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"commandIDAck",b"commandIDAck",u"header",b"header",u"nackCode",b"nackCode"]) -> None: ...
type___Nack = Nack

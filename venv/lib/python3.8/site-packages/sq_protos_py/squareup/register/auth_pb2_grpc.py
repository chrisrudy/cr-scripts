# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.register import auth_pb2 as squareup_dot_register_dot_auth__pb2


class AuthServiceStub(object):
    """------------- SERVICES ------------- //

    * Register authorization service. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/squareup.register.api.AuthService/Login',
                request_serializer=squareup_dot_register_dot_auth__pb2.LoginRequest.SerializeToString,
                response_deserializer=squareup_dot_register_dot_auth__pb2.LoginResponse.FromString,
                )
        self.SelectUnit = channel.unary_unary(
                '/squareup.register.api.AuthService/SelectUnit',
                request_serializer=squareup_dot_register_dot_auth__pb2.SelectUnitRequest.SerializeToString,
                response_deserializer=squareup_dot_register_dot_auth__pb2.SelectUnitResponse.FromString,
                )
        self.EnrollTwoFactor = channel.unary_unary(
                '/squareup.register.api.AuthService/EnrollTwoFactor',
                request_serializer=squareup_dot_register_dot_auth__pb2.EnrollTwoFactorRequest.SerializeToString,
                response_deserializer=squareup_dot_register_dot_auth__pb2.EnrollTwoFactorResponse.FromString,
                )
        self.SendVerificationCodeTwoFactor = channel.unary_unary(
                '/squareup.register.api.AuthService/SendVerificationCodeTwoFactor',
                request_serializer=squareup_dot_register_dot_auth__pb2.SendVerificationCodeTwoFactorRequest.SerializeToString,
                response_deserializer=squareup_dot_register_dot_auth__pb2.SendVerificationCodeTwoFactorResponse.FromString,
                )
        self.UpgradeSessionTwoFactor = channel.unary_unary(
                '/squareup.register.api.AuthService/UpgradeSessionTwoFactor',
                request_serializer=squareup_dot_register_dot_auth__pb2.UpgradeSessionTwoFactorRequest.SerializeToString,
                response_deserializer=squareup_dot_register_dot_auth__pb2.UpgradeSessionTwoFactorResponse.FromString,
                )
        self.DeliverPasswordResetEmail = channel.unary_unary(
                '/squareup.register.api.AuthService/DeliverPasswordResetEmail',
                request_serializer=squareup_dot_register_dot_auth__pb2.DeliverPasswordResetEmailRequest.SerializeToString,
                response_deserializer=squareup_dot_register_dot_auth__pb2.DeliverPasswordResetEmailResponse.FromString,
                )


class AuthServiceServicer(object):
    """------------- SERVICES ------------- //

    * Register authorization service. 
    """

    def Login(self, request, context):
        """e.g. https://api.squareup.com/services/squareup.register.api.AuthService/Login

        *
        Called by Register to initiate login.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectUnit(self, request, context):
        """*
        Called by Register to select a unit to complete login. This is necessary because a given
        person may have access to multiple merchant accounts, any of which might contain multiple
        accessible locations.  The person must select what unit they want to login as.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnrollTwoFactor(self, request, context):
        """*
        Add a 2FA method for the current person.

        Enrollment will usually require multiple calls, passing data back and forth between client
        and server until an RPC returns an error or complete=true.  The data parameters required for
        the first call, what should be done with server-provided values, and which ones need to be
        passed back to the next step will be documented for each type.

        For SMS, the first call must supply phone, which will cause a verification code to be sent.
        The second call must have both phone and verification_code set, and will complete successfully
        if the supplied code matches.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendVerificationCodeTwoFactor(self, request, context):
        """* Create a new verification code for two factor auth and sends the code to the requested contact. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpgradeSessionTwoFactor(self, request, context):
        """* Upgrade the current session to a 2FA-protected session. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeliverPasswordResetEmail(self, request, context):
        """* Send the password reset email 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=squareup_dot_register_dot_auth__pb2.LoginRequest.FromString,
                    response_serializer=squareup_dot_register_dot_auth__pb2.LoginResponse.SerializeToString,
            ),
            'SelectUnit': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectUnit,
                    request_deserializer=squareup_dot_register_dot_auth__pb2.SelectUnitRequest.FromString,
                    response_serializer=squareup_dot_register_dot_auth__pb2.SelectUnitResponse.SerializeToString,
            ),
            'EnrollTwoFactor': grpc.unary_unary_rpc_method_handler(
                    servicer.EnrollTwoFactor,
                    request_deserializer=squareup_dot_register_dot_auth__pb2.EnrollTwoFactorRequest.FromString,
                    response_serializer=squareup_dot_register_dot_auth__pb2.EnrollTwoFactorResponse.SerializeToString,
            ),
            'SendVerificationCodeTwoFactor': grpc.unary_unary_rpc_method_handler(
                    servicer.SendVerificationCodeTwoFactor,
                    request_deserializer=squareup_dot_register_dot_auth__pb2.SendVerificationCodeTwoFactorRequest.FromString,
                    response_serializer=squareup_dot_register_dot_auth__pb2.SendVerificationCodeTwoFactorResponse.SerializeToString,
            ),
            'UpgradeSessionTwoFactor': grpc.unary_unary_rpc_method_handler(
                    servicer.UpgradeSessionTwoFactor,
                    request_deserializer=squareup_dot_register_dot_auth__pb2.UpgradeSessionTwoFactorRequest.FromString,
                    response_serializer=squareup_dot_register_dot_auth__pb2.UpgradeSessionTwoFactorResponse.SerializeToString,
            ),
            'DeliverPasswordResetEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.DeliverPasswordResetEmail,
                    request_deserializer=squareup_dot_register_dot_auth__pb2.DeliverPasswordResetEmailRequest.FromString,
                    response_serializer=squareup_dot_register_dot_auth__pb2.DeliverPasswordResetEmailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.register.api.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """------------- SERVICES ------------- //

    * Register authorization service. 
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.register.api.AuthService/Login',
            squareup_dot_register_dot_auth__pb2.LoginRequest.SerializeToString,
            squareup_dot_register_dot_auth__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectUnit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.register.api.AuthService/SelectUnit',
            squareup_dot_register_dot_auth__pb2.SelectUnitRequest.SerializeToString,
            squareup_dot_register_dot_auth__pb2.SelectUnitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnrollTwoFactor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.register.api.AuthService/EnrollTwoFactor',
            squareup_dot_register_dot_auth__pb2.EnrollTwoFactorRequest.SerializeToString,
            squareup_dot_register_dot_auth__pb2.EnrollTwoFactorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendVerificationCodeTwoFactor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.register.api.AuthService/SendVerificationCodeTwoFactor',
            squareup_dot_register_dot_auth__pb2.SendVerificationCodeTwoFactorRequest.SerializeToString,
            squareup_dot_register_dot_auth__pb2.SendVerificationCodeTwoFactorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpgradeSessionTwoFactor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.register.api.AuthService/UpgradeSessionTwoFactor',
            squareup_dot_register_dot_auth__pb2.UpgradeSessionTwoFactorRequest.SerializeToString,
            squareup_dot_register_dot_auth__pb2.UpgradeSessionTwoFactorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeliverPasswordResetEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.register.api.AuthService/DeliverPasswordResetEmail',
            squareup_dot_register_dot_auth__pb2.DeliverPasswordResetEmailRequest.SerializeToString,
            squareup_dot_register_dot_auth__pb2.DeliverPasswordResetEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

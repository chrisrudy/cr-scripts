# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Geocode(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    ResolutionValue = typing___NewType('ResolutionValue', builtin___int)
    type___ResolutionValue = ResolutionValue
    Resolution: _Resolution
    class _Resolution(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[Geocode.ResolutionValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNKNOWN = typing___cast(Geocode.ResolutionValue, 0)
        ADMINISTRATIVE_AREA = typing___cast(Geocode.ResolutionValue, 2)
        LOCALITY = typing___cast(Geocode.ResolutionValue, 4)
        SUB_LOCALITY = typing___cast(Geocode.ResolutionValue, 6)
        POSTAL_CODE = typing___cast(Geocode.ResolutionValue, 8)
        BLOCK = typing___cast(Geocode.ResolutionValue, 10)
        THOROUGHFARE = typing___cast(Geocode.ResolutionValue, 12)
        THOROUGHFARE_SEGMENT = typing___cast(Geocode.ResolutionValue, 14)
        INTERPOLATED_PREMISES = typing___cast(Geocode.ResolutionValue, 16)
        PREMISES = typing___cast(Geocode.ResolutionValue, 18)
        SUBPREMISES = typing___cast(Geocode.ResolutionValue, 20)
        MANUAL = typing___cast(Geocode.ResolutionValue, 31)
    UNKNOWN = typing___cast(Geocode.ResolutionValue, 0)
    ADMINISTRATIVE_AREA = typing___cast(Geocode.ResolutionValue, 2)
    LOCALITY = typing___cast(Geocode.ResolutionValue, 4)
    SUB_LOCALITY = typing___cast(Geocode.ResolutionValue, 6)
    POSTAL_CODE = typing___cast(Geocode.ResolutionValue, 8)
    BLOCK = typing___cast(Geocode.ResolutionValue, 10)
    THOROUGHFARE = typing___cast(Geocode.ResolutionValue, 12)
    THOROUGHFARE_SEGMENT = typing___cast(Geocode.ResolutionValue, 14)
    INTERPOLATED_PREMISES = typing___cast(Geocode.ResolutionValue, 16)
    PREMISES = typing___cast(Geocode.ResolutionValue, 18)
    SUBPREMISES = typing___cast(Geocode.ResolutionValue, 20)
    MANUAL = typing___cast(Geocode.ResolutionValue, 31)
    type___Resolution = Resolution

    latitude: builtin___float = ...
    longitude: builtin___float = ...
    resolution: type___Geocode.ResolutionValue = ...
    accuracy: builtin___float = ...
    altitude: builtin___float = ...
    altitude_accuracy: builtin___float = ...
    heading: builtin___float = ...
    speed: builtin___float = ...
    debug_info: typing___Text = ...
    geocoded_at: builtin___int = ...

    def __init__(self,
        *,
        latitude : typing___Optional[builtin___float] = None,
        longitude : typing___Optional[builtin___float] = None,
        resolution : typing___Optional[type___Geocode.ResolutionValue] = None,
        accuracy : typing___Optional[builtin___float] = None,
        altitude : typing___Optional[builtin___float] = None,
        altitude_accuracy : typing___Optional[builtin___float] = None,
        heading : typing___Optional[builtin___float] = None,
        speed : typing___Optional[builtin___float] = None,
        debug_info : typing___Optional[typing___Text] = None,
        geocoded_at : typing___Optional[builtin___int] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"accuracy",b"accuracy",u"altitude",b"altitude",u"altitude_accuracy",b"altitude_accuracy",u"debug_info",b"debug_info",u"geocoded_at",b"geocoded_at",u"heading",b"heading",u"latitude",b"latitude",u"longitude",b"longitude",u"resolution",b"resolution",u"speed",b"speed"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"accuracy",b"accuracy",u"altitude",b"altitude",u"altitude_accuracy",b"altitude_accuracy",u"debug_info",b"debug_info",u"geocoded_at",b"geocoded_at",u"heading",b"heading",u"latitude",b"latitude",u"longitude",b"longitude",u"resolution",b"resolution",u"speed",b"speed"]) -> None: ...
type___Geocode = Geocode

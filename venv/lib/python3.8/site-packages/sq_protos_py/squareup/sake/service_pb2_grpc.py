# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.sake import service_pb2 as squareup_dot_sake_dot_service__pb2


class SakeServiceStub(object):
    """*
    An internal service exported by all Sake RPC servers. This allows clients to query for metadata
    about the server and other services that it exports.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MoshiMoshi = channel.unary_unary(
                '/squareup.sake.SakeService/MoshiMoshi',
                request_serializer=squareup_dot_sake_dot_service__pb2.OhHai.SerializeToString,
                response_deserializer=squareup_dot_sake_dot_service__pb2.KThxBai.FromString,
                )
        self.Schema = channel.unary_unary(
                '/squareup.sake.SakeService/Schema',
                request_serializer=squareup_dot_sake_dot_service__pb2.SchemaRequest.SerializeToString,
                response_deserializer=squareup_dot_sake_dot_service__pb2.SchemaResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/squareup.sake.SakeService/List',
                request_serializer=squareup_dot_sake_dot_service__pb2.ListRequest.SerializeToString,
                response_deserializer=squareup_dot_sake_dot_service__pb2.ListResponse.FromString,
                )
        self.Call = channel.unary_unary(
                '/squareup.sake.SakeService/Call',
                request_serializer=squareup_dot_sake_dot_service__pb2.CallRequest.SerializeToString,
                response_deserializer=squareup_dot_sake_dot_service__pb2.CallResponse.FromString,
                )
        self.Heartbeat = channel.unary_unary(
                '/squareup.sake.SakeService/Heartbeat',
                request_serializer=squareup_dot_sake_dot_service__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=squareup_dot_sake_dot_service__pb2.HeartbeatResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/squareup.sake.SakeService/Ping',
                request_serializer=squareup_dot_sake_dot_service__pb2.PingRequest.SerializeToString,
                response_deserializer=squareup_dot_sake_dot_service__pb2.PingResponse.FromString,
                )


class SakeServiceServicer(object):
    """*
    An internal service exported by all Sake RPC servers. This allows clients to query for metadata
    about the server and other services that it exports.
    """

    def MoshiMoshi(self, request, context):
        """*
        "Hello" for Sake (<a href="http://www.wikihow.com/Say-Hello-in-Japanese">Say Hello in
        Japanese</a>). This should be the first RPC sent on any new connection from an RPC client.
        The RPC client indicates the service(s) that it expects the server to export. This is also
        how negotiation of protocol version is performed, and clients and servers exchange info on
        capabilities/extensions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Schema(self, request, context):
        """*
        Requests the schema for services exported by the server. The schema consists of file
        descriptors (that include all message/enum/service descriptor data) for the exported services
        and their transitive dependencies. This is the information required to construct a dynamic
        client (e.g. a client that is based wholly on descriptors, not on generated code).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """*
        Lists all services exported by this server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Call(self, request, context):
        """*
        Dispatches an RPC request to the given service and method. Returns the RPC response.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """*
        Checks the health of the service. This is used periodically (and frequently) by clients so
        that requests are sent to healthy servers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """*
        A simple "echo". The client sends a "ping" and the server echoes it back with the "pong".
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SakeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MoshiMoshi': grpc.unary_unary_rpc_method_handler(
                    servicer.MoshiMoshi,
                    request_deserializer=squareup_dot_sake_dot_service__pb2.OhHai.FromString,
                    response_serializer=squareup_dot_sake_dot_service__pb2.KThxBai.SerializeToString,
            ),
            'Schema': grpc.unary_unary_rpc_method_handler(
                    servicer.Schema,
                    request_deserializer=squareup_dot_sake_dot_service__pb2.SchemaRequest.FromString,
                    response_serializer=squareup_dot_sake_dot_service__pb2.SchemaResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=squareup_dot_sake_dot_service__pb2.ListRequest.FromString,
                    response_serializer=squareup_dot_sake_dot_service__pb2.ListResponse.SerializeToString,
            ),
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=squareup_dot_sake_dot_service__pb2.CallRequest.FromString,
                    response_serializer=squareup_dot_sake_dot_service__pb2.CallResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=squareup_dot_sake_dot_service__pb2.HeartbeatRequest.FromString,
                    response_serializer=squareup_dot_sake_dot_service__pb2.HeartbeatResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=squareup_dot_sake_dot_service__pb2.PingRequest.FromString,
                    response_serializer=squareup_dot_sake_dot_service__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.sake.SakeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SakeService(object):
    """*
    An internal service exported by all Sake RPC servers. This allows clients to query for metadata
    about the server and other services that it exports.
    """

    @staticmethod
    def MoshiMoshi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sake.SakeService/MoshiMoshi',
            squareup_dot_sake_dot_service__pb2.OhHai.SerializeToString,
            squareup_dot_sake_dot_service__pb2.KThxBai.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Schema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sake.SakeService/Schema',
            squareup_dot_sake_dot_service__pb2.SchemaRequest.SerializeToString,
            squareup_dot_sake_dot_service__pb2.SchemaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sake.SakeService/List',
            squareup_dot_sake_dot_service__pb2.ListRequest.SerializeToString,
            squareup_dot_sake_dot_service__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sake.SakeService/Call',
            squareup_dot_sake_dot_service__pb2.CallRequest.SerializeToString,
            squareup_dot_sake_dot_service__pb2.CallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sake.SakeService/Heartbeat',
            squareup_dot_sake_dot_service__pb2.HeartbeatRequest.SerializeToString,
            squareup_dot_sake_dot_service__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.sake.SakeService/Ping',
            squareup_dot_sake_dot_service__pb2.PingRequest.SerializeToString,
            squareup_dot_sake_dot_service__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

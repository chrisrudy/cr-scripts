# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.calendar import service_pb2 as squareup_dot_calendar_dot_service__pb2


class CalendarServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/squareup.calendar.service.CalendarService/Create',
                request_serializer=squareup_dot_calendar_dot_service__pb2.CreateRecurringSeriesRequest.SerializeToString,
                response_deserializer=squareup_dot_calendar_dot_service__pb2.CreateRecurringSeriesResponse.FromString,
                )
        self.UpdateRecurringSeries = channel.unary_unary(
                '/squareup.calendar.service.CalendarService/UpdateRecurringSeries',
                request_serializer=squareup_dot_calendar_dot_service__pb2.UpdateRecurringSeriesRequest.SerializeToString,
                response_deserializer=squareup_dot_calendar_dot_service__pb2.UpdateRecurringSeriesResponse.FromString,
                )
        self.GetOccurrence = channel.unary_unary(
                '/squareup.calendar.service.CalendarService/GetOccurrence',
                request_serializer=squareup_dot_calendar_dot_service__pb2.GetOccurrenceRequest.SerializeToString,
                response_deserializer=squareup_dot_calendar_dot_service__pb2.GetOccurrenceResponse.FromString,
                )
        self.GetRecurringSeries = channel.unary_unary(
                '/squareup.calendar.service.CalendarService/GetRecurringSeries',
                request_serializer=squareup_dot_calendar_dot_service__pb2.GetRecurringSeriesRequest.SerializeToString,
                response_deserializer=squareup_dot_calendar_dot_service__pb2.GetRecurringSeriesResponse.FromString,
                )
        self.ListNextOccurrences = channel.unary_unary(
                '/squareup.calendar.service.CalendarService/ListNextOccurrences',
                request_serializer=squareup_dot_calendar_dot_service__pb2.ListNextOccurrencesRequest.SerializeToString,
                response_deserializer=squareup_dot_calendar_dot_service__pb2.ListNextOccurrencesResponse.FromString,
                )
        self.ListRecurringSeries = channel.unary_unary(
                '/squareup.calendar.service.CalendarService/ListRecurringSeries',
                request_serializer=squareup_dot_calendar_dot_service__pb2.ListRecurringSeriesRequest.SerializeToString,
                response_deserializer=squareup_dot_calendar_dot_service__pb2.ListRecurringSeriesResponse.FromString,
                )
        self.UpdateOccurrence = channel.unary_unary(
                '/squareup.calendar.service.CalendarService/UpdateOccurrence',
                request_serializer=squareup_dot_calendar_dot_service__pb2.UpdateOccurrenceRequest.SerializeToString,
                response_deserializer=squareup_dot_calendar_dot_service__pb2.UpdateOccurrenceResponse.FromString,
                )
        self.DeleteOccurrence = channel.unary_unary(
                '/squareup.calendar.service.CalendarService/DeleteOccurrence',
                request_serializer=squareup_dot_calendar_dot_service__pb2.DeleteOccurrenceRequest.SerializeToString,
                response_deserializer=squareup_dot_calendar_dot_service__pb2.DeleteOccurrenceResponse.FromString,
                )
        self.TerminateRecurringSeries = channel.unary_unary(
                '/squareup.calendar.service.CalendarService/TerminateRecurringSeries',
                request_serializer=squareup_dot_calendar_dot_service__pb2.TerminateRecurringSeriesRequest.SerializeToString,
                response_deserializer=squareup_dot_calendar_dot_service__pb2.TerminateRecurringSeriesResponse.FromString,
                )
        self.TriggerOccurrence = channel.unary_unary(
                '/squareup.calendar.service.CalendarService/TriggerOccurrence',
                request_serializer=squareup_dot_calendar_dot_service__pb2.TriggerOccurrenceRequest.SerializeToString,
                response_deserializer=squareup_dot_calendar_dot_service__pb2.TriggerOccurrenceResponse.FromString,
                )


class CalendarServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """*
        Creates a recurring series.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRecurringSeries(self, request, context):
        """*
        Updates a recurring series which hasn't ENDED yet. Will also trigger the updated occurrence if the new
        start date is in the past.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOccurrence(self, request, context):
        """*
        Gets the next occurrence in the recurring series specified in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecurringSeries(self, request, context):
        """*
        Gets a single recurring series uniquely idendified by input series id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNextOccurrences(self, request, context):
        """*
        Lists the first upcoming occurrence for each series based on request params.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRecurringSeries(self, request, context):
        """*
        Lists the recurring series based on request params.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOccurrence(self, request, context):
        """*
        Updates the next or immediately previous occurrence based purely on RRULE. Refer to the request documentation to
        know more.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteOccurrence(self, request, context):
        """*
        Deletes the next or immediately previous occurrence based purely on RRULE. Refer to the request documentation to
        know more.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateRecurringSeries(self, request, context):
        """*
        Termiantes a recurring series.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerOccurrence(self, request, context):
        """*
        For internal manual testing only: trigger occurrence (via the feed) even though its time has not yet arrived.
        The intended usage is to trigger the next occurrence in the request only.

        Triggering any other occurrence will result in unpredictable behavior. For ex.:
        If there was no update to this occurrence at the time of execution of this API, it will end up ignoring all
        occurrences before the occurrence in the request. Tis behavior is untested.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalendarServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=squareup_dot_calendar_dot_service__pb2.CreateRecurringSeriesRequest.FromString,
                    response_serializer=squareup_dot_calendar_dot_service__pb2.CreateRecurringSeriesResponse.SerializeToString,
            ),
            'UpdateRecurringSeries': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRecurringSeries,
                    request_deserializer=squareup_dot_calendar_dot_service__pb2.UpdateRecurringSeriesRequest.FromString,
                    response_serializer=squareup_dot_calendar_dot_service__pb2.UpdateRecurringSeriesResponse.SerializeToString,
            ),
            'GetOccurrence': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOccurrence,
                    request_deserializer=squareup_dot_calendar_dot_service__pb2.GetOccurrenceRequest.FromString,
                    response_serializer=squareup_dot_calendar_dot_service__pb2.GetOccurrenceResponse.SerializeToString,
            ),
            'GetRecurringSeries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecurringSeries,
                    request_deserializer=squareup_dot_calendar_dot_service__pb2.GetRecurringSeriesRequest.FromString,
                    response_serializer=squareup_dot_calendar_dot_service__pb2.GetRecurringSeriesResponse.SerializeToString,
            ),
            'ListNextOccurrences': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNextOccurrences,
                    request_deserializer=squareup_dot_calendar_dot_service__pb2.ListNextOccurrencesRequest.FromString,
                    response_serializer=squareup_dot_calendar_dot_service__pb2.ListNextOccurrencesResponse.SerializeToString,
            ),
            'ListRecurringSeries': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRecurringSeries,
                    request_deserializer=squareup_dot_calendar_dot_service__pb2.ListRecurringSeriesRequest.FromString,
                    response_serializer=squareup_dot_calendar_dot_service__pb2.ListRecurringSeriesResponse.SerializeToString,
            ),
            'UpdateOccurrence': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOccurrence,
                    request_deserializer=squareup_dot_calendar_dot_service__pb2.UpdateOccurrenceRequest.FromString,
                    response_serializer=squareup_dot_calendar_dot_service__pb2.UpdateOccurrenceResponse.SerializeToString,
            ),
            'DeleteOccurrence': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteOccurrence,
                    request_deserializer=squareup_dot_calendar_dot_service__pb2.DeleteOccurrenceRequest.FromString,
                    response_serializer=squareup_dot_calendar_dot_service__pb2.DeleteOccurrenceResponse.SerializeToString,
            ),
            'TerminateRecurringSeries': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateRecurringSeries,
                    request_deserializer=squareup_dot_calendar_dot_service__pb2.TerminateRecurringSeriesRequest.FromString,
                    response_serializer=squareup_dot_calendar_dot_service__pb2.TerminateRecurringSeriesResponse.SerializeToString,
            ),
            'TriggerOccurrence': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerOccurrence,
                    request_deserializer=squareup_dot_calendar_dot_service__pb2.TriggerOccurrenceRequest.FromString,
                    response_serializer=squareup_dot_calendar_dot_service__pb2.TriggerOccurrenceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.calendar.service.CalendarService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CalendarService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.calendar.service.CalendarService/Create',
            squareup_dot_calendar_dot_service__pb2.CreateRecurringSeriesRequest.SerializeToString,
            squareup_dot_calendar_dot_service__pb2.CreateRecurringSeriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRecurringSeries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.calendar.service.CalendarService/UpdateRecurringSeries',
            squareup_dot_calendar_dot_service__pb2.UpdateRecurringSeriesRequest.SerializeToString,
            squareup_dot_calendar_dot_service__pb2.UpdateRecurringSeriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOccurrence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.calendar.service.CalendarService/GetOccurrence',
            squareup_dot_calendar_dot_service__pb2.GetOccurrenceRequest.SerializeToString,
            squareup_dot_calendar_dot_service__pb2.GetOccurrenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRecurringSeries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.calendar.service.CalendarService/GetRecurringSeries',
            squareup_dot_calendar_dot_service__pb2.GetRecurringSeriesRequest.SerializeToString,
            squareup_dot_calendar_dot_service__pb2.GetRecurringSeriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNextOccurrences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.calendar.service.CalendarService/ListNextOccurrences',
            squareup_dot_calendar_dot_service__pb2.ListNextOccurrencesRequest.SerializeToString,
            squareup_dot_calendar_dot_service__pb2.ListNextOccurrencesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRecurringSeries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.calendar.service.CalendarService/ListRecurringSeries',
            squareup_dot_calendar_dot_service__pb2.ListRecurringSeriesRequest.SerializeToString,
            squareup_dot_calendar_dot_service__pb2.ListRecurringSeriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateOccurrence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.calendar.service.CalendarService/UpdateOccurrence',
            squareup_dot_calendar_dot_service__pb2.UpdateOccurrenceRequest.SerializeToString,
            squareup_dot_calendar_dot_service__pb2.UpdateOccurrenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteOccurrence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.calendar.service.CalendarService/DeleteOccurrence',
            squareup_dot_calendar_dot_service__pb2.DeleteOccurrenceRequest.SerializeToString,
            squareup_dot_calendar_dot_service__pb2.DeleteOccurrenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateRecurringSeries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.calendar.service.CalendarService/TerminateRecurringSeries',
            squareup_dot_calendar_dot_service__pb2.TerminateRecurringSeriesRequest.SerializeToString,
            squareup_dot_calendar_dot_service__pb2.TerminateRecurringSeriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TriggerOccurrence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.calendar.service.CalendarService/TriggerOccurrence',
            squareup_dot_calendar_dot_service__pb2.TriggerOccurrenceRequest.SerializeToString,
            squareup_dot_calendar_dot_service__pb2.TriggerOccurrenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

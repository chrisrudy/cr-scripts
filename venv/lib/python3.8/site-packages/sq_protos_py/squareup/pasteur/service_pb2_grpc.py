# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sq_protos_py.squareup.pasteur import service_pb2 as squareup_dot_pasteur_dot_service__pb2


class InternalPasteurServiceStub(object):
    """Prefixed with Internal to avoid collision with the service defined in client-protos
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ForwardProcessorRequest = channel.unary_unary(
                '/squareup.pasteur.service.InternalPasteurService/ForwardProcessorRequest',
                request_serializer=squareup_dot_pasteur_dot_service__pb2.ForwardProcessorRequestRequest.SerializeToString,
                response_deserializer=squareup_dot_pasteur_dot_service__pb2.ForwardProcessorRequestResponse.FromString,
                )
        self.GetFakeProcessorResponse = channel.unary_unary(
                '/squareup.pasteur.service.InternalPasteurService/GetFakeProcessorResponse',
                request_serializer=squareup_dot_pasteur_dot_service__pb2.GetFakeProcessorResponseRequest.SerializeToString,
                response_deserializer=squareup_dot_pasteur_dot_service__pb2.GetFakeProcessorResponseResponse.FromString,
                )


class InternalPasteurServiceServicer(object):
    """Prefixed with Internal to avoid collision with the service defined in client-protos
    """

    def ForwardProcessorRequest(self, request, context):
        """* Forwards a ProcessorReqeust to Pasteur 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFakeProcessorResponse(self, request, context):
        """* Get the response a FakeProcessor should respond with for the current running test 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InternalPasteurServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ForwardProcessorRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ForwardProcessorRequest,
                    request_deserializer=squareup_dot_pasteur_dot_service__pb2.ForwardProcessorRequestRequest.FromString,
                    response_serializer=squareup_dot_pasteur_dot_service__pb2.ForwardProcessorRequestResponse.SerializeToString,
            ),
            'GetFakeProcessorResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFakeProcessorResponse,
                    request_deserializer=squareup_dot_pasteur_dot_service__pb2.GetFakeProcessorResponseRequest.FromString,
                    response_serializer=squareup_dot_pasteur_dot_service__pb2.GetFakeProcessorResponseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'squareup.pasteur.service.InternalPasteurService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InternalPasteurService(object):
    """Prefixed with Internal to avoid collision with the service defined in client-protos
    """

    @staticmethod
    def ForwardProcessorRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.pasteur.service.InternalPasteurService/ForwardProcessorRequest',
            squareup_dot_pasteur_dot_service__pb2.ForwardProcessorRequestRequest.SerializeToString,
            squareup_dot_pasteur_dot_service__pb2.ForwardProcessorRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFakeProcessorResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/squareup.pasteur.service.InternalPasteurService/GetFakeProcessorResponse',
            squareup_dot_pasteur_dot_service__pb2.GetFakeProcessorResponseRequest.SerializeToString,
            squareup_dot_pasteur_dot_service__pb2.GetFakeProcessorResponseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

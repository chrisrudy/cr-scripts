import contextlib
import msgpack
import os
import socket

from . import launchd


class BeyondAgentException(Exception):
    pass


try:
    # Try to import SocketIO, which exists only in python 3.
    from socket import SocketIO
except ImportError:
    # In python 2, fall back to this code which implements just enough of SocketIO for our needs.
    import io

    class SocketIO(io.RawIOBase):
        def __init__(self, sock, mode):
            # mode is assumed to be 'r', since that's the only one that makes sense
            io.RawIOBase.__init__(self)
            self._sock = sock
            self._timeout_occurred = False

        def readinto(self, b):
            self._checkClosed()
            self._checkReadable()
            if self._timeout_occurred:
                raise OSError("cannot read from timed out object")
            while True:
                try:
                    return self._sock.recv_into(b)
                except socket.timeout:
                    self._timeout_occurred = True
                    raise
                except socket.error as e:
                    if e.args[0] in {socket.EAGAIN, socket.EWOULDBLOCK}:
                        return None
                    raise

        def readable(self):
            if self.closed:
                raise ValueError("I/O operation on closed socket.")
            return True

        def close(self):
            if self.closed:
                return
            io.RawIOBase.close(self)
            self._sock._decref_socketios()
            self._sock = None


class Agent:
    def request(self, *args):
        with contextlib.closing(launchd.get_socket("com.squareup.beyondagent",
                                os.environ.get("BEYOND_AUTH_SOCK"))) as sock:
            encoded = msgpack.packb(args, use_bin_type=False)
            sock.sendall(encoded)

            unpacker = msgpack.Unpacker(SocketIO(sock, 'r'), raw=False)
            resp = unpacker.unpack()

        if not resp["success"]:
            raise BeyondAgentException("failed call to beyond-agent: {}".format(resp["message"]))

        return resp["return"].decode("utf-8")

    def get_token(self, url="https://registry.sqprod.co"):
        return self.request('get_token', url)

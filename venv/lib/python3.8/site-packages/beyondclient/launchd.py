from ctypes import cdll, c_void_p, c_char_p, c_bool, c_size_t, c_int
from enum import IntEnum
import os
import socket

try:
    lib = cdll.LoadLibrary("libSystem.dylib")

    launch_key_getjob = b"GetJob"

    class launch_data_type_t(IntEnum):
        LD_DICTIONARY = 1
        LD_ARRAY = 2
        LD_FD = 3
        LD_INTEGER = 4
        LD_REAL = 5
        LD_BOOL = 6
        LD_STRING = 7
        LD_OPAQUE = 8
        LD_ERRNO = 9
        LD_MACHPORT = 10

        @classmethod
        def from_param(cls, obj):
            return int(obj)

    # all c_void_p instances below are actually instances of launch_data_t,
    # which is an opaque pointer type so we don't need access to any of the
    # struct members or knowledge of its values

    # memory management
    launch_data_alloc = lib.launch_data_alloc
    launch_data_alloc.argtypes = [launch_data_type_t]
    launch_data_alloc.restype = c_void_p

    launch_data_new_string = lib.launch_data_new_string
    launch_data_new_string.argtypes = [c_char_p]
    launch_data_new_string.restype = c_void_p

    launch_msg = lib.launch_msg
    launch_msg.argtypes = [c_void_p]
    launch_msg.restype = c_void_p

    launch_data_free = lib.launch_data_free
    launch_data_free.argtypes = [c_void_p]
    launch_data_free.restype = None

    launch_data_get_type = lib.launch_data_get_type
    launch_data_get_type.argtypes = [c_void_p]
    launch_data_get_type.restype = launch_data_type_t

    # dict operations
    launch_data_dict_insert = lib.launch_data_dict_insert
    launch_data_dict_insert.argtypes = [c_void_p, c_void_p, c_char_p]
    launch_data_dict_insert.restype = c_bool

    launch_data_dict_lookup = lib.launch_data_dict_lookup
    launch_data_dict_lookup.argtypes = [c_void_p, c_char_p]
    launch_data_dict_lookup.restype = c_void_p

    # array operations
    launch_data_array_get_count = lib.launch_data_array_get_count
    launch_data_array_get_count.argtypes = [c_void_p]
    launch_data_array_get_count.restype = c_size_t

    launch_data_array_get_index = lib.launch_data_array_get_index
    launch_data_array_get_index.argtypes = [c_void_p, c_size_t]
    launch_data_array_get_index.restype = c_void_p

    # fd operations
    launch_data_get_fd = lib.launch_data_get_fd
    launch_data_get_fd.argtypes = [c_void_p]
    launch_data_get_fd.restype = c_int

    def runner(job):
        if isinstance(job, str):
            job = job.encode('utf-8')
        job_launchd_str = launch_data_new_string(job)

        getjob_msg = launch_data_alloc(launch_data_type_t.LD_DICTIONARY)
        launch_data_dict_insert(getjob_msg, job_launchd_str, launch_key_getjob)
        resp = launch_msg(getjob_msg)
        launch_data_free(getjob_msg)

        if launch_data_get_type(resp) == launch_data_type_t.LD_ERRNO:
            # TODO: print warning to stderr?
            launch_data_free(resp)
            return None

        tmp = launch_data_dict_lookup(resp, b"Sockets")
        tmp = launch_data_dict_lookup(tmp, b"Listeners")

        if launch_data_array_get_count(tmp) != 1:
            # TODO: print warning to stderr?
            launch_data_free(resp)
            return None

        tmp = launch_data_array_get_index(tmp, 0)
        fd = launch_data_get_fd(tmp)

        sock = socket.fromfd(fd, socket.AF_UNIX, socket.SOCK_STREAM)
        path = sock.getsockname()

        sock.close
        return path

    get_from_launchd = runner
except (OSError, AttributeError):
    def runner(job):
        return None

    get_from_launchd = runner


def get_socket(job, fallback=None):
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

    try:
        sock.connect(get_path(job, fallback))
    except socket.error as msg:
        print(msg)
        raise OSError("Failed to connect to beyond-agent or bc-ghostunnel; " +
                      "see go/beyondclient for help.")

    return sock


def get_path(job, fallback=None):
    if os.environ.get("BEYOND_AUTH_NO_LAUNCHD"):
        return fallback

    path = get_from_launchd(job) or fallback

    if path is None or not os.path.exists(path):
        raise ValueError("Couldn't find a way to connect to beyond-agent or bc-ghostunnel. " +
                         "This can often be fixed by restarting your laptop. " +
                         "Visit go/beyondclient for more information.")

    return path

# -*- coding: utf-8 -*-

import os
import requests
import socket
import urllib3

try:
    import http.client as httplib
except ImportError:
    import httplib

from . import beyondagent
from . import launchd


def session():
    s = BeyondCorpSession()
    # TODO: should we even allow http connections?
    s.mount("http://", BeyondCorpAdapter())
    s.mount("https://", BeyondCorpAdapter())
    s.proxies['all'] = 'unix://magic'
    return s


class UnixSocketConnection(httplib.HTTPConnection):
    def __init__(self, *args, **kwargs):
        if urllib3.packages.six.PY3:
            kwargs.pop("strict", None)

        self.proxy_url = kwargs.pop('_socks_options')['url']
        httplib.HTTPConnection.__init__(self, *args, **kwargs)
        self.sock = None

    def __del__(self):  # base class does not have d'tor
        # TODO: is this necessary? the SOCKS implementation in requests doesn't have it...
        if self.sock:
            self.sock.close()

    def connect(self):
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.settimeout(self.timeout)
        sock.connect(self.proxy_url)
        self.sock = sock


class UnixSocketConnectionPool(urllib3.connectionpool.HTTPConnectionPool):
    ConnectionCls = UnixSocketConnection


class UnixSocketProxyManager(urllib3.PoolManager):
    def __init__(self, proxy_url, num_pools=10, headers=None, **connection_pool_kw):
        # this reuses the '_socks_options' key, since that's a hard-coded allowed attribute
        # for some hashing stuff that happens internally. Just imagine that it's actually
        # '_proxy_url' or something.
        connection_pool_kw['_socks_options'] = {'url': proxy_url}

        super(UnixSocketProxyManager, self).__init__(
            num_pools, headers, **connection_pool_kw
        )

        self.pool_classes_by_scheme = {
            "http": UnixSocketConnectionPool,
            "https": UnixSocketConnectionPool,
        }


class BeyondCorpAdapter(requests.adapters.HTTPAdapter):
    def proxy_manager_for(self, proxy, **proxy_kwargs):
        if proxy != 'unix://magic':
            raise ValueError("The only valid proxy is unix://magic for 'all' URLs. " +
                             "Did you change the proxy settings?")

        if proxy in self.proxy_manager:
            manager = self.proxy_manager[proxy]
        else:
            path = launchd.get_path("com.squareup.bc-ghostunnel",
                                    os.environ.get("BEYOND_CORP_TUNNEL"))
            manager = self.proxy_manager[proxy] = UnixSocketProxyManager(path)

        return manager


class BeyondCorpSession(requests.Session):
    def __init__(self):
        super(BeyondCorpSession, self).__init__()
        self.agent = beyondagent.Agent()

    def request(self, *args, **kwargs):
        try:
            import cookielib
        except ImportError:
            from http import cookiejar as cookielib

        # TODO: this should probably be a copy, but a dict and CookieJar have different methods
        # of creating shallow copies so we can defer on this.
        cookies = kwargs.setdefault('cookies', {})
        if isinstance(cookies, cookielib.CookieJar):
            cookies.set_cookie(cookielib.Cookie('bc_auth_token', self.agent.get_token()))
        else:
            cookies.setdefault('bc_auth_token', self.agent.get_token())

        return super(BeyondCorpSession, self).request(*args, **kwargs)

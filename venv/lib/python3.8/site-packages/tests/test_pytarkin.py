#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pytest
import time
import os

import mock
from google.protobuf import message as gmessage
from sq_protos_py.squareup.tarkin import tarkin_pb2

from pytarkin import pytarkin


@pytest.fixture(scope='function')
def beyondclient(monkeypatch):
    mocked = mock.Mock()
    monkeypatch.setattr(pytarkin, 'beyondclient', mocked)
    yield mocked


@pytest.fixture(scope='function')
def session(monkeypatch, beyondclient):
    mocked = mock.Mock()
    monkeypatch.setattr(getattr(pytarkin, 'requests'), 'Session', mocked)
    yield mocked


# Super hacky
os.path.exists = mock.Mock(return_value=True)


@pytest.mark.parametrize('device', ['r12', 'r12c', 'x2', 'x2b', 't2', 't2b'])
@pytest.mark.parametrize('production', [False, True])
def test_create_firmware_assets_from_rtm_manifest(device, production, session):
    """Tests the API for creating assets from an RTM manifest.

    RTM manifest is the current supported way of notifying Tarkin of the
    existence of firmware assets.
    """
    version = '9.99.999'
    manifest_url = 'https://hoistrepo-api.vip.sjc1b.square/firmware/riker/rtm/{product}' \
        '/{version}/manifest.yaml'
    manifest_url = manifest_url.format(product=device, version=version)
    session.return_value.post.return_value.content = b''
    session.return_value.post.return_value.status_code = 200
    assert pytarkin.create_firmware_assets_from_rtm_manifest(manifest_url, production) is None
    assert session.return_value.post.call_count == 1

    proto = tarkin_pb2.CreateReaderAssetsRequest()
    data = session.return_value.post.call_args[1]['data']
    proto.ParseFromString(data)
    assert proto.rtm_manifest_url == manifest_url


@pytest.mark.parametrize('mr_application', [
        'x2-squid-swup', 'x2-squid-swup-ga', 'x2-vpos-squid-swup', 'x2-vposrst-squid-swup', 'x2-vposrst-squid-swup-ga',
        'x2-vposrtl-squid-swup', 'x2-vposrtl-squid-swup-ga'])
@pytest.mark.parametrize('sha', [
        '7777777777777777777777777777777777777777', '1234567890123456789--1234567890123456789'])
@pytest.mark.parametrize('production', [False, True])
def test_create_squid_assets_success_x2(mr_application, sha, production, session):
    version = '7.77.7777'

    response = tarkin_pb2.CreateAssetResponse()
    response.result = tarkin_pb2.CreateAssetResponse.Result.SUCCESS
    response.message = 'message'
    response.created_asset_ids.append(7)

    session.return_value.post.return_value.content = response.SerializeToString()
    session.return_value.post.return_value.status_code = 200
    assert pytarkin.create_squid_assets(mr_application, sha, version, production)

    expected_call_count = 2 if production else 4
    assert session.return_value.post.call_count == expected_call_count

    request = tarkin_pb2.CreateX2AssetRequest()
    data = session.return_value.post.call_args[1]['data']
    request.ParseFromString(data)
    assert request.platform == 'android_zip'
    assert request.reader_type == tarkin_pb2.ReaderType.X2


@pytest.mark.parametrize('mr_application', ['x2b-squid-swup', 'x2b-squid-swup-ga'])
@pytest.mark.parametrize('sha', [
        '7777777777777777777777777777777777777777', '1234567890123456789--1234567890123456789'])
@pytest.mark.parametrize('production', [False, True])
def test_create_squid_assets_success_x2b(mr_application, sha, production, session):
    version = '7.77.7777'

    response = tarkin_pb2.CreateAssetResponse()
    response.result = tarkin_pb2.CreateAssetResponse.Result.SUCCESS
    response.message = 'message'
    response.created_asset_ids.append(7)

    session.return_value.post.return_value.content = response.SerializeToString()
    session.return_value.post.return_value.status_code = 200
    assert pytarkin.create_squid_assets(mr_application, sha, version, production)

    expected_call_count = 2 if production else 4
    assert session.return_value.post.call_count == expected_call_count

    request = tarkin_pb2.CreateX2AssetRequest()
    data = session.return_value.post.call_args[1]['data']
    request.ParseFromString(data)
    assert request.platform == 'android_zip'
    assert request.reader_type == tarkin_pb2.ReaderType.X2B


@pytest.mark.parametrize('mr_application', [
        't2-squid-swup', 't2-squid-swup-ga', 't2-vpos-squid-swup', 't2-vpostap-squid-swup', 't2-vpostap-squid-swup-ga'])
@pytest.mark.parametrize('sha', [
        '7777777777777777777777777777777777777777', '1234567890123456789--1234567890123456789'])
@pytest.mark.parametrize('production', [False, True])
def test_create_squid_assets_success_t2(mr_application, sha, production, session):
    version = '7.77.7777'

    response = tarkin_pb2.CreateAssetResponse()
    response.result = tarkin_pb2.CreateAssetResponse.Result.SUCCESS
    response.message = 'message'
    response.created_asset_ids.append(7)

    session.return_value.post.return_value.content = response.SerializeToString()
    session.return_value.post.return_value.status_code = 200
    assert pytarkin.create_squid_assets(mr_application, sha, version, production)

    expected_call_count = 2 if production else 4
    assert session.return_value.post.call_count == expected_call_count

    request = tarkin_pb2.CreateX2AssetRequest()
    data = session.return_value.post.call_args[1]['data']
    request.ParseFromString(data)
    assert request.platform == 'android_zip'
    assert request.reader_type == tarkin_pb2.ReaderType.T2


@pytest.mark.parametrize('mr_application', ['t2b-squid-swup', 't2b-squid-swup-ga'])
@pytest.mark.parametrize('sha', [
        '7777777777777777777777777777777777777777', '1234567890123456789--1234567890123456789'])
@pytest.mark.parametrize('production', [False, True])
def test_create_squid_assets_success_t2b(mr_application, sha, production, session):
    version = '7.77.7777'

    response = tarkin_pb2.CreateAssetResponse()
    response.result = tarkin_pb2.CreateAssetResponse.Result.SUCCESS
    response.message = 'message'
    response.created_asset_ids.append(7)

    session.return_value.post.return_value.content = response.SerializeToString()
    session.return_value.post.return_value.status_code = 200
    assert pytarkin.create_squid_assets(mr_application, sha, version, production)

    expected_call_count = 2 if production else 4
    assert session.return_value.post.call_count == expected_call_count

    request = tarkin_pb2.CreateX2AssetRequest()
    data = session.return_value.post.call_args[1]['data']
    request.ParseFromString(data)
    assert request.platform == 'android_zip'
    assert request.reader_type == tarkin_pb2.ReaderType.T2B


@pytest.mark.parametrize('mr_application', ['swup-t2', 'noswup-application'])
def test_create_squid_assets_failure_application(mr_application):
    sha = '7777777777777777777777777777777777777777'
    version = '7.77.7777'

    with pytest.raises(pytarkin.PyTarkinNotImplementedExeception) as error:
        pytarkin.create_squid_assets(mr_application, sha, version)

    assert error.type is pytarkin.PyTarkinNotImplementedExeception


@pytest.mark.parametrize('sha', [
        'tooshort', 'illegalcharacters!!!illegalcharacters!!!', 'toomanydashes--------------toomanydashes'])
def test_create_squid_assets_failure_sha(sha):
    mr_application = 't2-squid-swup'
    version = '7.77.7777'

    with pytest.raises(pytarkin.PyTarkinValueException) as error:
        pytarkin.create_squid_assets(mr_application, sha, version)

    assert error.type is pytarkin.PyTarkinValueException

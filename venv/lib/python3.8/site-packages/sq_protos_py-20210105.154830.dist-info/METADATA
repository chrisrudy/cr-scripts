Metadata-Version: 2.1
Name: sq-protos-py
Version: 20210105.154830
Summary: Use Square's protobufs in Python!
Home-page: UNKNOWN
Author: Ryan Anderson
Author-email: randerson@squareup.com
License: UNKNOWN
Keywords: sq_protos_py
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Requires-Dist: protobuf (>=3.5.0)
Requires-Dist: grpcio (>=1.20.1)
Requires-Dist: grpcio-tools (<1.34.0,>=1.20.1)
Provides-Extra: dev
Requires-Dist: bumpversion ; extra == 'dev'
Requires-Dist: flake8 ; extra == 'dev'
Requires-Dist: pytest ; extra == 'dev'

# sq-protos-py

Use Square's protobufs in Python!

## Features

To install:

    pip install git+https://git.sqcorp.co/scm/py/sq-protos-py.git@master#egg=sq-protos-py --upgrade

Example usage:

    from sq_protos_py.squareup.tarkin import tarkin_pb2

    create_elf_asset_request = tarkin_pb2.CreateElfAssetRequest()
    create_elf_asset_request.reader_type = tarkin_pb2.R12
    encoded_request = create_elf_asset_request.SerializeToString()

    encoded_response = foo()
    create_asset_response = tarkin_pb2.CreateAssetResponse()
    create_asset_response.ParseFromString(encoded_response)

## Development

Updates to sq-protos-py happen automatically, so you shouldn't ever need to manually make changes in this repo.

If for some reason you do:

You will need `protoc`. If you don't already have it run `brew install protoc-square`.
You will also need all of the python requirements in the `requirements.txt` file.
To install them, run: `pip install -r requirements.txt`

### Updating

The package is automatically updated by a jenkins job.
This job will pull in the most recent all-protos artifact, regenerate protos in this repo, commit the change, and then build and publish a new version of this package.

You can view the current state of the jenkins job [here][job-link]

### Tests

There are two categories of tests

* `py.test` which tests that your code does what you expect
* `flake8` which verifies that you're using standard conventions in writing your code

To run them locally:

    flake8 .
    py.test tests

I highly recommend installing live `flake8` checking in your editor, it makes the whole process much easier:

[[sublime]](https://github.com/MagicStack/MagicPython)
[[atom]](https://github.com/MagicStack/MagicPython)
[[vim]](https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/)
[[emacs]](http://www.flycheck.org/en/latest/)

### Continuous Integrations

When you make a PR, the script in script/ci will run the tests on Kochiku and are required
to pass in order to merge. This ensures PRs do not break existing functionally and also
that new code lives up to the coding standards for the repo.

* Read more about [Making Clean Code a Part of Your Build Process](https://www.caktusgroup.com/blog/2015/08/15/making-clean-code-part-your-build-process/)

[job-link]: https://prod-jenkins.sqprod.co/job/sq-protos-py-publish/



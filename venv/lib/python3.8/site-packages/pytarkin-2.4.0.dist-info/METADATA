Metadata-Version: 2.1
Name: pytarkin
Version: 2.4.0
Summary: A simple client package for using Tarkin's API.
Home-page: UNKNOWN
Author: Ryan Anderson
Author-email: ts-sf@squareup.com
License: UNKNOWN
Keywords: pytarkin
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Requires-Dist: beyondclient
Requires-Dist: requests
Requires-Dist: sq-protos-py (>=20191001)
Provides-Extra: dev
Requires-Dist: bumpversion ; extra == 'dev'
Requires-Dist: coverage ; extra == 'dev'
Requires-Dist: pycodestyle (>=2.3.1) ; extra == 'dev'
Requires-Dist: pytest (==4.6) ; extra == 'dev'

## pytarkin
### Overview
A simple client package for using
[Tarkin](https://git.sqcorp.co/projects/HW/repos/tarkin/browse)'s API.

### Usage
Example usage:
```
import pytarkin

# To link or unlink existing R6, R12, or X2 assets to exisiting audiences
pytarkin.link_asset('R12', audience_id=12, asset_id=8, production=False)
pytarkin.unlink_asset('R12', audience_id=12, asset_id=8, production=False)

# To notify Tarkin of new ELF symbol files for R6, R12, or X2
pytarkin.create_elf_assets('R12', 209024)

# To notify Tarkin of new R6 or R12 firmware assets
pytarkin.create_firmware_assets('R12', 209024, production=False)

# To notify Tarkin of new X2 SQUID assets
pytarkin.create_squid_assets('x2-squid-swup', '6e283bd52fcd437cf56e4cea70fbfbbf00ec9ff1', '2.33.55', production=False)

# To retrieve the asset_id for X2 SQUID assets
pytarkin.get_squid_asset_id('x2-squid-swup', '6e283bd52fcd437cf56e4cea70fbfbbf00ec9ff1', '2.33.55', build_type='USERDEBUG', critical=False, production=False)
```

Some methods will prompt you for your password and verification code once every 8 hours.
This means that completely automated usage is not supported for those methods.
Authentication is required for: `link_asset`, `unlink_asset`

### Installation
### Via internal PyPI server
If it is your first time using the internal PyPI server, create a Pip
configuration file (`~/.pip/pip.conf`) with the following contents:

```
[global]
timeout = 120
trusted-host = nexus3.sqcorp.co
index-url = https://nexus3.sqcorp.co/repository/pypi-all/simple
index = https://nexus3.sqcorp.co/repository/pypi-all/pypi
```

You can then install `pytarkin` with:

```
pip install pytarkin
```

#### Via Stash
```
pip install git+https://git.sqcorp.co/scm/pytarkin/pytarkin.git@master
```

### Development
It is recommended that you use a Python virtual environment when doing
development work across different Python packages.  The simplest way to set
this up is to install
[`virtualenv`](https://docs.python-guide.org/dev/virtualenvs/):

```
$ pip install --user virtualenv
$ python -m virtualenv .venv
$ .venv/bin/activate
```

Note, whenever working on the project, you will first need to run
`.venv/bin/activate` to activate the environment.  Alternatively, you can try
[`virtualenvwrapper`](https://virtualenvwrapper.readthedocs.io/en/latest/).

### Testing
Unit tests can be run by running:
```
$ python setup.py test
```

Linting can be run as follows:
```
$ pycodestyle .
```

### Releases
Releases are automated through Kochiku.  When a new version lands on the
`master` branch of the repository, a build will be kicked off.  If the build is
successful, wheels for both Python2 and Python3 for the project will be
uploaded to the DSE PyPi instance.

#### Bumping Versions
In order to release a new version of the package, you will need to bump the
version up.  This can be done by using `bumpversion`:

```
$ source .venv/bin/activate
$ pip install bumpversion

# Bump the patch version number for small changes and bug fixes.
$ bumpversion patch

# Bump the minor version number for larger changes where current API has not
# changed, small features have been written / added.
$ bumpversion minor

# Bump the major version number for larger rewrites / API changes, and major
# features.
$ bumpversion major
```


